<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>烟雨林</title><link href="http://www.yanyulin.info/" rel="alternate"></link><link href="http://www.yanyulin.info/feeds/all.atom.xml" rel="self"></link><id>http://www.yanyulin.info/</id><updated>2014-03-14T00:00:00+08:00</updated><entry><title>阿里巴巴笔试题校招笔试题2014年笔试题</title><link href="http://www.yanyulin.info/pages/2014/03/alibaba_2014_B.html" rel="alternate"></link><updated>2014-03-14T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-14:pages/2014/03/alibaba_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此试题为整个东北区的，包括哈尔滨、沈阳...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一部分 单选题&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;1假设把整数关键码K散列到N个槽列表，以下哪些散列函数是好的散列函数&lt;/p&gt;
&lt;p&gt;A: h(K)=K/N;&lt;/p&gt;
&lt;p&gt;B: h(K)=1;&lt;/p&gt;
&lt;p&gt;C: h(K)=K mod N;&lt;/p&gt;
&lt;p&gt;D: h(K)=(K+rand(N)) mod N, rand(N)返回0到N-1的整数  &lt;/p&gt;
&lt;p&gt;2 下面排序算法中，初始数据集的排列顺序对算法的性能无影响的是&lt;/p&gt;
&lt;p&gt;A: 堆排序 &lt;/p&gt;
&lt;p&gt;B：插入排序&lt;/p&gt;
&lt;p&gt;C: 冒泡排序 &lt;/p&gt;
&lt;p&gt;D:快速排序&lt;/p&gt;
&lt;p&gt;3 下面说法错误的是&lt;/p&gt;
&lt;p&gt;A: CISC计算机比RISC计算机指令多&lt;/p&gt;
&lt;p&gt;B: 在指令格式中，采用扩展操作码设计方案的目的是为了保持指令字长不变而增加寻址空间&lt;/p&gt;
&lt;p&gt;C:增加流水线段数理论上可以提高CPU频率&lt;/p&gt;
&lt;p&gt;D:冯诺依曼体系结构的主要特征是存储程序的工作方式&lt;/p&gt;
&lt;p&gt;4 不属于冯诺依曼体系结构必要组成部分是：&lt;/p&gt;
&lt;p&gt;A:CPU &lt;/p&gt;
&lt;p&gt;B: Cache &lt;/p&gt;
&lt;p&gt;C:RAM &lt;/p&gt;
&lt;p&gt;D:ROM&lt;/p&gt;
&lt;p&gt;5 一个栈的入栈序列式ABCDE则不可能的出栈序列是:&lt;/p&gt;
&lt;p&gt;A:DECBA  &lt;/p&gt;
&lt;p&gt;B:DCEBA  &lt;/p&gt;
&lt;p&gt;C:ECDBA  &lt;/p&gt;
&lt;p&gt;D:ABCDE   &lt;/p&gt;
&lt;p&gt;6 你认为可以完成编写一个C语言编译器的语言是&lt;/p&gt;
&lt;p&gt;A：汇编 &lt;/p&gt;
&lt;p&gt;B:C语言 &lt;/p&gt;
&lt;p&gt;C:VB &lt;/p&gt;
&lt;p&gt;D:以上全可以   &lt;/p&gt;
&lt;p&gt;7 关于C++/JAVA类中的static成员和对象成员的说法正确的是：&lt;/p&gt;
&lt;p&gt;A：static成员变量在对象构造时候生成&lt;/p&gt;
&lt;p&gt;B: static成员函数在对象成员函数中无法调用&lt;/p&gt;
&lt;p&gt;C: 虚成员函数不可能是static成员函数&lt;/p&gt;
&lt;p&gt;D: static成员函数不能访问static成员变量&lt;/p&gt;
&lt;p&gt;8、下图中从A点走向Z点共有多少种走法，每次只能向右或者向下走一步&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/alibaba_2014_B.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/ali2014_1.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;9：某进程在运行过程中需要等待从磁盘上读入数据，此时进程的状态将：&lt;/p&gt;
&lt;p&gt;A: 从就绪变为运行  &lt;/p&gt;
&lt;p&gt;B:从运行变为就绪&lt;/p&gt;
&lt;p&gt;C: 从运行变为阻塞  &lt;/p&gt;
&lt;p&gt;D:从阻塞变为就绪&lt;/p&gt;
&lt;p&gt;10：下面算法的时间复杂度为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;If&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;Else&lt;/span&gt;

&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A: O(1)   &lt;/p&gt;
&lt;p&gt;B:O(n)  &lt;/p&gt;
&lt;p&gt;C:O(N*N)  &lt;/p&gt;
&lt;p&gt;D:O(n!)&lt;/p&gt;
&lt;p&gt;11: n从1开始，每个操作可以选择对n加1或者对n加倍。若想获得整数2013，最少需要多少个操作&lt;/p&gt;
&lt;p&gt;A:18   &lt;/p&gt;
&lt;p&gt;B:24   &lt;/p&gt;
&lt;p&gt;C:21  &lt;/p&gt;
&lt;p&gt;D；不可能&lt;/p&gt;
&lt;p&gt;12：对于一个具有n个顶点的无向图，若采用邻接表数据结构表示，则存放表头节点的数组大小为：&lt;/p&gt;
&lt;p&gt;A: n  &lt;/p&gt;
&lt;p&gt;B: n+1   &lt;/p&gt;
&lt;p&gt;C: n-1   &lt;/p&gt;
&lt;p&gt;D:n+边数&lt;/p&gt;
&lt;p&gt;14：如下函数，在&lt;code&gt;32bit&lt;/code&gt;系统&lt;code&gt;foo(2^31-3)&lt;/code&gt;的值是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A： 0   &lt;/p&gt;
&lt;p&gt;B: 1  &lt;/p&gt;
&lt;p&gt;C:2  &lt;/p&gt;
&lt;p&gt;D:4&lt;/p&gt;
&lt;p&gt;15：对于顺序存储的线性数组，访问节点和增加节点删除节点的时间复杂度为：&lt;/p&gt;
&lt;p&gt;A: O(n),O(n) &lt;/p&gt;
&lt;p&gt;B:O(n),O(1)&lt;/p&gt;
&lt;p&gt;C:O(1),O(n) &lt;/p&gt;
&lt;p&gt;D:O(n),O(n)&lt;/p&gt;
&lt;p&gt;16:在32为系统环境，编译选项为4字节对齐，那么sizeof(A)和sizeof(B)是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Struct&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;

&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="n"&gt;Struct&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A: 16,16    &lt;/p&gt;
&lt;p&gt;B:13,12   &lt;/p&gt;
&lt;p&gt;C:16,12 &lt;/p&gt;
&lt;p&gt;D:11,16&lt;/p&gt;
&lt;p&gt;17:袋中有红球，黄球，白球各一个，每次任意取一个放回，如此连续3次，则下列事件中概率是8/9的是：&lt;/p&gt;
&lt;p&gt;A: 颜色全相同 &lt;/p&gt;
&lt;p&gt;B:颜色全不相同&lt;/p&gt;
&lt;p&gt;C:颜色全相同&lt;/p&gt;
&lt;p&gt;D:颜色无红色&lt;/p&gt;
&lt;p&gt;18：一个洗牌程序的功能是将n张牌的顺序打乱，以下关于洗牌程序的功能定义说法最恰当的是：&lt;/p&gt;
&lt;p&gt;A: 每张牌出现在n个位置上的概率相等&lt;/p&gt;
&lt;p&gt;B: 每张牌出现在n个位置上的概率独立&lt;/p&gt;
&lt;p&gt;C: 任何连续位置上的两张牌的内容独立&lt;/p&gt;
&lt;p&gt;D: n张牌的任何两个不同排列出现的概率相等&lt;/p&gt;
&lt;p&gt;19：用两种颜色去染排成一个圈的6个棋子，如果通过旋转得到则只算一种，一共有多少种染色：&lt;/p&gt;
&lt;p&gt;A: 10 &lt;/p&gt;
&lt;p&gt;B:11 &lt;/p&gt;
&lt;p&gt;C:14: &lt;/p&gt;
&lt;p&gt;D:15&lt;/p&gt;
&lt;p&gt;20：递归式的先序遍历一个n节点，深度为d的二叉树，则需要栈空间的大小为：&lt;/p&gt;
&lt;p&gt;A: O(n) &lt;/p&gt;
&lt;p&gt;B:O(d)  &lt;/p&gt;
&lt;p&gt;C:O(logn)  &lt;/p&gt;
&lt;p&gt;D:(nlogn)&lt;/p&gt;
&lt;p&gt;第二部分：多选&lt;/p&gt;
&lt;p&gt;21：两个线程运行在双核机器上，每个线程主线程如下，线程1&lt;code&gt;：x=1;r1=y;&lt;/code&gt;线程2：&lt;code&gt;y=1;r2=x;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;X和y是全局变量，初始为0。以下哪一个是r1和r2的可能值：&lt;/p&gt;
&lt;p&gt;A: r1=1,r2=1&lt;/p&gt;
&lt;p&gt;B: r1=1,r2=0&lt;/p&gt;
&lt;p&gt;C:r1=0,r2=0&lt;/p&gt;
&lt;p&gt;D:r1=0,r2=1&lt;/p&gt;
&lt;p&gt;22.关于Linux系统的负载，以下表述正确的是：&lt;/p&gt;
&lt;p&gt;A: 通过就绪和运行的进程数来反映&lt;/p&gt;
&lt;p&gt;B: 通过TOP命令查看&lt;/p&gt;
&lt;p&gt;C: 通过uptime查看&lt;/p&gt;
&lt;p&gt;D: &lt;code&gt;Load:2.5,1.3,1.1&lt;/code&gt;表示系统的负载压力在逐渐变小&lt;/p&gt;
&lt;p&gt;23：关于排序算法的以下说法，错误的是：&lt;/p&gt;
&lt;p&gt;A: 快速排序的平均时间复杂度O(nlogn),最坏O(N^2)&lt;/p&gt;
&lt;p&gt;B:堆排序平均时间复杂度O(nlogn)，最坏O(nlogn)&lt;/p&gt;
&lt;p&gt;C:冒泡排序平均时间复杂度O(n^2),最坏O(n^2)&lt;/p&gt;
&lt;p&gt;D:归并排序的平均时间复杂度O(nlogn),最坏O(n^2)&lt;/p&gt;
&lt;p&gt;24:假设函数rand_k会随机返回一个【1，k】之间的随机数（k&amp;gt;=2）,并且每个证书出现的概率相等。目前有rand_7,通过调用rand_7（）和四则运算符，并适当增加逻辑判断和循环控制逻辑，下列函数可以实现的有：&lt;/p&gt;
&lt;p&gt;A:rand_3 B:rand_21  C:rand_23  D:rand_49&lt;/p&gt;
&lt;p&gt;第三部份&lt;/p&gt;
&lt;p&gt;1、两个较长的单向链表a和b，为了找出及诶单noed满足&lt;code&gt;node in a&lt;/code&gt;并且&lt;code&gt;node in b&lt;/code&gt;，请设计空间使用尽量小的算法（用&lt;code&gt;c/c++，java&lt;/code&gt; 或者伪代码）&lt;/p&gt;
&lt;p&gt;2、当存储数据量超出单节点数据管理能力的时候，可以采用的办法有数据库&lt;code&gt;sharding&lt;/code&gt;的解决方案，也就是按照一定的规律把数据分散存储在多个数据管理节点N中（节点编号为0,1,2，，，，N-1）。&lt;/p&gt;
&lt;p&gt;假设存储的数据时a  请完成为数据a计算存储节点的程序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define N 5&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

   &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;element&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;2654435761&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;shardingIndex&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;

    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="n"&gt;_________________________&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//这里是空格&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、宿舍内5个同学一起玩对战游戏。每场比赛有一些人作为红方，另一些人作为蓝方。请问至少需要多少场比赛，才能使任意两个人之间有一场红方对蓝方和蓝方对红方的比赛？&lt;/p&gt;
&lt;p&gt;4、一个有10亿条记录的文本文件，已按照关键字排好序存储。请设计算法，可以快速的从文件中查找指字关键字的记录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="阿里巴巴笔试题"></category></entry><entry><title>百度面经校招面经2014年软研面经</title><link href="http://www.yanyulin.info/pages/2014/03/baidu_3.html" rel="alternate"></link><updated>2014-03-14T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-14:pages/2014/03/baidu_3.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;面试部门商务搜索部&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;北邮人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;记得还是上星期的周五，百度面试官的一个电话让我的心开始激动起来&lt;/p&gt;
&lt;p&gt;这周二下午的面试。周一是最后一门期中考试，但是星期六天就匆匆的把数据结构，计算机网络和操作系统，包括自己最喜欢得数据库和海量数据处理都看了一遍，周一考完试就赶紧背起笔记本去教室看大规模站点的建设&lt;/p&gt;
&lt;p&gt;终于到了周二，下午座636到了上地，下车的时候刚好就看到百度的大厦。记得大一的时候来联想参观，远远的看见百度大厦。百度的logo那么熟悉，让我感觉好激动，心里就想，嗯，以后一定要去趟百度工作，&lt;/p&gt;
&lt;p&gt;面试是两点开始的。我1点半到的百度，在前台登记完后，看看时间还充裕，就去了百度中心的流水的小路一路观赏过去。觉得百度的办公环境还是很优雅的，感觉就像五星级的酒店。来回的人有些人在踢毽子有些人在打乒乓球。丝毫没有一丝紧张忙碌的气氛。沿路的美女给百度大厦增色不少。 &lt;/p&gt;
&lt;p&gt;刚走到半路，一个陌生的电话打来：原来是面试官下来接我了。我急忙赶回去。随着他上了百度五层过道上面一个临窗的休息室，很温馨的地方，他和我对着坐下，面试就开始了。 &lt;/p&gt;
&lt;p&gt;刚开始就是介绍项目。我把我做过的项目都一一作了陈述。面试官很认真的在听着。不时就项目赶兴趣的地方
提些问题。接下来就是出题。从最基础的计算，到链表的反转，到大规模数据处理，再到数据库和算法都一一考核了一遍。后面问到大文件求topN的时候，顺便提了下堆排序和快排，还有归并排序。面试官顺便让我写了下归并排序。 &lt;/p&gt;
&lt;p&gt;我顿时汗了，其他排序算法都提前默写过了，唯独归并漏了。我按照归并的思想只把其中的一部分写了出来。一面大概面了一个半小时。面试官说话的声音一直很小，表情也很僵。后面问我有什么问题要问的吗？我就问了如何快速接手项目之类的云云。又问了所面工作将来具体需要做的是什么工作。他详细的给我解答了，快结束时，问我需要喝水不，说给我倒杯水。我其实有些口渴，但是当时也没啥心情喝水。他让我等等，去叫二面的面试官过来 &lt;/p&gt;
&lt;p&gt;等了大概10分钟，2面的面试官端着电脑过来了。电脑开机有点卡，他连连说不好意思。我笑了笑，没事。感觉百度的面试官还是挺客气的。只是表情一样是那么僵硬，像个机器人。他就我第一个项目问了很多，包括其中具体的细节。后面又问了我一道智力题。我想了想，要了提示，结果还是不会。后面问了我一些数据库的东西。我最感兴趣的，包括索引的原理，数据库存储引擎的区别。我快速的答上来了。后面面试官问我考研吗？我说不考，直接工作，以后工作几年发现自己感兴趣的再考吧。他没说什么。中间你来我往又是各种问题的狂轰滥炸。前后又是一个多小时。我隐隐感觉喉咙好生难受。熬到4点多的时候，第二面终于结束了。我以为可以直接走了，他对我说了句：等一下，我去叫我的经理过来。于是又是一阵干等，旁边是百度的职员在那里热烈的讨论着海量数据的处理，旁边是一个年过40大概的人在那里码代码。我站在窗前，看楼下的风景。之前听去百度实习的同学说：二面过了基本上三面就是过下场，基本上可以进了。我安静的看着楼下的水一直往下流着，心里还是有些激动。 &lt;/p&gt;
&lt;p&gt;约莫过了10分钟，三面的面试官在二面面试官的陪同下走了过来。面试官一坐下，就先让我再一次进行自我介绍。我便又重复了第一面的自我介绍。这位面试官很喜欢笑，也比其他面试官眼睛多了好几分活力。还是那句话：你考研么？我把自己的话又重复了一遍，工作后再考。他便劝我：还是回去读个研吧，知道我为什么不问你面试题么？因为我知道你就不会。我没明白他的话的意思。有些发懵。他便说要不我们来出几道题考一下吧。就问基本的类型占据几个字节。当问到float和double类型时，我刚开始说是4个字节和8个字节，他说是么？一时模糊了，就说那就是&lt;code&gt;8&lt;/code&gt;个字节和16个字节，他说不对。（在此提醒各位去面试的同学，一定要注重基础啊！）他问我大学排名是多少？看你样子是翘过很多课了吧？我觉得他就是来打击我，看我承压能力的，还是很平静的告诉他我的大致情况。大多数课其实是有去上的，但是思修马哲倒是逃了很多。他说我基础不扎实，不信出几道研究生的题让你试试：例如virtual是怎么设计的，我说我有一年没有接触过c++了，我只熟悉java，他便让我写个程序去掉空格之类的，我用了subString（），他又问subString底层是怎么实现的。我只能坦言说不知道，但是给我设计我会按照index取相应范围的子串。他说我的基础真不行，还有好多要补的。你还是回去读个研，学几年再来吧 &lt;/p&gt;
&lt;p&gt;我不想毁了你，在他们部门都是研究生。本科生的发展前景比研究生慢多了。你进来也是做一些边缘的工作而已。我说：那我今天算是被刷了吗？他还是坚持让我去读研，看看时间，已经4点半了。面试也结束了，心里很难过。面试官说：我送你下楼吧。我和他并肩走着，不知不觉叹了口气，什么都不想说了，觉得自己好失败。&lt;/p&gt;
&lt;p&gt;不是等几天发来的拒信，而是第三面当面被刷了，像我这种当面被拒绝的貌似从来还没有听说过，也许是自己实在太弱让他们都觉得无法容忍了吧。辛苦了一个下午，和中午刚来的时候，心情简直一个天上一个地下。到一楼的前台，面试官很诚恳的对我说：你的素质还是高于一般本科生的，如果考完研想过来百度实习到时还可以联系他。好好回去补补基础。我没说什么，和他握了握手，说了声谢谢，回头去取了身份证，走出了百度的大厦。回去的路上，在西二旗走了很久很久，心理还是不住的难过。给在百度实习的好基友发了封短信，被刷了，他很吃惊，发了几封短信询问缘由。我说我还是太弱了，回去打好基础吧。 &lt;/p&gt;
&lt;p&gt;感觉最近很沮丧，表白被妹子怒拒，去了百度又被面试官怒拒。回来时迷路又饿着肚子走了一个多小时的路。一时觉得我挫爆了，但是面试官说得对，我确实太浮躁了，基础不好。还是安安心心的打好基础，读个研再出来吧。 &lt;/p&gt;
&lt;p&gt;敲下此篇，纪念我第一次处女面。在这里感谢百度的面试官，在我浮躁时给我泼了冷水。祝愿各位去百度面试的北邮同学都能顺利拿到&lt;code&gt;offer&lt;/code&gt;。百度，明年我还会再来的！给自己加油！
到此为止&lt;/p&gt;</summary><category term="百度面经"></category></entry><entry><title>腾讯校园招聘笔试题目2014年软件研发类武汉</title><link href="http://www.yanyulin.info/pages/2014/03/tencent_2014_B.html" rel="alternate"></link><updated>2014-03-14T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-14:pages/2014/03/tencent_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;考试时间120分钟&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一 不定项选择题(共25题，每题4分，共100分，少选、错选、多选均不得分)&lt;/p&gt;
&lt;p&gt;1 已知一棵二叉树，如果先序遍历的节点顺序是：ADCEFGHB，中序遍历是：CDFEGHAB，则后序遍历结果为：(D)&lt;/p&gt;
&lt;p&gt;A.CFHGEBDA &lt;/p&gt;
&lt;p&gt;B.CDFEGHBA &lt;/p&gt;
&lt;p&gt;C.FGHCDEBA&lt;/p&gt;
&lt;p&gt;D.CFHGEDBA&lt;/p&gt;
&lt;p&gt;2 下列哪两个数据结构，同时具有较高的查找和删除性能?(CD)&lt;/p&gt;
&lt;p&gt;A.有序数组 &lt;/p&gt;
&lt;p&gt;B.有序链表 &lt;/p&gt;
&lt;p&gt;C.AVL树 &lt;/p&gt;
&lt;p&gt;D.Hash表&lt;/p&gt;
&lt;p&gt;3 下列排序算法中，哪些时间复杂度不会超过nlogn?(BC)&lt;/p&gt;
&lt;p&gt;A.快速排序 &lt;/p&gt;
&lt;p&gt;B.堆排序 &lt;/p&gt;
&lt;p&gt;C.归并排序 &lt;/p&gt;
&lt;p&gt;D.冒泡排序
　　&lt;/p&gt;
&lt;p&gt;4 初始序列为1 8 6 2 5 4 7 3一组数采用堆排序，当建堆(小根堆)完毕时，堆所对应的二叉树中序遍历序列为：(A)&lt;/p&gt;
&lt;p&gt;A.8 3 2 5 1 6 4 7&lt;/p&gt;
&lt;p&gt;B.3 2 8 5 1 4 6 7&lt;/p&gt;
&lt;p&gt;C.3 8 2 5 1 6 7 4&lt;/p&gt;
&lt;p&gt;D.8 2 3 5 1 4 7 6&lt;/p&gt;
&lt;p&gt;5 当n=5时，下列函数的返回值是：(A)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
　　&lt;span class="p"&gt;{&lt;/span&gt;
　　&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
　　&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A.5 &lt;/p&gt;
&lt;p&gt;B.7&lt;/p&gt;
&lt;p&gt;C.8 &lt;/p&gt;
&lt;p&gt;D.10&lt;/p&gt;
&lt;p&gt;6 S市A，B共有两个区，人口比例为3：5，据历史统计A的犯罪率为0.01%，B区为0.015%，现有一起新案件发生在S市，那么案件发生在A区的可能性有多大?(C)&lt;/p&gt;
&lt;p&gt;A.37.5% &lt;/p&gt;
&lt;p&gt;B.32.5% &lt;/p&gt;
&lt;p&gt;C.28.6% &lt;/p&gt;
&lt;p&gt;D.26.1%&lt;/p&gt;
&lt;p&gt;7 Unix系统中，哪些可以用于进程间的通信?(BCD)
　　&lt;/p&gt;
&lt;p&gt;A.Socket &lt;/p&gt;
&lt;p&gt;B.共享内存 &lt;/p&gt;
&lt;p&gt;C.消息队列 &lt;/p&gt;
&lt;p&gt;D.信号量
　　&lt;/p&gt;
&lt;p&gt;8 静态变量通常存储在进程哪个区?(C)
　　&lt;/p&gt;
&lt;p&gt;A.栈区 &lt;/p&gt;
&lt;p&gt;B.堆区 &lt;/p&gt;
&lt;p&gt;C.全局区 &lt;/p&gt;
&lt;p&gt;D.代码区
　　&lt;/p&gt;
&lt;p&gt;9 查询性能(B)
　　&lt;/p&gt;
&lt;p&gt;A. 在Name字段上添加主键
　　&lt;/p&gt;
&lt;p&gt;B. 在Name字段上添加索引
　　&lt;/p&gt;
&lt;p&gt;C. 在Age字段上添加主键
　　&lt;/p&gt;
&lt;p&gt;D. 在Age字段上添加索引
　　&lt;/p&gt;
&lt;p&gt;10 IP地址131.153.12.71是一个(B)类IP地址。
　　&lt;/p&gt;
&lt;p&gt;A.A &lt;/p&gt;
&lt;p&gt;B.B &lt;/p&gt;
&lt;p&gt;C.C&lt;/p&gt;
&lt;p&gt;D.D
　　&lt;/p&gt;
&lt;p&gt;11 下推自动识别机的语言是：(C)
　　&lt;/p&gt;
&lt;p&gt;A. 0型语言 &lt;/p&gt;
&lt;p&gt;B.1型语言 &lt;/p&gt;
&lt;p&gt;C.2型语言 &lt;/p&gt;
&lt;p&gt;D.3型语言
　　&lt;/p&gt;
&lt;p&gt;12 下列程序的输出是：(D)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;　　&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;
　　&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
　　&lt;span class="p"&gt;{&lt;/span&gt;
　　&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
　　&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A.23 &lt;/p&gt;
&lt;p&gt;B.35 &lt;/p&gt;
&lt;p&gt;C.16 &lt;/p&gt;
&lt;p&gt;D.19
　　&lt;/p&gt;
&lt;p&gt;13 浏览器访问某页面，HTTP协议返回状态码为403时表示：(B)
　　&lt;/p&gt;
&lt;p&gt;A 找不到该页面
　　&lt;/p&gt;
&lt;p&gt;B 禁止访问
　　&lt;/p&gt;
&lt;p&gt;C 内部服务器访问
　　&lt;/p&gt;
&lt;p&gt;D 服务器繁忙
　　&lt;/p&gt;
&lt;p&gt;14 如果某系统15*4=112成立，则系统采用的是(A)进制。
　　&lt;/p&gt;
&lt;p&gt;A.6 &lt;/p&gt;
&lt;p&gt;B.7 &lt;/p&gt;
&lt;p&gt;C.8 &lt;/p&gt;
&lt;p&gt;D.9
　　&lt;/p&gt;
&lt;p&gt;15 某段文本中各个字母出现的频率分别是{a:4，b:3，o:12，h:7，i:10}，使用哈夫曼编码，则哪种是可能的编码：(A)
　　&lt;/p&gt;
&lt;p&gt;A a(000) b(001) h(01) i(10) o(11)
　　&lt;/p&gt;
&lt;p&gt;B a(0000) b(0001) h(001) o(01) i(1)
　　&lt;/p&gt;
&lt;p&gt;C a(000) b(001) h(01) i(10) o(00)
　　&lt;/p&gt;
&lt;p&gt;D a(0000) b(0001) h(001) o(000) i(1)
　　&lt;/p&gt;
&lt;p&gt;16 TCP和IP分别对应了OSI中的哪几层?(CD)
　　&lt;/p&gt;
&lt;p&gt;A Application layer
　　&lt;/p&gt;
&lt;p&gt;B Presentation layer
　　&lt;/p&gt;
&lt;p&gt;C Transport layer
　　&lt;/p&gt;
&lt;p&gt;D Network layer
　　&lt;/p&gt;
&lt;p&gt;17 一个栈的入栈序列是A,B,C,D,E，则栈的不可能的输出序列是?(C)
　　&lt;/p&gt;
&lt;p&gt;A.EDCBA &lt;/p&gt;
&lt;p&gt;B.DECBA &lt;/p&gt;
&lt;p&gt;C.DCEAB &lt;/p&gt;
&lt;p&gt;D.ABCDE
　　&lt;/p&gt;
&lt;p&gt;18 同一进程下的线程可以共享以下?(BD)
　　&lt;/p&gt;
&lt;p&gt;A. stack &lt;/p&gt;
&lt;p&gt;B.data section &lt;/p&gt;
&lt;p&gt;C.register set &lt;/p&gt;
&lt;p&gt;D.file fd
　　&lt;/p&gt;
&lt;p&gt;19 对于派生类的构造函数，在定义对象时构造函数的执行顺序为?(D)
　　&lt;/p&gt;
&lt;p&gt;1：成员对象的构造函数
　　&lt;/p&gt;
&lt;p&gt;2：基类的构造函数
　　&lt;/p&gt;
&lt;p&gt;3：派生类本身的构造函数
　　&lt;/p&gt;
&lt;p&gt;A.123&lt;/p&gt;
&lt;p&gt;B.231 &lt;/p&gt;
&lt;p&gt;C.321 &lt;/p&gt;
&lt;p&gt;D.213
　　&lt;/p&gt;
&lt;p&gt;20 如何减少换页错误?(BC)
　　&lt;/p&gt;
&lt;p&gt;A 进程倾向于占用CPU
　　&lt;/p&gt;
&lt;p&gt;B 访问局部性(locality of reference)满足进程要求
　　&lt;/p&gt;
&lt;p&gt;C 进程倾向于占用I/O
　　&lt;/p&gt;
&lt;p&gt;D 使用基于最短剩余时间(shortest remaining time)的调度机制
　　&lt;/p&gt;
&lt;p&gt;21 递归函数最终会结束，那么这个函数一定?(B)
　　&lt;/p&gt;
&lt;p&gt;A 使用了局部变量
　　&lt;/p&gt;
&lt;p&gt;B 有一个分支不调用自身
　　&lt;/p&gt;
&lt;p&gt;C 使用了全局变量或者使用了一个或多个参数
　　&lt;/p&gt;
&lt;p&gt;D 没有循环调用
　　&lt;/p&gt;
&lt;p&gt;22 编译过程中，语法分析器的任务是(B)
　　&lt;/p&gt;
&lt;p&gt;A分析单词是怎样构成的
　　&lt;/p&gt;
&lt;p&gt;B 分析单词串是如何构成语言和说明的
　　&lt;/p&gt;
&lt;p&gt;C 分析语句和说明是如何构成程序的
　　&lt;/p&gt;
&lt;p&gt;D 分析程序的结构
　　&lt;/p&gt;
&lt;p&gt;23 同步机制应该遵循哪些基本准则?(ABCD)
　　&lt;/p&gt;
&lt;p&gt;A.空闲让进 &lt;/p&gt;
&lt;p&gt;B.忙则等待 &lt;/p&gt;
&lt;p&gt;C.有限等待 &lt;/p&gt;
&lt;p&gt;D.让权等待
　　&lt;/p&gt;
&lt;p&gt;24 进程进入等待状态有哪几种方式?(D)
　　&lt;/p&gt;
&lt;p&gt;A CPU调度给优先级更高的线程
　　&lt;/p&gt;
&lt;p&gt;B 阻塞的线程获得资源或者信号
　　&lt;/p&gt;
&lt;p&gt;C 在时间片轮转的情况下，如果时间片到了
　　&lt;/p&gt;
&lt;p&gt;D 获得spinlock未果
　　&lt;/p&gt;
&lt;p&gt;25 设计模式中，属于结构型模式的有哪些?(BC)
　　&lt;/p&gt;
&lt;p&gt;A 状态模式 &lt;/p&gt;
&lt;p&gt;B 装饰模式 &lt;/p&gt;
&lt;p&gt;C 代理模式 &lt;/p&gt;
&lt;p&gt;D 观察者模式&lt;/p&gt;
&lt;p&gt;二、填空题(共4题10个空，每空2分，共20 分)&lt;/p&gt;
&lt;p&gt;1 设有字母序列{Q,D,F,X,A,P,N,B,Y,M,C,W}，请写出按二路归并方法对该序列进行一趟扫描后的结果为DQFXAPBNMYCW。
　　&lt;/p&gt;
&lt;p&gt;2 关键码序列(Q,H,C,Y,Q,A,M,S,R,D,F,X)，要按照关键码值递增的次序进行排序，若采用初始步长为4的Shell的排序法，则一趟扫描的结果是QACSQDFXRHMY;若采用以第一个元素为分界元素的快速排序法，则扫描一趟的结果是FHCDQAMQRSYX。
　　&lt;/p&gt;
&lt;p&gt;3 二进制地址为011011110000，大小为(4)10和(16)10块的伙伴地址分别为：&lt;code&gt;_________，_________&lt;/code&gt;。
　　&lt;/p&gt;
&lt;p&gt;4 设t是给定的一棵二叉树，下面的递归程序count(t)用于求得：二叉树t中具有非空的左、右两个儿子的结点个数N2;只有非空左儿子的个数NL;只有非空右儿子的结点个数NR和叶子结点个数N0。N2，NL,NR、N0都是全局量，且在调用count(t)之前都置为0。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
　　&lt;span class="p"&gt;{&lt;/span&gt;
　　&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lchild&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;rchild&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;NR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;N0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
　　&lt;span class="p"&gt;{&lt;/span&gt;
　　&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lchild&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
　　&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rchild&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;N2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;NL&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rchild&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;NR&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="n"&gt;N0&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
　　&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lchild&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;lchild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
　　&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rchild&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;rchild&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
　　&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="cm"&gt;/* call form :if(t!=NULL) count(t);*/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三、其他方向简答题(共2题，每题20分)，选作题，不计入总分)
　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1 请设计一个排队系统，能够让每个进入队伍的用户都能看到自己在队列中所处的位置和变化，队伍可能随时有人加入和退出;当有人退出影响到用户的位置排名时需要及时反馈到用户。
　　&lt;/p&gt;
&lt;p&gt;2 A，B两个整数集合，设计一个算法求他们的交集，尽可能的高效。&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="腾讯笔试题"></category></entry><entry><title>暴风影音笔试题校招笔试题2014年技术类</title><link href="http://www.yanyulin.info/pages/2014/03/baofeng_2014_B.html" rel="alternate"></link><updated>2014-03-13T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-13:pages/2014/03/baofeng_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人
暴风影音2014年A郑，据说可以解决&lt;code&gt;户口&lt;/code&gt;
注:以下如无特殊说明，均假设计算机编程环境为&lt;code&gt;intel x86&lt;/code&gt;的&lt;code&gt;32位CPU&lt;/code&gt;,编译器为VS,编程语言首选C语言，也可以使用自已熟悉的编程语言。&lt;/p&gt;
&lt;p&gt;1、1.升序排列下列数值：(101001)2,(40)10,(23)8,(18)16&lt;/p&gt;
&lt;p&gt;解：其中后面的2、10、8、16表示的是进制数&lt;/p&gt;
&lt;p&gt;2、写出下列函数的返回值&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;300&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;x = x&amp;amp;(x-1)&lt;/code&gt;的作用是将x(二进制表示)最右边的1消去，所以，程序的功能是求x的二进制表示法有多少个1.因为&lt;code&gt;300(10)=100101100(2)&lt;/code&gt;,所以返回值是4.&lt;/p&gt;
&lt;p&gt;3、写出下面代码的输出&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abcdef&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;123456&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;d%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;c%&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解：&lt;/p&gt;
&lt;p&gt;这道题出得十分YD,注意是d%而不是%d,所以，你懂的。答案是,一不小心，可能会跌爆眼镜！&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;d&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;
&lt;span class="n"&gt;c&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、使用C语言写出存储内容为整数的单链表数据类型定义，并使用自己定义的单链表数据类型定义，完成下面的算法，要求优化时间与空间复杂度。&lt;/p&gt;
&lt;p&gt;算法要求：合并两个已经排序的单链表为一个排序的单链表，相同内容只保留一个&lt;/p&gt;
&lt;p&gt;如：单链表a:1-&amp;gt;2-&amp;gt;3-&amp;gt;4&lt;/p&gt;
&lt;p&gt;单链表b:3-&amp;gt;4-&amp;gt;5&lt;/p&gt;
&lt;p&gt;输出：1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/p&gt;
&lt;p&gt;解：合并两个链表的方法其它同类型的面试题已经有讲过不少了，这里多了一个“去重”要求。只需要多处理一种情况即可。下面用的是C++，稍作改进就可以变成C.&lt;/p&gt;
&lt;p&gt;5、编写程序，把一个有序整数数组放到以整数为元素的二叉树中，生成一个平衡排序二叉树。设计并变成实现一种遍历方法，是这种遍历方法的输出正好是输入数据的次序。
如数组 a:{1,2,3,4,5,6,7}
生成的二叉树：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;        &lt;span class="mi"&gt;4&lt;/span&gt;

    &lt;span class="mi"&gt;2&lt;/span&gt;       &lt;span class="mi"&gt;6&lt;/span&gt;

 &lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="mi"&gt;3&lt;/span&gt;   &lt;span class="mi"&gt;5&lt;/span&gt;    &lt;span class="mi"&gt;7&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解：&lt;/p&gt;
&lt;p&gt;本来将一个有序数组放到一棵二叉树有很多种摆放方式，但是题目要求是平衡二叉树，容易想到的是二分思想，当每个结点左边和右边的结点数相等（或只相差1个的时候）这棵树就是平衡的，最后再中序输出即可。&lt;/p&gt;
&lt;p&gt;6、编写程序，在原字符串中把尾部m个字符移动到字符串的头部，要求：长度为n字符串操作时间复杂度为O(n),空间复杂度为O(1)。&lt;/p&gt;
&lt;p&gt;如：原字符串为&lt;code&gt;”Ilovebaofeng”&lt;/code&gt;，m=7，输出结果：&lt;code&gt;”baofengIlove”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;7、暴风影音的片源服务器上保存着两个文件a和b，各存放50亿条URL，每条URL占用64字节，内存限制是4G，让你找出a,b文件共同的URL。要求：算法设计。&lt;/p&gt;
&lt;p&gt;解：大数据问题。5*64=320G,4G内存无法一次性装入。因此可以用一个hash函数将a文件的URL hash到n个小文件中，对b文件的URL做同样的操作，因此，所有可能相同的URL都会被分到相同的小文件中。因为hash函数的特点是如果a=b,则hash(a)=hash(b).再对每一个小文件统计相同的URL即可，可以两次扫描，也可以用位图。&lt;/p&gt;</summary><category term="暴风笔试题"></category></entry><entry><title>大众点评笔试题校招笔试题2014年技术类</title><link href="http://www.yanyulin.info/pages/2014/03/dianping_2014_a.html" rel="alternate"></link><updated>2014-03-12T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-12:pages/2014/03/dianping_2014_a.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;大众点评此次笔试题选择的方式是在线笔试题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、团购&lt;code&gt;（Group purchase）&lt;/code&gt;就是团体购物，指认识或不认识的消费者联合起来，加大与商家的谈判能力，以求得最优价格的一种购物方式，大众点评团是中国领先的本地生活消费平台，致力于为消费者提供本地餐馆美食、电影、KTV、休闲娱乐、酒店旅游、美容保健、婚庆亲子、购物等生活服务信息。&lt;/p&gt;
&lt;p&gt;为了更好的服务消费者，点评推出了优惠券这项功能，并且也扩张到了非常多的商户。现在计划上线一个新的业务，在团购的基础上增加优惠券功能，更大幅度的让利消费者。&lt;/p&gt;
&lt;p&gt;现在需要实现这个功能，具体的业务需求描述如下(描述有点长，大家不用担心，题目不难)：团购的购物车里面的每一件商品为Product类，其中包含&lt;/p&gt;
&lt;p&gt;&lt;code&gt;id,name,description,price,category&lt;/code&gt;(类型，uuid类型),&lt;code&gt;count, totalPrice&lt;/code&gt; 等等&lt;/p&gt;
&lt;p&gt;现在需要增加 优惠劵的功能，当用户添加完所有的商品后，有一个地方可以输入优惠劵&lt;code&gt;code&lt;/code&gt;，当用户应用优惠劵后，购物车将自动列出优惠后的价格，包括跟使用之前的价格对比。&lt;/p&gt;
&lt;p&gt;注意事项&lt;/p&gt;
&lt;p&gt;a. 当前优惠劵只有一种，就是满&lt;code&gt;200减20&lt;/code&gt;，上不封顶，例如&lt;code&gt;满400减40&lt;/code&gt;，&lt;code&gt;满600减60&lt;/code&gt;...未满200的不优惠&lt;/p&gt;
&lt;p&gt;b. 优惠劵不能叠加多次使用，比如团购总价为240，使用优惠劵后变为220，不能继续再使用该优惠劵，优惠劵类自定。属性自定。&lt;/p&gt;
&lt;p&gt;后期优惠劵功能可能扩充，比如(后期功能可不实现，但是要提供思路和方法)&lt;/p&gt;
&lt;p&gt;c1. 针对&lt;code&gt;Product&lt;/code&gt;的&lt;code&gt;category&lt;/code&gt;，比如食物，书籍，衣服，电子产品等等，该优惠劵会针对于该类型的Product，不会应用到别的category的产品&lt;/p&gt;
&lt;p&gt;c2. 打折券，不仅仅是限制于满200减20，而是可以打折，每一个优惠劵可以有不同的折率&lt;/p&gt;
&lt;p&gt;d). 优惠劵不能叠加使用，比如不能使用两个不同的优惠劵。但是当用户多次输入不同的优惠劵后，我们必须给用户提供更划算的优惠劵方案。&lt;/p&gt;
&lt;p&gt;根据以上的业务需求，完成功能实现（编写相应的代码和测试代码，语言不限，可以用伪代码表示。不需要考虑界面问题）。&lt;/p&gt;
&lt;p&gt;答案：在&lt;code&gt;大话设计模式&lt;/code&gt;中寻找答案。这应该是策略模式的应用&lt;/p&gt;
&lt;p&gt;2、十六进制序列&lt;/p&gt;
&lt;p&gt;描述：有一个十六进制序列由S1S2…Sk组成，其中Sk由1到k的十六进制数字依次组成。给定一个位置i，返回第i个位置上的字符。数字i为32位int&lt;/p&gt;
&lt;p&gt;例如，S1S2…Sk的前200个字符为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;112123123412345123456123456712345678123456789123456789&lt;/span&gt;&lt;span class="n"&gt;A123456789AB123456789ABC1234567&lt;/span&gt;

&lt;span class="mi"&gt;89&lt;/span&gt;&lt;span class="n"&gt;ABCD123456789ABCDE123456789ABCDEF123456789ABCDEF10123456789ABCDEF1011123456789ABCDE&lt;/span&gt;

&lt;span class="n"&gt;F101112123456789ABCDEF10111213&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;所以&lt;code&gt;i=50&lt;/code&gt;时，字符为5，i=100时，字符为&lt;code&gt;9&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要求时间复杂度小于&lt;code&gt;O(n)&lt;/code&gt;，空间复杂度&lt;code&gt;O(1)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、uptime命令的输出中有&lt;code&gt;load average: 0.24, 0.30, 0.24&lt;/code&gt;，请&lt;/p&gt;
&lt;p&gt;(1)解释这里load的数值的含义；&lt;/p&gt;
&lt;p&gt;(2)说明该数值多大时表示系统负载很高；&lt;/p&gt;
&lt;p&gt;(3)当系统负载高时，如何找出是什么因素导致负载高的。&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、系统在过去的1分钟、5分钟和15分钟内的平均负载。&lt;/p&gt;
&lt;p&gt;2、当该数值达到CPU的总颗数，说明满负载。&lt;/p&gt;
&lt;p&gt;3、可能是有大的计算任务，死循环任务，大量磁盘IO操作等&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="大众点评笔试题"></category></entry><entry><title>人人网笔试题校招笔试题2014年技术类</title><link href="http://www.yanyulin.info/pages/2014/03/renren_2014_B.html" rel="alternate"></link><updated>2014-03-12T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-12:pages/2014/03/renren_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;技术类笔试题&lt;/p&gt;
&lt;p&gt;1、小明有一台星际应急电视机，在危难时可以用来发莫尔斯信号，这台应急电视机总共只有10个单位的能量，发嘀需要1个单位的能量，发嗒需要3个单位的能量，电视机开启会把一次把所有的能量用完，请问它最多能发多少种信号?&lt;/p&gt;
&lt;p&gt;A 18&lt;/p&gt;
&lt;p&gt;B 19&lt;/p&gt;
&lt;p&gt;C 28&lt;/p&gt;
&lt;p&gt;D 89&lt;/p&gt;
&lt;p&gt;2、产生系统死锁的原因可能是A．进程释放资源B．一个进程进入死循环C．多个进程竞争，资源出现了循环等？&lt;/p&gt;
&lt;p&gt;A．进程释放资源&lt;/p&gt;
&lt;p&gt;B．一个进程进入死循环&lt;/p&gt;
&lt;p&gt;C．多个进程竞争，资源出现了循环等待&lt;/p&gt;
&lt;p&gt;D．多个进程竞争共享型设备&lt;/p&gt;
&lt;p&gt;3、堆排序中建堆和调整堆的时间复杂度分别是多少？&lt;/p&gt;
&lt;p&gt;A log2n nlog2n&lt;/p&gt;
&lt;p&gt;B nlog2n nlog2n&lt;/p&gt;
&lt;p&gt;C log2n log2n&lt;/p&gt;
&lt;p&gt;D nlog2n log2n&lt;/p&gt;
&lt;p&gt;4、2013年的2013次方最后一次是多少？&lt;/p&gt;
&lt;p&gt;A 1&lt;/p&gt;
&lt;p&gt;B 3&lt;/p&gt;
&lt;p&gt;C 7&lt;/p&gt;
&lt;p&gt;D 9&lt;/p&gt;
&lt;p&gt;5、C程序中，两个函数在以下四个选项中，仅有一个不同，其中哪个不同时，会出现编译出错？&lt;/p&gt;
&lt;p&gt;A 返回值类型&lt;/p&gt;
&lt;p&gt;B 参数个数&lt;/p&gt;
&lt;p&gt;C 函数名称&lt;/p&gt;
&lt;p&gt;D 参数类型&lt;/p&gt;
&lt;p&gt;6、以下协议中，哪个在TCP/IP分层模型中和其他三个不一样&lt;/p&gt;
&lt;p&gt;A FTP&lt;/p&gt;
&lt;p&gt;B NFS&lt;/p&gt;
&lt;p&gt;C SNMP&lt;/p&gt;
&lt;p&gt;D ICMP&lt;/p&gt;
&lt;p&gt;7、以下排序算法中，哪个算法是稳定的？&lt;/p&gt;
&lt;p&gt;A 插入排序&lt;/p&gt;
&lt;p&gt;B 选择排序&lt;/p&gt;
&lt;p&gt;C 快速排序&lt;/p&gt;
&lt;p&gt;D 堆排序&lt;/p&gt;
&lt;p&gt;8、以下程序，去掉哪行注释后，不加优化选项编译出来的可执行程序文件大小最大？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;//int a[2046];//A&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="c1"&gt;//static int a[2013]={2014};//B&lt;/span&gt;
    &lt;span class="c1"&gt;//int *a=(int *)malloc(2046*sizeof(int));//C&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="c1"&gt;//int a[2013]={2014};//D&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A A所在行&lt;/p&gt;
&lt;p&gt;B B所在行&lt;/p&gt;
&lt;p&gt;C C所在行&lt;/p&gt;
&lt;p&gt;D D所在行&lt;/p&gt;
&lt;p&gt;9、人人网每周一晚上的游泳活动，某次活动有30个人参加（假如泳池只有人人的员工，大家在20：00点前都到了，20：30后才有人离开），第一个离开的员工穿错了拖鞋，而后面离开的员工都不会认错自已的拖鞋，但如果发现自已的拖鞋不在了，会随便穿走剩下的拖鞋中的一双，那么，最后一个离开的员工，穿到自已的拖鞋的概率是?&lt;/p&gt;
&lt;p&gt;A 1/2&lt;/p&gt;
&lt;p&gt;B 1/30&lt;/p&gt;
&lt;p&gt;C 1/29&lt;/p&gt;
&lt;p&gt;D 不确定&lt;/p&gt;
&lt;p&gt;10、下列哪种设计模式的作用是动态地给一个对象添加一些额外的职责？&lt;/p&gt;
&lt;p&gt;A Adapter&lt;/p&gt;
&lt;p&gt;B Bridge&lt;/p&gt;
&lt;p&gt;C Composite&lt;/p&gt;
&lt;p&gt;D Decorator&lt;/p&gt;
&lt;p&gt;二：主观题&lt;/p&gt;
&lt;p&gt;1、有一个熊孩子想生成一个1~n的随机排列，他想了个很弱的方法，首先开一个长度为n的数组，开始数组初始为空，每次他随机一个1~n的数，如果这个数没有数组里的话，就把它加入数组，否则数组元素不变，一直重复这个过程，直到数组里有n个数，问期望随机多少次才能达到目标&lt;/p&gt;
&lt;p&gt;2、请以非递归的方式实现快速排序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;quicksort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;arr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、有1个string,长度为len,由26个小写字符组成，每个字母出现的次数为偶数，现在要把string分成两段，0~pos,和pos+1~len-1,划分的原因是：优先保证两边a的个数之差(取绝对值最小）,然后是b,再次是c,依次类推&lt;/p&gt;
&lt;p&gt;例如aabb pos值是0 abba pos值是1&lt;/p&gt;
&lt;p&gt;a、请证明解是唯一的&lt;/p&gt;
&lt;p&gt;b、请编写代码求出pos值&lt;/p&gt;</summary><category term="人人网笔试题"></category></entry><entry><title>锐捷网络面经校招面经2014年软件面经</title><link href="http://www.yanyulin.info/pages/2014/03/ruijie_2014_1.html" rel="alternate"></link><updated>2014-03-12T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-12:pages/2014/03/ruijie_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;锐捷网络&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;锐捷网络&lt;/code&gt;，是中国网络解决方案领导品牌，作为一家民族企业，锐捷网络坚持走自主研发的道路，在竞争激烈的网络设备市场开辟出独树一帜的创新大道。以锐捷网络代表的厂商，不仅为中国用户争取了更低的建网和用网成本，更有效保障了网络安全和可控性...&lt;/p&gt;
&lt;p&gt;我想大家最早知道锐捷网络，就是以前在学校上网时，进行连网操作时，就是需要一串用户名与密码的认证，而这个认证软件就是由锐捷网络制作的，那时候好流行呀，现在的锐捷网络还行吧，待遇属于中上等的水平，主要做的就是网络安全方面的...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，面试感觉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试官会首先问：&lt;/p&gt;
&lt;p&gt;有福州和和都两个地方，你愿意去哪工作？&lt;/p&gt;
&lt;p&gt;总共有两面，一面是技术面，二面就是&lt;code&gt;HR&lt;/code&gt;面&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一面时&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;问项目&lt;/p&gt;
&lt;p&gt;只问项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以在求职的过程中，项目是相当重要的，至少你要能将你做的东西表达出来，而且让别人相信这个项目确实是你做的，哪怕不是你做的，你也一定要说的让别人没错的这个项目确实是你做的，这也是一种能力的象征，我就遇到这么一个人，明明没做什么项目，但能把别人做的项目说成自已的，而且又能让人信服...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;二面&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与HR谈offer&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;锐捷网络待遇水平&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;今年统一价，&lt;/p&gt;
&lt;p&gt;所有岗位：&lt;code&gt;10K*12&lt;/code&gt;（硕士），这个待遇还行吧，高于地区的平均房价，就意味着可以买得起房子，亲，你说呢，我觉的这个待遇是可以，比北上广要好&lt;/p&gt;
&lt;p&gt;不算年终奖，在福州&lt;/p&gt;</summary><category term="锐捷面经"></category></entry><entry><title>金山校园招聘笔试题2013年实习生技术类</title><link href="http://www.yanyulin.info/pages/2014/03/wps_2014_a.html" rel="alternate"></link><updated>2014-03-12T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-12:pages/2014/03/wps_2014_a.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;自我判断题（请选择最符合您本人意愿的一项）&lt;/p&gt;
&lt;p&gt;1、你觉得你的能力特点是?&lt;/p&gt;
&lt;p&gt;a. 注重团队交流&lt;/p&gt;
&lt;p&gt;b. 注重细节、追求完美&lt;/p&gt;
&lt;p&gt;c. 擅长钻研&lt;/p&gt;
&lt;p&gt;d. 重视知识积累&lt;/p&gt;
&lt;p&gt;e. 做事仔细，思维慎密&lt;/p&gt;
&lt;p&gt;2、你觉得你的思维特点&lt;/p&gt;
&lt;p&gt;a. 创造力&lt;/p&gt;
&lt;p&gt;b. 想象力&lt;/p&gt;
&lt;p&gt;c. 把握复杂问题&lt;/p&gt;
&lt;p&gt;d. 洞察细节&lt;/p&gt;
&lt;p&gt;3、你最喜欢的做事方式&lt;/p&gt;
&lt;p&gt;a. 用妥当的方式处理问题&lt;/p&gt;
&lt;p&gt;b. 用快速的方式处理问题&lt;/p&gt;
&lt;p&gt;c. 用直观的方式处理问题&lt;/p&gt;
&lt;p&gt;4、对你的合作伙伴你最不能接受的缺点是?&lt;/p&gt;
&lt;p&gt;a. 浮夸&lt;/p&gt;
&lt;p&gt;b. 粗心大意&lt;/p&gt;
&lt;p&gt;c. 墨守成规&lt;/p&gt;
&lt;p&gt;d. 不求上进&lt;/p&gt;
&lt;p&gt;选择题（单项选择）&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;int x = 18 / 7 * 3&lt;/code&gt;,x变量的数值为?&lt;/p&gt;
&lt;p&gt;a. 6        &lt;/p&gt;
&lt;p&gt;b. 7       &lt;/p&gt;
&lt;p&gt;c. 8        &lt;/p&gt;
&lt;p&gt;d. 9&lt;/p&gt;
&lt;p&gt;2、c++是否是大小写敏感的：&lt;/p&gt;
&lt;p&gt;a. 是       &lt;/p&gt;
&lt;p&gt;b. 不是&lt;/p&gt;
&lt;p&gt;3、以下程序的输出结果是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;a. 0    &lt;/p&gt;
&lt;p&gt;b. "0"     &lt;/p&gt;
&lt;p&gt;c. 48&lt;/p&gt;
&lt;p&gt;4、以下哪个不是c++关键字&lt;/p&gt;
&lt;p&gt;a. class    &lt;/p&gt;
&lt;p&gt;b. int     &lt;/p&gt;
&lt;p&gt;c. struct     &lt;/p&gt;
&lt;p&gt;d. printf&lt;/p&gt;
&lt;p&gt;5、int * p = new int[10];和上述语句匹配的释放语句是?&lt;/p&gt;
&lt;p&gt;a. free(p)        &lt;/p&gt;
&lt;p&gt;b. delete p;         &lt;/p&gt;
&lt;p&gt;c. delete [] p;        &lt;/p&gt;
&lt;p&gt;d. delete p [];&lt;/p&gt;
&lt;p&gt;6、int * p = new int;以下那行语句是合法的?&lt;/p&gt;
&lt;p&gt;a. *p = 3;    &lt;/p&gt;
&lt;p&gt;b. p = *3;     &lt;/p&gt;
&lt;p&gt;c. &amp;amp;p = 3;     &lt;/p&gt;
&lt;p&gt;d. p = &amp;3;&lt;/p&gt;
&lt;p&gt;7、const int x = 0x20;printf("%d", x);以上代码片段的输出是?&lt;/p&gt;
&lt;p&gt;a. 20        &lt;/p&gt;
&lt;p&gt;b. %d          &lt;/p&gt;
&lt;p&gt;c. 32&lt;/p&gt;
&lt;p&gt;8、char x[] = "hello",sizeof(x)的结果为&lt;/p&gt;
&lt;p&gt;a. 4    &lt;/p&gt;
&lt;p&gt;b. 5    &lt;/p&gt;
&lt;p&gt;c. 6&lt;/p&gt;
&lt;p&gt;9、printf("5432" + 1);上述代码的输出结果是?&lt;/p&gt;
&lt;p&gt;a. 432        &lt;/p&gt;
&lt;p&gt;b. 5433       &lt;/p&gt;
&lt;p&gt;c. 54321       &lt;/p&gt;
&lt;p&gt;d. 编译不通过&lt;/p&gt;
&lt;p&gt;10、std::vector&lt;T&gt; x;x.resize(10);sizeof(x)的结果为?&lt;/p&gt;
&lt;p&gt;a. 0       &lt;/p&gt;
&lt;p&gt;b. 4       &lt;/p&gt;
&lt;p&gt;c. 10       &lt;/p&gt;
&lt;p&gt;d. 不确定&lt;/p&gt;
&lt;p&gt;综合题&lt;/p&gt;
&lt;p&gt;1、请实现这么一个函数：传入一个int值，在屏幕输出类似LED显示屏效果的字母拼图，例如：
输入&lt;code&gt;1234567890&lt;/code&gt;，输出：&lt;/p&gt;
&lt;p&gt;提示：请注意每个字符的固定宽度和高度，两个数字间保留一个空格&lt;/p&gt;
&lt;p&gt;函数签名：&lt;code&gt;void LEDprint(int num);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、请编写一段代码测试以下函数执行的正确性：&lt;code&gt;void unique(std::vector&amp;lt;int&amp;gt; &amp;amp; v)&lt;/code&gt;;这个函数的职责是去除传入数组中的重复元素。&lt;/p&gt;
&lt;p&gt;提示1：函数返回结果不一定是依照某种顺序的；&lt;/p&gt;
&lt;p&gt;提示2：请尽可能多的考虑各种可能出现bug的情况组合；&lt;/p&gt;
&lt;p&gt;提示3：你编写的代码应当返回一个int值，返回0表示测试通过，返回1表示出现错误。&lt;/p&gt;
&lt;p&gt;3、实现如下函数：&lt;code&gt;void printInChinese(int num);&lt;/code&gt;这个函数输入一个小于100000000（一亿）的正整数，并在屏幕上打印这个数字的中文写法。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;p&gt;17 -&amp;gt; 一十七&lt;/p&gt;
&lt;p&gt;120 -&amp;gt; 一百二十&lt;/p&gt;
&lt;p&gt;201 -&amp;gt; 二百零一&lt;/p&gt;
&lt;p&gt;1074 -&amp;gt; 一千零七十四&lt;/p&gt;
&lt;p&gt;65536 -&amp;gt; 六万五千五百三十六&lt;/p&gt;
&lt;p&gt;1010101 -&amp;gt; 一百零一万零一百零一&lt;/p&gt;
&lt;p&gt;提示：请注意‘零’的处理。&lt;/p&gt;
&lt;p&gt;扩展：如果需要处理通用简化习惯，你将怎么处理，例如：&lt;/p&gt;
&lt;p&gt;17 -&amp;gt; 十七&lt;/p&gt;
&lt;p&gt;120 -&amp;gt; 一百二&lt;/p&gt;
&lt;p&gt;//对于特殊情况的考虑 需要考虑在十位和十万位开头 且为1的情况。&lt;/p&gt;
&lt;p&gt;末尾的情况稍微复杂点 可以考虑先将所有要输出的数据缓存，然后根据末尾0的情况适当输出。&lt;/p&gt;
&lt;p&gt;已知完全弹性碰撞公式如下：&lt;/p&gt;
&lt;p&gt;其中m1 m2为小球质量，v1 v2为原始速度，v1' v2'是碰撞后的速度。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="kt"&gt;ball_t&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;m&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 质量&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;v&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 速度，速度为正表示球体往x轴正方向运动&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// 在x坐标轴的位置&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请实现以下函数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;progress&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;ball_t&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;ball_t&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="n"&gt;b2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;leftWall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;rightWall&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个函数输入两个球的当前状况（包括质量，速度，在x轴的位置），以及左右墙壁的位置，输出两个球在t秒钟后的状况（包括质量，速度，在x轴的位置）。&lt;/p&gt;
&lt;p&gt;特殊说明：球体碰撞墙面也是完全弹性碰撞，即球体速度变为原本的负数。&lt;/p&gt;
&lt;p&gt;4、一个工程由如下文件组成：&lt;code&gt;head1.h head2.h src1.cpp src2.cpp main.cpp&lt;/code&gt;,最终编译结果为&lt;code&gt;xxx.exe&lt;/code&gt;（或者xxx，如果在linux下的话）,请写出你熟悉的某种编译器将这5个文件转换为最终结果xxx.exe（或xxx）的详细过程。写出每一个步骤，并作相关的解释，如果你熟悉某编译器的话，请写出这个编译器每一步用到的命令行。&lt;/p&gt;
&lt;p&gt;先将head1.h和src1.cpp文件生成1.o文件,将head2.h和src2.cpp文件生成2.o文件,再将main.cpp文件生成main.o文件,最后将这些.o文件生成xxx.exe&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;  &lt;span class="n"&gt;head1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;src1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;  &lt;span class="n"&gt;head2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt; &lt;span class="n"&gt;src2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cpp&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="n"&gt;xxx&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;exe&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt; &lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="n"&gt;o&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="金山笔试题"></category></entry><entry><title>奇虎360校园招聘笔试题2014年研发类技术类</title><link href="http://www.yanyulin.info/pages/2014/03/360_2014_a.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/360_2014_a.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、有5名同学争夺3项比赛的冠军，若每项只设1名冠军，则获得冠军的可能情况的种数是?&lt;/p&gt;
&lt;p&gt;A 120种&lt;/p&gt;
&lt;p&gt;B 130种&lt;/p&gt;
&lt;p&gt;C 60种&lt;/p&gt;
&lt;p&gt;D 125种&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这是一个允许有重复元素的排列问题，分三步完成：&lt;/p&gt;
&lt;p&gt;第一步，获得第1项冠军，有5种可能情况；&lt;/p&gt;
&lt;p&gt;第二步，获得第2项冠军，有5种可能情况；&lt;/p&gt;
&lt;p&gt;第三步，获得第3项冠军，有5种可能情况；&lt;/p&gt;
&lt;p&gt;由乘法原理，获得冠军的可能情况的种数是：5&lt;em&gt;5&lt;/em&gt;5=125&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、一个强盗横行的小镇，那里的男人在一周的1、2、3骗人，女人在4、5、6骗人，他们在别的时候都说真话，有一个旅游的人误入那个小镇，他想知道今天星期几。于是他问当地一个男人，得到的回答是“昨天是我撒谎的日子”；他又问一个女人，女人也说“昨天是我撒谎的日子”。请问今天是星期几？&lt;/p&gt;
&lt;p&gt;A. 星期二    B. 星期三    C.星期四     D.星期五&lt;/p&gt;
&lt;p&gt;3、公司采购的下午茶饮料赶上商店做促销，部分瓶盖中印有再来一瓶的中奖信息，现假设中奖率为&lt;code&gt;1/3&lt;/code&gt;，且有奖的瓶盖是均匀分布的。如果要给100人准备饮料，则最少要买多少瓶？&lt;/p&gt;
&lt;p&gt;A 100  &lt;/p&gt;
&lt;p&gt;B 67 &lt;/p&gt;
&lt;p&gt;C 68  &lt;/p&gt;
&lt;p&gt;D 69&lt;/p&gt;
&lt;p&gt;4、某旅馆内住着不同职业、不同国籍的&lt;code&gt;A、B、C、D&lt;/code&gt;四个人，他们来自英、法、德、美四个国家，现已知德国人是医生，美国人年龄最小且是警察，C比德国人年纪大，B是法官且是英国人的朋友，D从未学过医,由此可知，C是&lt;/p&gt;
&lt;p&gt;A 英国人   B 法国人  C 美国人   D 不确定。&lt;/p&gt;
&lt;p&gt;5、一个数据库中现有A、B、C、D、E、F六个语句，但目前这个数据库是不协调的，必须删除某些语句才能恢复数据库的协调性。已知：如果保留语句A，那么必须保留语句B和语句C；如果保留语句E，则必须同时删除语句D和语句C；只有保留语句E，才能保留语句F；语句A是重要信息，不能删除,如果以上4条为真，则以下哪项一定为真？&lt;/p&gt;
&lt;p&gt;A 保留语句E并且删除语句C                           &lt;/p&gt;
&lt;p&gt;B 同时保留语句C和语句D                  &lt;/p&gt;
&lt;p&gt;C保留语句E并且删除语句D                &lt;/p&gt;
&lt;p&gt;D 同时删除语句E和语句F&lt;/p&gt;
&lt;p&gt;6、请选择最合适的数字答案来填充此序列 &lt;code&gt;1  4  5  6  7  9  11&lt;/code&gt;？&lt;/p&gt;
&lt;p&gt;A 8   &lt;/p&gt;
&lt;p&gt;B 12    &lt;/p&gt;
&lt;p&gt;C 15    &lt;/p&gt;
&lt;p&gt;D 100
　　&lt;/p&gt;
&lt;p&gt;7、某班有一位同学做了好事没有留下姓名，他是甲乙丙丁四个人中的一个。当老师问他们时，他们分别这样说：甲：这件好事不是我做得。乙：这件好事是丁做的。丙：这件好事是乙做的。丁：这件好事不是我做的。这四人中只有一人说了真话，请你推出是谁做了好事？&lt;/p&gt;
&lt;p&gt;A 甲               &lt;/p&gt;
&lt;p&gt;B 乙               &lt;/p&gt;
&lt;p&gt;C 丙                &lt;/p&gt;
&lt;p&gt;D 丁&lt;/p&gt;
&lt;p&gt;8、话说有十二个鸡蛋，有一个是坏的（重量与其余鸡蛋不同），请问用天平最少称几次，才能称出哪个鸡蛋是坏的？&lt;/p&gt;
&lt;p&gt;A 1次           &lt;/p&gt;
&lt;p&gt;B 2次        &lt;/p&gt;
&lt;p&gt;C 3次          &lt;/p&gt;
&lt;p&gt;D 4次&lt;/p&gt;
&lt;p&gt;9、实验室有8瓶饮料，已知其中有且仅有一瓶有毒。小白鼠喝了有毒的饮料后，将会在24小时后毒发身亡。实验室的小李需要在24小时后知道有毒的饮料是哪瓶，他可以使用小白鼠试喝饮料，请问：小李最少需要用几只小白鼠试喝饮料？&lt;/p&gt;
&lt;p&gt;A 2           &lt;/p&gt;
&lt;p&gt;B 3        &lt;/p&gt;
&lt;p&gt;C 4          &lt;/p&gt;
&lt;p&gt;D 5&lt;/p&gt;
&lt;p&gt;10、在一个综艺电视节目中，节目组提供了三个箱子ABC供嘉宾抽奖，其中只有一个箱子有礼物，其余两个箱子为空。嘉宾不知道礼物放在哪个箱子中，主持人则是知道的。当嘉宾随机选择一个箱子A后，主持人打开了B箱子，B箱子是空的，主持人问嘉宾是否换C箱子，问题：如果你是嘉宾，你会换C箱子吗？&lt;/p&gt;
&lt;p&gt;A 不换，A和C箱子有礼物的概率都是&lt;code&gt;0.5&lt;/code&gt;，没有必要       &lt;/p&gt;
&lt;p&gt;B 换，A箱子有礼物的概率是&lt;code&gt;1/4&lt;/code&gt;，C箱子有礼物的概率是&lt;code&gt;3/4&lt;/code&gt;       &lt;/p&gt;
&lt;p&gt;C 不换，A和C箱子有礼物的概率都是&lt;code&gt;1/3&lt;/code&gt;，没有必要       &lt;/p&gt;
&lt;p&gt;D 换，A箱子有礼物的概率是&lt;code&gt;1/3&lt;/code&gt;，C箱子有礼物的概率是&lt;code&gt;2/3&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;11、CPU通用寄存器的长度是由&lt;code&gt;（ ）&lt;/code&gt;决定的&lt;/p&gt;
&lt;p&gt;A 指令长度          &lt;/p&gt;
&lt;p&gt;B CPU功能        &lt;/p&gt;
&lt;p&gt;C 机器字长          &lt;/p&gt;
&lt;p&gt;D 存储容量&lt;/p&gt;
&lt;p&gt;12、机器字长64位，1位符号，63位尾数，用定点表示，则最大的正整数为&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;+（2^63-1）&lt;/code&gt;         &lt;/p&gt;
&lt;p&gt;B &lt;code&gt;+（2^64-1）&lt;/code&gt;           &lt;/p&gt;
&lt;p&gt;C  &lt;code&gt;+（2^63+1）&lt;/code&gt;            &lt;/p&gt;
&lt;p&gt;D  &lt;code&gt;+（2^64+1）&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;13、RISC访内指令中，操作数的物理地址一般安排在&lt;code&gt;（）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;A 栈顶           &lt;/p&gt;
&lt;p&gt;B 两个主存单元       &lt;/p&gt;
&lt;p&gt;C 两个通用寄存器          &lt;/p&gt;
&lt;p&gt;D 一个主存单元和一个通用寄存器&lt;/p&gt;
&lt;p&gt;14、在机器数中，&lt;code&gt;（ ）&lt;/code&gt;的0的表示形式唯一&lt;/p&gt;
&lt;p&gt;A 原码           &lt;/p&gt;
&lt;p&gt;B 补码        &lt;/p&gt;
&lt;p&gt;C 反码          &lt;/p&gt;
&lt;p&gt;D 原码和反码&lt;/p&gt;
&lt;p&gt;15、为使虚存系统有效的发挥其预期的作用，所运行的程序应具有的特性是：&lt;/p&gt;
&lt;p&gt;A 该程序不应含有过多的I/O操作           &lt;/p&gt;
&lt;p&gt;B 该程序大小不应超过实际的内存容量        &lt;/p&gt;
&lt;p&gt;C 该程序的指令相关不应过多          &lt;/p&gt;
&lt;p&gt;D 该程序应当具有较好的局部性&lt;/p&gt;
&lt;p&gt;18、表达式a*(-b+c)的后缀表达式是？&lt;/p&gt;
&lt;p&gt;A ab-+c*&lt;/p&gt;
&lt;p&gt;B abc-+*&lt;/p&gt;
&lt;p&gt;C a*b-c+&lt;/p&gt;
&lt;p&gt;D ab-c+*&lt;/p&gt;
&lt;p&gt;21、定义int * const ptr,下面哪种说法是正确的？&lt;/p&gt;
&lt;p&gt;A ptr不可修改，*ptr不可修改&lt;/p&gt;
&lt;p&gt;B ptr不可修改，*ptr可修改&lt;/p&gt;
&lt;p&gt;C ptr可修改，*ptr可修改&lt;/p&gt;
&lt;p&gt;D ptr可修改，*ptr不可修改&lt;/p&gt;
&lt;p&gt;22、C++中关于堆栈的说法，哪个是错误的?&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/360_2014_a.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/360_2014_4.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/360_2014_a.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/360_2014_3.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;32 使用malloc系统调用分配的内存是在()上？&lt;/p&gt;
&lt;p&gt;A 栈&lt;/p&gt;
&lt;p&gt;B BSS&lt;/p&gt;
&lt;p&gt;C 物理内存&lt;/p&gt;
&lt;p&gt;D 堆 &lt;/p&gt;
&lt;p&gt;33 主进程调用fork产生子进程，以下哪类资源是子进程无法继承的?&lt;/p&gt;
&lt;p&gt;A 锁&lt;/p&gt;
&lt;p&gt;B 打开的文件&lt;/p&gt;
&lt;p&gt;C 进程组IDD&lt;/p&gt;
&lt;p&gt;D 控制终端&lt;/p&gt;
&lt;p&gt;34、请判断下面一段程序共创建几个进程？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A 1&lt;/p&gt;
&lt;p&gt;B 2&lt;/p&gt;
&lt;p&gt;C 3&lt;/p&gt;
&lt;p&gt;D 4&lt;/p&gt;
&lt;p&gt;35、一进程刚获得3个主存块的使用权，若该进程访问页面的次序为&lt;code&gt;1321215123&lt;/code&gt;，当采用先进先出调度算法时，产生的缺页次数为&lt;/p&gt;
&lt;p&gt;A 2&lt;/p&gt;
&lt;p&gt;B 3&lt;/p&gt;
&lt;p&gt;C 4&lt;/p&gt;
&lt;p&gt;D 5&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/360_2014_a.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/360_2014_2.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;40、用二分查找查找一个长度为10，排好序的线性表，查找不成功时，需要比较的次数为?&lt;/p&gt;
&lt;p&gt;A 5&lt;/p&gt;
&lt;p&gt;B 2&lt;/p&gt;
&lt;p&gt;C 4&lt;/p&gt;
&lt;p&gt;C 1&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/360_2014_a.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/360_2014_1.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;主观题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;传教士野人过河问题&lt;/p&gt;
&lt;p&gt;在河的岸有M个传教士，C个野人，1条船，M&amp;gt;=C，传教士想把所有人运过河去，但受下面条件限制&lt;/p&gt;
&lt;p&gt;1、传教士与野人均能划船，但船上只能载两个人&lt;/p&gt;
&lt;p&gt;2、两边岸上的野人人数不能超过传教士人数，否则么野人就会把传教士吃掉&lt;/p&gt;
&lt;p&gt;3、假定野人总是服从安排，设编程实现一个安全的方法将人全部运过去&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="360笔试题"></category></entry><entry><title>宇龙酷派校园招聘面经2014年软件面经</title><link href="http://www.yanyulin.info/pages/2014/03/coolpad_2014_1.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/coolpad_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;宇龙酷派&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宇龙酷派&lt;/strong&gt;创立于&lt;code&gt;1993年4月&lt;/code&gt;，系中国无线科技有限公司（香港主板上市公司，股票代码2369）的全资附属子公司，是中国专业的智能手机终端、移动数据平台系统、增值业务运营一体化解决方案提供商，专注于以智能手机为核心的无线数据一体化解决方案，并致力发展成为全球无线数据一体化终端的领导者...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，面试感觉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;地点：纽宾凯鲁广国际酒店&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;项目&lt;/p&gt;
&lt;p&gt;1、linux查看cpu、内存命令&lt;/p&gt;
&lt;p&gt;2、谈谈你的长处和短处&lt;/p&gt;
&lt;p&gt;3、谈谈你的项目，以及项目中你学到了什么&lt;/p&gt;
&lt;p&gt;4、性格优点、缺点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、你了解宇龙酷派这个公司吗？（面试前一定要了解公司的动态）&lt;/p&gt;
&lt;p&gt;2、自我介绍一下&lt;/p&gt;
&lt;p&gt;3、程序员的核心素质是什么？大概是效率吧&lt;/p&gt;
&lt;p&gt;4、对移动互联网软件开发有兴趣没？&lt;/p&gt;
&lt;p&gt;5、其他的随便聊&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="酷派面经"></category></entry><entry><title>宇龙酷派校园招聘笔试题2014年技术类笔试题南昌</title><link href="http://www.yanyulin.info/pages/2014/03/coolpad_2014_A.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/coolpad_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;宇龙酷派&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;宇龙酷派&lt;/strong&gt;创立于&lt;code&gt;1993年4月&lt;/code&gt;，系中国无线科技有限公司（香港主板上市公司，股票代码2369）的全资附属子公司，是中国专业的智能手机终端、移动数据平台系统、增值业务运营一体化解决方案提供商，专注于以智能手机为核心的无线数据一体化解决方案，并致力发展成为全球无线数据一体化终端的领导者...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;笔试题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;五道题目&lt;/strong&gt;,都是很简单的&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C/C++&lt;/code&gt;软件开发的试题，五道程序题，总分100分&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;printf&lt;/code&gt;打印输出9*9乘法表（25分）  &lt;/p&gt;
&lt;p&gt;2、求出数组的倒置，函数原型为&lt;code&gt;char * reverse( char * str)&lt;/code&gt; (25分)  &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;实质就是字符串反转问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、详细描述C++中&lt;code&gt;static&lt;/code&gt;的作用（20）  &lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下两题只完成一题即可&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;4、写出在两个线程间传递数据的函数，包括创建，调用，销毁。不能使用&lt;code&gt;queue，list&lt;/code&gt; (30分)  &lt;/p&gt;
&lt;p&gt;5、一个员工要到几个城市去调研，已经知道各个城市间的路程（路费），写出走完所有城市路程最小的算法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分支限界求旅行商问题&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="酷派笔试题"></category></entry><entry><title>美团网校园招聘笔试题2014年研发类长沙</title><link href="http://www.yanyulin.info/pages/2014/03/meituan_2014_C.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/meituan_2014_C.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、有ABCD四个人要在夜里过一座桥，他们通过这座桥分别需要耗时1、2、5、10分钟，现在只有一支手电，过桥时必须带有手电，并且同时最多只能两个人一起过桥。请问如何安排能够让四个人尽快都过桥。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;分析：由于A耗时最短，所以每次都安排A和另外一个人一起过桥，回来的时候A一个人回来。至于其他三个人的顺序，可以是任意的，这样总的时间是2+1+5+1+10=19.&lt;/p&gt;
&lt;p&gt;1、1和2先过去，时间为2&lt;/p&gt;
&lt;p&gt;2、1回来，时间为1 &lt;/p&gt;
&lt;p&gt;3、5和10过去，时间为10 &lt;/p&gt;
&lt;p&gt;4、2回来，时间为2 &lt;/p&gt;
&lt;p&gt;5、1和2再次回来，时间为2，完成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以总时间为：&lt;code&gt;2+1+10+2+2=17&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、25匹马赛跑，每次只能跑5匹马，最快能赛几次找出跑得最快的3匹马?赛跑不能计时，并假设每匹马的速度是恒定不变的。请给出答案并描述比赛过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;详细解释见： &lt;a href="http://blog.csdn.net/wanglongfei_hust/article/details/9797457" target="_blank"&gt;赛马问题&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、在有团购之前，大家都是现场买门票的，这个你懂的，公园的门票是5元;某天售票处开门时没有准备零钱。假设一天来购票的依次有2N个人，其中有N个人有5元零钱，其它N个人只有10元面值的钱;假设每人只买一张票。请问任何人都不必为找零而等待的概率是多少?&lt;/p&gt;
&lt;p&gt;4、有一个函数"int f(int n)"，请编写一段程序测试函数f(n)是否总数返回0，并添加必要的注视和说明。&lt;/p&gt;
&lt;p&gt;5、用你熟悉的语言编写程序用两个栈(Stack)模拟队列(Quene)的先进先出操作，仅实现add、remove方法即可。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;清新啊描述思路;2)编写完整代码实现，编程语言不限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;详细解释见： &lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;剑指offer&lt;/a&gt;面试题7&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用两个栈实现队列&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nb"&gt;Queue&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;~&lt;/span&gt;&lt;span class="nb"&gt;Queue&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nb"&gt;T&lt;/span&gt; &lt;span class="nb"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;s2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nb"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;const&lt;/span&gt; &lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;s1.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;template&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nb"&gt;T&lt;/span&gt; &lt;span class="nb"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;T&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nl"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s2.size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s1.size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nb"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;s1.top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
            &lt;span class="nx"&gt;s2.push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="nx"&gt;s1.pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;s2.size&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nb"&gt;throw&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;exception&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;empty queue&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;T&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;s2.top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;s2.pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;Queue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;char&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;q.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;q.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;B&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;q.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;C&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;q.remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;q.remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;q.remove&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、编写函数，获取两端字符串的最长公共子串的长度，例如：
　　
    S1=GCCCTAGCCAGDE
    S2=GCGCCAGTGDE
　　&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这两个序列的最长公共子串GCCAG，也就是说返回值5。&lt;/p&gt;
&lt;p&gt;清闲描述思路;2)编写完整代码实现，编程语言不限。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;7、(iOS开发选做)实现多线程都有哪几种方法?&lt;/p&gt;
&lt;p&gt;8、(Android开发选做)关于Activity的生命周期，下拉statusbar时，桌面Activity会触发哪几个生命周期?系统关机时，弹出关机Dialog之后，此时，桌面Activity会触发哪几个生命周期?&lt;/p&gt;
&lt;p&gt;9、(前端开放选做)请使用HTML和CSS完成如下布局：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/meituan_2014_C.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/meituan0.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;10、(系统运维选做)有主机A，B，C通过&lt;code&gt;eth0&lt;/code&gt;和同一个交换机相连，A的IP地址为&lt;code&gt;192.168.1.2&lt;/code&gt;，子网掩码&lt;code&gt;255.255.255.0&lt;/code&gt;，B的IP地址为&lt;code&gt;192.168.2.2&lt;/code&gt;，子网掩码&lt;code&gt;255.255.255.0&lt;/code&gt;，C的IP地址为&lt;code&gt;192.168.4.2&lt;/code&gt;，子网掩码255.255.255.0。现希望A和B能够通信，A和C、B和C不能通信。
　　
假设能更改A和B的子网掩码，要如何设置A和B的子网掩码?&lt;/p&gt;
&lt;p&gt;如果不能更改子网掩码，需要在A和B做什么设置?&lt;/p&gt;
&lt;p&gt;A和B通信时，C是否能够通过&lt;code&gt;sniffer&lt;/code&gt;截获A和B通信的报文，如果只能截获一部分报文，是哪一类报文?&lt;/p&gt;
&lt;p&gt;C可以仅通过&lt;code&gt;sniffer&lt;/code&gt;得知A和B的IP地址和MAC地址吗?如果能，如何获得?&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="美团网笔试题"></category></entry><entry><title>腾讯校园招聘笔试题目2014年软件研发类武汉</title><link href="http://www.yanyulin.info/pages/2014/03/tencent_2014_A.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/tencent_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、有100W个关键字，长度小于等于50字节。用高效的算法找出top10的热词，并对内存的占用不超过1MB？&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、先把100W个关键字hash映射到小文件，根据题意，&lt;code&gt;100W*50B = 50*10^6B = 50M&lt;/code&gt;，而内存只有1M，故干脆搞一个hash函数 &lt;code&gt;% 50&lt;/code&gt;，分解成50个小文件&lt;/p&gt;
&lt;p&gt;2、针对对每个小文件依次运用&lt;code&gt;hashmap(key，value)&lt;/code&gt;完成每个key的value次数统计，后用堆找出每个小文件中value次数最大的&lt;code&gt;top 10&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;3、最后依次对每两小文件的top 10归并，得到最终的&lt;code&gt;top 10&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、求二叉树的任意两个节点的最近公共祖先？&lt;/p&gt;
&lt;p&gt;解析：递归解法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、如果两个节点分别在根节点的左子树和右子树，则返回根节点&lt;/p&gt;
&lt;p&gt;2、如果两个节点都在左子树，则递归处理左子树；如果两个节点都在右子树，则递归处理右子树&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;pNode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;found&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;found&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;GetLastCommonParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pNode1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                                     &lt;span class="n"&gt;BinaryTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;pNode2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GetLastCommonParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FindNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode2&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;GetLastCommonParent&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pRoot&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pNode2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="腾讯笔试题"></category></entry><entry><title>迅雷校园招聘笔试题2014年技术类笔试题武汉</title><link href="http://www.yanyulin.info/pages/2014/03/xunlei_2014_A.html" rel="alternate"></link><updated>2014-03-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-11:pages/2014/03/xunlei_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;转载时请赋上原文链接，谢谢&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、现有某个堆栈S,按顺序ABCD进栈，则出栈序列中不可能存在的是&lt;/p&gt;
&lt;p&gt;A DCBA        &lt;/p&gt;
&lt;p&gt;B BACD        &lt;/p&gt;
&lt;p&gt;&lt;code&gt;C CABD&lt;/code&gt;   &lt;/p&gt;
&lt;p&gt;D BADC&lt;/p&gt;
&lt;p&gt;2、下列排序方法中,最坏情况下比较次数最少的是&lt;/p&gt;
&lt;p&gt;A 冒泡排序 &lt;/p&gt;
&lt;p&gt;B 简单选择排序  &lt;/p&gt;
&lt;p&gt;C 直接插入排序 &lt;/p&gt;
&lt;p&gt;D 堆排序&lt;/p&gt;
&lt;p&gt;3、已知数组arr的定义如下：int arr[5]={1，2，3，4，5}；下列语句中，输出结果不是2的是&lt;/p&gt;
&lt;p&gt;A、cout＜＜*arr+1＜＜endl&lt;/p&gt;
&lt;p&gt;B、cout＜＜*(arr+1)＜＜endl；&lt;/p&gt;
&lt;p&gt;C、cout＜＜arr[1]＜＜endl；&lt;/p&gt;
&lt;p&gt;D、eout＜＜%arr＜＜endl；&lt;/p&gt;
&lt;p&gt;4、下列叙述中正确的是（　　）&lt;/p&gt;
&lt;p&gt;A、一个算法的空间复杂度大，则其时间复杂度也必定大&lt;/p&gt;
&lt;p&gt;B、一个算法的空间复杂度大，则其时间复杂度必定小&lt;/p&gt;
&lt;p&gt;C、一个算法的时间复杂度大，则其空间复杂度必定小&lt;/p&gt;
&lt;p&gt;D、以上三种说法都不对&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个算法的好坏-般用时间复杂度和空间复杂度这两个指标来衡量。-般一个算法的时间复杂度和空间复杂度越小，这个算法就越好。若某算法用时最少、占用空间最小，我们就称此算法为最佳算法。比如二分(折半)查找算法在数学上就可以证明是最佳查找算法。一个算法的时间复杂度和空间复杂度之间没有必然的联系，也就是说一个算法的时间复杂度小，它的空间复杂度不-定也小，反之依然。因此本题的正确答案是D&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、已知二叉树后序遍历序列是dabec，中序遍历序列是debac，它的前序遍历序列是？&lt;/p&gt;
&lt;p&gt;A acbed&lt;/p&gt;
&lt;p&gt;B decab&lt;/p&gt;
&lt;p&gt;C deabc&lt;/p&gt;
&lt;p&gt;D &lt;code&gt;cedba&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;6、链表不具有的特点是（&lt;code&gt;B&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;A、 不必事先估计存储空间&lt;/p&gt;
&lt;p&gt;B、 可随机访问任一元素&lt;/p&gt;
&lt;p&gt;C、 插入删除不需要移动元素&lt;/p&gt;
&lt;p&gt;D、 所需空间与线性表长度成正比&lt;/p&gt;
&lt;p&gt;7、C++语言类体系中，不能被派生类继承的有（ ）&lt;/p&gt;
&lt;p&gt;A、 转换函数&lt;/p&gt;
&lt;p&gt;B、&lt;code&gt;构造函数&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;C、虚函数&lt;/p&gt;
&lt;p&gt;D、静态成员函数&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;派生类对象的数据结构是由基类中说明的数据成员和派生类中说 明的数据成员共同构成，所以不能继承基类的构造函数，必须重新定义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;8、对于类定义  &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;   
&lt;span class="nl"&gt;public:&lt;/span&gt;　　　　　　　　 
    &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;　　　　　　　　 
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;     
&lt;span class="p"&gt;};&lt;/span&gt;     
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;     
&lt;span class="nl"&gt;public:&lt;/span&gt;　　　　　　　　 
    &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;class B func 1&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;　　　　　　　　 
    &lt;span class="n"&gt;virtua1&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;func2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;class B func 2&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="err"&gt;＜&lt;/span&gt; &lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;　　 
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、 A: :func2( ) 和B: :func1( ) 都是虚函数
B、 A: :func2( ) 和B: :func1( ) 都不是虚函数
C、&lt;code&gt;B: :func1( ) 是虚函数，而A: :func2( ) 不是虚函数&lt;/code&gt;
D、 B: :func1( ) 不是虚函数，而A: :func2( ) 是虚函数    &lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基类中说明的虚函数，在派生类中自然就是虚函数，所以类B中func1( ) 是虚函数;而类A中的func2没有被关键字virtual修饰，所以不是虚函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;9、下面关于运算符重载的描述错误的是（ ）&lt;/p&gt;
&lt;p&gt;A、 运算符重载不能改变操作数的个数、运算符的优先级、运算符的结合性和运算符的语法结构&lt;/p&gt;
&lt;p&gt;B、 不是所有的运算符都可以进行重载&lt;/p&gt;
&lt;p&gt;C、 &lt;code&gt;运算符函数的调用必须使用关键字operator&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;D、 在C++语言中不可通过运算符重载创造出新的运算符&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;例如“: :”运算符就不能被重载；通过重载可以创造新的运算方 式，但是不能臆造新的运算符；定义的时候必须使用关键字operator，而调用时可直接使 用运算符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;10、函数fun的返回值是?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 　　　　
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt; 　　　　
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt; 　　　　
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]){&lt;/span&gt;
        &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
        &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
        &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; 　　　　
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt; 　　
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、 j=i；&lt;/p&gt;
&lt;p&gt;B、 j=(long)i;&lt;/p&gt;
&lt;p&gt;C、 i=(int)j；&lt;/p&gt;
&lt;p&gt;D、 &lt;code&gt;i=j；&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解析：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;++，--运算符不能用于常量表达式&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;11、下列关于模板的说法正确的是&lt;/p&gt;
&lt;p&gt;A. 模板的实参在任何时候都可以省略&lt;/p&gt;
&lt;p&gt;B. 类模板与模板类所指的是同一概念&lt;/p&gt;
&lt;p&gt;C. 类模板的参数必须是虚拟类型的&lt;/p&gt;
&lt;p&gt;D.&lt;code&gt;类模板中的成员函数全部都是模板函数&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解析 在C++中规定如果一个类被声明为类模板，那么其中的所有成员函数就都成为了模板函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;12、下列程序的输出结果是?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ABC&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;xyz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;strcat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A xyzabcABC   &lt;/p&gt;
&lt;p&gt;B zabcABC  &lt;/p&gt;
&lt;p&gt;C xyabcABC   &lt;/p&gt;
&lt;p&gt;D yzabcABC&lt;/p&gt;
&lt;p&gt;13、函数&lt;code&gt;int test(int a，int b=1，int c=0)&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;下列调用不合法的个数是，test(0)；　test(0，0)；　test( )；　test(0，0，0)；&lt;/p&gt;
&lt;p&gt;A. 0&lt;/p&gt;
&lt;p&gt;B. 1&lt;/p&gt;
&lt;p&gt;C. &lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;D. 3&lt;/p&gt;
&lt;p&gt;14、有如下程序：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;iostream．h&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;usingnamespacestd&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="n"&gt;classBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;
    &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BB&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="err"&gt;（）；&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;voidf&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;BF&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="n"&gt;classDerived&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;&lt;span class="n"&gt;publicBase&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;public&lt;/span&gt;&lt;span class="err"&gt;：&lt;/span&gt;  
    &lt;span class="n"&gt;Derived&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;DD&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;voidf&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;eout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Df&amp;quot;&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="n"&gt;intmain&lt;/span&gt;&lt;span class="err"&gt;（）&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Derived&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="err"&gt;；&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行上面的程序将输出&lt;/p&gt;
&lt;p&gt;A. BBBfDD&lt;/p&gt;
&lt;p&gt;B. BBDfDDDf&lt;/p&gt;
&lt;p&gt;C. DD&lt;/p&gt;
&lt;p&gt;D. DDBBBf&lt;/p&gt;
&lt;p&gt;15、设有定义：float a=2,b=4,h=3; 以下C语言表达式与代数式计算结果不相符的是？&lt;/p&gt;
&lt;p&gt;A (a+b)*h/2   &lt;/p&gt;
&lt;p&gt;B (1/2)&lt;em&gt;(a+b)&lt;/em&gt;h&lt;/p&gt;
&lt;p&gt;C (a+b)&lt;em&gt;h&lt;/em&gt;1/2  &lt;/p&gt;
&lt;p&gt;D h/2*(a+b)&lt;/p&gt;
&lt;p&gt;16、下列条件语句中，功能与其他语句不同的是&lt;/p&gt;
&lt;p&gt;A）if(a) printf("%d\n",x); else printf("%d\n",y);&lt;/p&gt;
&lt;p&gt;B) if(a==0) printf("%d\n",y); else printf("%d\n",x);&lt;/p&gt;
&lt;p&gt;C) if(a!=0) printf("%d\n",x); else printf("%d\n",y);&lt;/p&gt;
&lt;p&gt;D) if(a==0) printf("%d\n",x); else printf("%d\n",y);&lt;/p&gt;
&lt;p&gt;17、以下能对二维数组a进行正确初始化的语句是&lt;/p&gt;
&lt;p&gt;A、int a[2][]={{1,0,1},{5,2,3}};  &lt;/p&gt;
&lt;p&gt;B、int a[][3]={{1,2,3},{4,5,6}};
　　&lt;/p&gt;
&lt;p&gt;C、int a[2][4]={1,2,3},{4,5}{6}};  &lt;/p&gt;
&lt;p&gt;D、int a[][3]={{1,0,1}{},{1,1}};&lt;/p&gt;
&lt;p&gt;18、下列哪一种不是STL容器类型&lt;/p&gt;
&lt;p&gt;A vector&lt;/p&gt;
&lt;p&gt;B set&lt;/p&gt;
&lt;p&gt;C multivector&lt;/p&gt;
&lt;p&gt;D multiset&lt;/p&gt;
&lt;p&gt;19、修饰函数时所使用的 const 和 virtual 关键字, 下面哪个说法是正确的 &lt;/p&gt;
&lt;p&gt;A const 和 virtual 可以同时修饰成员函数 &lt;/p&gt;
&lt;p&gt;B const 和 virtual 可以单独修饰成员函数, 但不能同时修饰成员函数 &lt;/p&gt;
&lt;p&gt;C const 和 virtual 可以同时修饰静态函数 &lt;/p&gt;
&lt;p&gt;D const 和 virtual 可以单独修饰静态函数, 但不能同时修饰静态函数&lt;/p&gt;
&lt;p&gt;20、以下程序的输出结果为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;*&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A 1&lt;/p&gt;
&lt;p&gt;B 2&lt;/p&gt;
&lt;p&gt;C 3&lt;/p&gt;
&lt;p&gt;D 未初始内存，无法确定&lt;/p&gt;
&lt;p&gt;二、多选题&lt;/p&gt;
&lt;p&gt;1、以下对于模板函数和宏相比的优势分析正确的是&lt;/p&gt;
&lt;p&gt;A传入用户自定义类型时，宏不能工作&lt;/p&gt;
&lt;p&gt;B宏展开时不进行参数校验&lt;/p&gt;
&lt;p&gt;C由于预处理进行了宏展开，而不是编译器，所以构建过程耗时较长&lt;/p&gt;
&lt;p&gt;D宏展开在运行时会造成负担&lt;/p&gt;
&lt;p&gt;E在调试时进入(step into)模板函数时方便一些&lt;/p&gt;
&lt;p&gt;2、如果一个C++类没有构造函数，编译器会生成一个，以下对于产生的函数在调用时行为描述正确的是?&lt;/p&gt;
&lt;p&gt;A该函数构造了对象，参数是一个对象的引用&lt;/p&gt;
&lt;p&gt;B该函数默认什么都不做&lt;/p&gt;
&lt;p&gt;C该函数在传入参数和新对象之间进行了内存拷贝&lt;/p&gt;
&lt;p&gt;D该函数标识对象是由拷贝构造函数构造的&lt;/p&gt;
&lt;p&gt;E该函数调用了这个类的赋值函数&lt;/p&gt;
&lt;p&gt;3、以下哪些项在用C++实现一个多态函数时是必须的？&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/xunlei_2014_A.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/xunlei_2014_1.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、vector:iterator重载了下列哪些运算符？&lt;/p&gt;
&lt;p&gt;A、++                    &lt;/p&gt;
&lt;p&gt;B、&amp;gt;&amp;gt;                       &lt;/p&gt;
&lt;p&gt;C、*（前置）                   &lt;/p&gt;
&lt;p&gt;D、==&lt;/p&gt;
&lt;p&gt;5、以下关于类的静态成员描述正确的是?&lt;/p&gt;
&lt;p&gt;A 类的静态数据成员必须通过类的静态函数访问&lt;/p&gt;
&lt;p&gt;B 类的静态数据成员在产生第一个类对象的时候构造 &lt;/p&gt;
&lt;p&gt;C 类的静态函数不是虚函数&lt;/p&gt;
&lt;p&gt;D 类的静态函数可以被继承&lt;/p&gt;
&lt;p&gt;E 类的静态函数可以直接访问类对旬的数据成员&lt;/p&gt;
&lt;p&gt;6、在一个单链接结构中，指针p指向链表的倒数第二个结点，指针s指向新结点，则能将s所指的结点插入到链表尾的语句组是?&lt;/p&gt;
&lt;p&gt;A p=p-&amp;gt;next;s-&amp;gt;next=p;p-&amp;gt;next=s&lt;/p&gt;
&lt;p&gt;B p=(&lt;em&gt;p).next;(&lt;/em&gt;s).next=(&lt;em&gt;p).next;(&lt;/em&gt;p).next=s&lt;/p&gt;
&lt;p&gt;C s-&amp;gt;next=NULL;p=p-&amp;gt;next;p-&amp;gt;next=s&lt;/p&gt;
&lt;p&gt;D p=p-&amp;gt;next;s-&amp;gt;next=p-&amp;gt;next;p-&amp;gt;next=s&lt;/p&gt;
&lt;p&gt;7、下列进程状态的转换中，不可能的是？&lt;/p&gt;
&lt;p&gt;A 、运行态-&amp;gt;就绪态&lt;/p&gt;
&lt;p&gt;B 、运行态-&amp;gt;等待态&lt;/p&gt;
&lt;p&gt;C、 等待态-&amp;gt;就绪态&lt;/p&gt;
&lt;p&gt;D、 等待态-&amp;gt;运行态&lt;/p&gt;
&lt;p&gt;E、 就绪态-&amp;gt;等待态 &lt;/p&gt;
&lt;p&gt;8、引入多进程设计的主要目的是?&lt;/p&gt;
&lt;p&gt;A 提高实时响应速度&lt;/p&gt;
&lt;p&gt;B 充分利用处理器&lt;/p&gt;
&lt;p&gt;C 有利于代码共享&lt;/p&gt;
&lt;p&gt;D 充分利用外围设备&lt;/p&gt;
&lt;p&gt;E 减少存储器碎片&lt;/p&gt;
&lt;p&gt;9、下列选项中不属于SQL语言定义功能的命令是()&lt;/p&gt;
&lt;p&gt;A CREATE&lt;/p&gt;
&lt;p&gt;B REVOKE&lt;/p&gt;
&lt;p&gt;C DELETE&lt;/p&gt;
&lt;p&gt;D DROP&lt;/p&gt;
&lt;p&gt;10、下列关于索引描述正确的是()&lt;/p&gt;
&lt;p&gt;A、索引可以加快数据检索速度&lt;/p&gt;
&lt;p&gt;B 使用ORDER  BY和GROUP BY子句进行查询时，可以显著减少分组和排序时间&lt;/p&gt;
&lt;p&gt;C 当对表中的数据进行增加、删除和修改操作时，使用索引可以加快数据的维护速度&lt;/p&gt;
&lt;p&gt;D 一个基本表可以创建多个非聚集索引&lt;/p&gt;
&lt;p&gt;三、填空题&lt;/p&gt;
&lt;p&gt;1.以下函数将带有头结点的单链表逆序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;pointer&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;h&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、A,B为升序的带头结点的单链表，将B合并到A中。&lt;/p&gt;
&lt;p&gt;链表:A-&amp;gt;1-&amp;gt;2-&amp;gt;3;链表:B-&amp;gt;3-&amp;gt;4-&amp;gt;5;合并A和B，并把B中重复的结点释放。&lt;/p&gt;
&lt;p&gt;结果：A-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;node&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;linknode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;union&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;link&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;;(&lt;/span&gt;  &lt;span class="p"&gt;);(&lt;/span&gt;  &lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;q&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、删除字符串中的数字字符。&lt;/p&gt;
&lt;p&gt;例如：输入字符串：48CTYP9E6,则输出:CTYPE&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;  &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、统计字符串substr在字符串str中出现的次数&lt;/p&gt;
&lt;p&gt;例如：若字符串为&lt;code&gt;aaaslkaaas&lt;/code&gt;，子字符串为&lt;code&gt;as&lt;/code&gt;，&lt;code&gt;则应输出2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;若字符串为&lt;code&gt;'asasasa'&lt;/code&gt;子字符串为asa,则就输出3.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;substr&lt;/span&gt;&lt;span class="p"&gt;[(&lt;/span&gt; &lt;span class="p"&gt;)]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;   
      &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;num&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;四、主观题&lt;/p&gt;
&lt;p&gt;1、输入一个已经按升序排序过的数组和一个数字，在数组中查找两个数，使得它们的和正好是输入的那个数字,要求时间复杂度是O(n)。如果有多对数字的和等于输入的数字，输出任意一对即可。例如输入数组1、2、4、7、11、15和数字15。由于4+11=15，因此输出4和11。&lt;/p&gt;
&lt;p&gt;2、输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。要求不能创建任何新的结点，只调整指针的指向。&lt;/p&gt;
&lt;p&gt;比如将二元查找树&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/xunlei_2014_A.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/xunlei_2014_2.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;转换成双向链表&lt;/p&gt;
&lt;p&gt;4=6=8=10=12=14=16&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;BSTreeNode&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;m_nValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;BSTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;BSTreeNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;right&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="迅雷笔试题"></category></entry><entry><title>阿里巴巴校招面经2014年软件研发面经</title><link href="http://www.yanyulin.info/pages/2014/03/ali_4.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/ali_4.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;最近招聘好多，发个面试经历刻不容缓&lt;/p&gt;
&lt;p&gt;闲话我会写少一点，减少小伙伴们阅读的时间&lt;/p&gt;
&lt;p&gt;先祝小伙伴们旗开得胜&lt;/p&gt;
&lt;p&gt;星期一晚上收到通知，预约到星期二早上面试，选了10点，最早的一轮，研发工程师&lt;/p&gt;
&lt;p&gt;面试官很和蔼，握手，笑容，虐了你也笑。面试官叫做冥志&lt;/p&gt;
&lt;p&gt;自我介绍&lt;/p&gt;
&lt;p&gt;1、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;cal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;   &lt;span class="c1"&gt;//给定一个无符号整型，求十进制上出每一位数字的和&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、&lt;/p&gt;
&lt;p&gt;给定1~100整数，确定的1~100，即1、2、3、。。。100&lt;/p&gt;
&lt;p&gt;3、&lt;/p&gt;
&lt;p&gt;有1个缺了怎么办？  //扫一遍求和减去sum，水题&lt;/p&gt;
&lt;p&gt;4、&lt;/p&gt;
&lt;p&gt;继续问，缺2个呢，想了一下，说，其实这题我看过，不过实在是忘记了...没办法，排序吧  &lt;/p&gt;
&lt;p&gt;5、&lt;/p&gt;
&lt;p&gt;给一叠52张牌，其中10张向上，42张向下，现在你在一个黑麻麻的屋子里，让你把这一堆牌分成两堆（没要求数量一样），要求两堆牌中向上的牌的数量一样。&lt;/p&gt;
&lt;p&gt;一看就是无解题，想了很久说不会，面试官说没事，这个需要跳跃性思维&lt;/p&gt;
&lt;p&gt;6、&lt;/p&gt;
&lt;p&gt;一下位运算的操作：一个数字，化成二进制，交换奇偶位置。&lt;/p&gt;
&lt;p&gt;我写了个o(log)，问我怎么优化。&lt;/p&gt;
&lt;p&gt;我说log那个量可以写成常量。&lt;/p&gt;
&lt;p&gt;最后写成了o(1)的。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x55555555&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0x55555555&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;一个数字*7，怎么写比较快&lt;/p&gt;
&lt;p&gt;一开始傻逼了，后来改正了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7、&lt;/p&gt;
&lt;p&gt;进程和线程的区别。//烂大街了吧&lt;/p&gt;
&lt;p&gt;8、&lt;/p&gt;
&lt;p&gt;问了一下多态。//秒了，我暑假把c++primer看了一遍的。呵呵。&lt;/p&gt;
&lt;p&gt;9、&lt;/p&gt;
&lt;p&gt;问我多态怎么实现，不是代码怎么实现，是编译器怎么实现。&lt;/p&gt;
&lt;p&gt;我说虚表。&lt;/p&gt;
&lt;p&gt;10、&lt;/p&gt;
&lt;p&gt;然后问虚表是什么时候做的。我说我猜是编译的时候就做好了，然后再继续虚表的细节，我都猜了&lt;/p&gt;
&lt;p&gt;11、&lt;/p&gt;
&lt;p&gt;问了一下课程有哪些，喜欢哪些，我说除了算法数据结构之外，操作系统还可以&lt;/p&gt;
&lt;p&gt;问我分数，自豪答我数据结构100，屌丝地说操作系统什么的80+，幸好他不是广工的&lt;/p&gt;
&lt;p&gt;那你喜欢操作系统，哪一块？调度还是存储还是。。？&lt;/p&gt;
&lt;p&gt;进程什么的吧。&lt;/p&gt;
&lt;p&gt;优先级翻转是什么？有了解吗？&lt;/p&gt;
&lt;p&gt;硬着头皮答了一下，回来查了一下，丢脸了&lt;/p&gt;
&lt;p&gt;然后聊了一下人生，聊了一下其他。好像没了，可能有漏了题目，我记起来的话会编辑这篇文章&lt;/p&gt;
&lt;p&gt;握手，言谢。让我出去等，说要给组织人员反馈&lt;/p&gt;
&lt;p&gt;等了一下通知我继续面。&lt;/p&gt;
&lt;p&gt;进到去发现有两个人，介绍之后，女的是技术，男的是hr&lt;/p&gt;
&lt;p&gt;说这是因为你走了绿色通道，这是终面&lt;/p&gt;
&lt;p&gt;我说我啊？我没走绿色通道啊&lt;/p&gt;
&lt;p&gt;hr说反正这就是终面啦，哈哈&lt;/p&gt;
&lt;p&gt;坐下来他们看简历，和我聊天了两句，赞了一下我的手机号 几乎对称，问我是不是自己买的，我说学校发的&lt;/p&gt;
&lt;p&gt;也赞我确实拿了挺多奖啊，（其实是面试官不知道acm，知道acm都知道我的奖不多了），礼貌说了谢谢&lt;/p&gt;
&lt;p&gt;坐下来就问我课程，可能上一面的记录有，就问到操作系统的课程实验难道没有做个系统啊什么的？&lt;/p&gt;
&lt;p&gt;我说没有，都是模拟的，她说怎么模拟，我都不敢说了，人家都是内核级别的模拟，我们都应用级别的模拟，
我怎么敢说，丢广工脸啊&lt;/p&gt;
&lt;p&gt;然后就问我你读内核读哪个版本的源码。我说，呵呵&lt;/p&gt;
&lt;p&gt;然后针对我的屌丝项目问了一下，给我加了需求，让我解决&lt;/p&gt;
&lt;p&gt;明显是解决不了的嘛= =...&lt;/p&gt;
&lt;p&gt;架构上就决定了我那个项目多屌丝了&lt;/p&gt;
&lt;p&gt;然后问我acm那块，说算法。指明了问图轮，可能面试官熟悉&lt;/p&gt;
&lt;p&gt;就给她说了个最短路，吊她胃口，然后在用个堆优化一下，杠杠的&lt;/p&gt;
&lt;p&gt;然后聊了一下以后的发展，好奇什么技术什么的&lt;/p&gt;
&lt;p&gt;其中我说到 云存储还可以做，但是云计算暂时不能做&lt;/p&gt;
&lt;p&gt;然后她很热情给我讲了其实还有很多可以做的，而且比较成熟&lt;/p&gt;
&lt;p&gt;可能她内部有开源资料？羡慕&lt;/p&gt;
&lt;p&gt;然后hr问了两个问题，兴趣爱好，篮球和吉他。其实还有一个，女人。当然，我没说&lt;/p&gt;
&lt;p&gt;最后到我提问的环节，我反问了技术面试官对我指导一下，她很热情“你的基础还挺扎实 //这是我最开心的一句话了，我暑假恶补了，暑假前有面试官说过我基础不扎实&lt;/p&gt;
&lt;p&gt;就是做的东西比较少，&lt;/p&gt;
&lt;p&gt;有一些东西你要多尝试去做，&lt;/p&gt;
&lt;p&gt;发挥你的想象力，&lt;/p&gt;
&lt;p&gt;现存很多解决问题的方法都是很简单的，&lt;/p&gt;
&lt;p&gt;就是需要有人敢做。&lt;/p&gt;
&lt;p&gt;多读读别人的源码，&lt;/p&gt;
&lt;p&gt;了解别人的意图，&lt;/p&gt;
&lt;p&gt;不想我们以前很封闭。//确实，她看起来30+岁，目测也是个技术大牛。&lt;/p&gt;
&lt;p&gt;”//大概这么多，可能我忘记了。&lt;/p&gt;
&lt;p&gt;说一周内有消息。&lt;/p&gt;
&lt;p&gt;点头感谢，溜人。&lt;/p&gt;
&lt;p&gt;感谢读完，小伙伴们加油&lt;/p&gt;</summary><category term="阿里面经"></category></entry><entry><title>CVTE校园招聘面经2014年软件研发面经</title><link href="http://www.yanyulin.info/pages/2014/03/cvte_2014_1.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/cvte_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CVTE&lt;/code&gt;集团成立于2003年，总部位于广州科学城，建筑面积2万平方米，旗下设有多家独立的子公司，在香港设有全球服务中心，在国内设有26个营销服务中心和近1000个售后服务网点。CVTE目前致力于多类相关产品的研发、销售和内容服务，包括液晶电视主板设计、电源设计、移动互联、智能机顶盒、商用显示、工业设计、嵌入式游戏、医疗和教育等产业方向&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;面试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CVTE之前实习的时候有投过，也写了第一次面经，其实投的时候感觉没有合适的岗位，最后还是投了&lt;/p&gt;
&lt;p&gt;因为听说福利好&lt;/p&gt;
&lt;p&gt;流程：在线评测 -》 一面hr面 -》 笔试 -》 二面技术面 -》 终面&lt;/p&gt;
&lt;p&gt;一面收简历并筛掉一部分人,我报的是windows方向的，笔试的题目没有算法题，有概念题，翻译题什么的&lt;/p&gt;
&lt;p&gt;过了笔试后，第二天坐车去他们公司，他们公司的技术面没有其他公司的技术面问得那么久，也没其他公司难&lt;/p&gt;
&lt;p&gt;第二天晚上收到终面的通知，我一开始以为很大机会有Offer，结果就跪在hr面上了...&lt;/p&gt;
&lt;p&gt;扣分点回想起来大概是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、cvte一开始投的时候要回答一些问题，这里是有伏笔的，终面的时候会围绕着这些问题问，我终面的时候没有想到这个问题，估计扣了不少分&lt;/p&gt;
&lt;p&gt;2、而且当时同组的8,9个人里面就我一个没有装正装（其实搞技术去其他公司的一般不用的）&lt;/p&gt;
&lt;p&gt;3、他们说我说话太小声了，表达得也不好&lt;/p&gt;
&lt;p&gt;4、别人在讲的时候，她们会留意其他人在有没有在听（难怪有的人好像很有经验，一坐下来就拿着纸和笔）。忙了几天就这样被鄙视了，感觉很压抑。&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="CVTE面经"></category></entry><entry><title>创新工场校园招聘面经面试经验2014年研发类</title><link href="http://www.yanyulin.info/pages/2014/03/cxgc_2014_1.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/cxgc_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;以下记录的是我的创新工场一面经历&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一面时主要问的是算法，问了我两个算法，如下所示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一、输入字符串：AB123abd32HDU, 输出：12233ABDHUabd  时间复杂度：O（N）&lt;/p&gt;
&lt;p&gt;我写的代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    int hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;63&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;={0};
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;input:&amp;quot;;
    cin&amp;gt;&amp;gt;str;
    for (int i=0;i&lt;span class="nt"&gt;&amp;lt;strlen&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;((&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;||&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;#39;9&amp;#39;)&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;(str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&amp;#39;A&amp;#39;||str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;&amp;#39;Z&amp;#39;)&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;(str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&amp;#39;a&amp;#39;||str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;&amp;#39;z&amp;#39;))
        {
            cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;invalid input!\n&amp;quot;;
            break;
        }
        if (str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;=&amp;#39;0&amp;#39;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;=&amp;#39;9&amp;#39;)
        {
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;-&amp;#39;0&amp;#39;]++;
        }
        if (str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;=&amp;#39;A&amp;#39;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;=&amp;#39;Z&amp;#39;)
        {
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;-&amp;#39;A&amp;#39;+10]++;
        }
        if (str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&amp;gt;=&amp;#39;a&amp;#39;&lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt;str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;=&amp;#39;z&amp;#39;)
        {
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;-&amp;#39;a&amp;#39;+36]++;
        }
    }
    int j=0;
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;\noutput:&amp;quot;;
    for (i=0;i&lt;span class="nt"&gt;&amp;lt;10&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0)
        {
            str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=i+&amp;#39;0&amp;#39;;
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;--;
        }
    }

    for (i=10;i&lt;span class="nt"&gt;&amp;lt;36&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0)
        {
            str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=i-10+&amp;#39;A&amp;#39;;
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;--;
        }
    }
    for (i=36;i&lt;span class="nt"&gt;&amp;lt;62&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;hash&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;0)
        {
            str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=i-36+&amp;#39;a&amp;#39;;
            hash&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;--;
        }
    }
    cout&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;str&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二、实现归并排序的非递归算法。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面几个问题，是其他面试官问我们班同学的算法：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、一串数字的每两个数之间的差值是1或者-1，给定一个数N，求如何找到第一个N的位置，如：&lt;code&gt;3,4,3,2,1,2,3,4,3,4,5,6,5&lt;/code&gt;，求第一个5所在的位置。&lt;/p&gt;
&lt;p&gt;2、手机上玩的连连看，用什么算法可以找到两个相同的字符。（&lt;code&gt;BFS&lt;/code&gt;算法）&lt;/p&gt;
&lt;p&gt;3、一群大雁在空中假设一字排开，如果每个大雁之间的前后距离不超过n，切任意两个大雁之间前后的距离只能是1-n的整数，同时不允许大雁之间出现交叉情况，即每个大雁只能向前方飞行，设计算法，打印出m只大雁之间在空中飞行可能出现的队形 &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大家可以参考&lt;/p&gt;</summary><category term="创新工场面经"></category></entry><entry><title>创新工场校园招聘面经面试经验2014年武汉研发类</title><link href="http://www.yanyulin.info/pages/2014/03/cxgc_2014_2.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/cxgc_2014_2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;本人没进面试，下面是身边同学的面试题目&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、如何优化快速排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在这里我用的是&lt;code&gt;Median Of Three Partitioning&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;swap&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;partition&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, int low, int high)
{
    int pivot = data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    int i = low - 1;
    int j = high;

    while (1)
    {
        while (data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt; pivot&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;

        &lt;span class="na"&gt;while&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; pivot)
        {
            if (j == low)
            {
                break;
            }
        }

        if (i &amp;gt;= j)
        {
            break;
        }

        swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
    }

    swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);

    return i;
}

void QuickSort(int data&lt;span class="cp"&gt;[]&lt;/span&gt;, int low, int high)
{
    if (low &amp;gt;= high)
    {
        return ;
    }

    int pivot = partition(data, low, high);

    QuickSort(data, low, pivot-1);
    QuickSort(data, pivot+1, high);
}

/*
    函数介绍：Improved QuickSort
    Median-of-Three Partitioning
*/
void QuickSort_Opt(int data&lt;span class="cp"&gt;[]&lt;/span&gt;, int low, int high)
{
    if (low &amp;gt;= high)
    {
        return ;
    }

    int mid = low + (high - low) / 2;

    swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;mid&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);  // 用data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;记录middle value，
                                    // 并作为支点
    if (data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &amp;gt; data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
    {
        swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
    }

    if (data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &amp;gt; data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
    {
        swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;low&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
    }

    if (data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &amp;gt; data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)
    {
        swap(data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;, data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;high&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;);
    }

    int pivot = partition(data, low+1, high-1); // 此处剔除了第一个元素和最后一个元素，
                                                // 因为第一个元素肯定小于支点的值,
                                                //最后一个元素肯定大于支点的值；

    QuickSort_Opt(data, low, pivot-1);
    QuickSort_Opt(data, pivot+1, high);
}

int main()
{
    int data&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; = {1, 3, 5, 7, 9, 2, 4, 6, 8, 10, -1, -3, -5, -7, -9};

    QuickSort_Opt(data, 0, 14);

    for (int i=0; i&lt;span class="nt"&gt;&amp;lt;15&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;data&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="na"&gt;system&lt;/span&gt;&lt;span class="err"&gt;(&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;pause&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;);&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、图算法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;最小生成树之Kruskal&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、如何判断两个节点是不是属于同一棵树？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考察并查集&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Quick&lt;/span&gt; &lt;span class="n"&gt;Find&lt;/span&gt;

&lt;span class="n"&gt;Quick&lt;/span&gt; &lt;span class="n"&gt;Union&lt;/span&gt;

&lt;span class="n"&gt;Weighted&lt;/span&gt; &lt;span class="n"&gt;version&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="n"&gt;quick&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt;

&lt;span class="n"&gt;Weighted&lt;/span&gt; &lt;span class="n"&gt;quick&lt;/span&gt; &lt;span class="k"&gt;union&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;Path&lt;/span&gt; &lt;span class="n"&gt;compression&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;halving&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、虚函数表放在什么地方？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;根据网上查资料，得出结论是虚函数表在Linux/Unix中存放在可执行文件的只读数据段中（rodata），在微软的编译器中，虚函数表存放在常量段中&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="创新工场面经"></category></entry><entry><title>华为校园招聘面试经验2014年软件研发武汉区</title><link href="http://www.yanyulin.info/pages/2014/03/huawei_2014_B.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/huawei_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;华为，我们不仅仅是世界500强&lt;/strong&gt;，这是今年华为校招时的口号~~~&lt;/p&gt;
&lt;p&gt;华为要想进行面试，面试之前必须要过机试，机试有三道题，只要做对一道，就有机会进入面试，但是推荐大家还是全做完，也不是很难，而且要尽快做完，因为成绩的取得要依赖于做题的时间，答对的题数，提交的次数...&lt;/p&gt;
&lt;p&gt;我应聘的是&lt;code&gt;研究工程师&lt;/code&gt;，面试问的全是项目&lt;/p&gt;
&lt;p&gt;一面和终面都问的&lt;code&gt;项目&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所以项目是很重要的&lt;/p&gt;
&lt;p&gt;研发类岗位问的都是一些基础的东西&lt;/p&gt;
&lt;p&gt;基本上会让女生写个程序，男生就问问技术知识&lt;/p&gt;
&lt;p&gt;其中的一个写程序的题目：&lt;/p&gt;
&lt;p&gt;一个&lt;code&gt;双向链表&lt;/code&gt;，如何实现对其进行排序&lt;/p&gt;
&lt;p&gt;基础类题目：&lt;/p&gt;
&lt;p&gt;如TCP协议的三次握手，四次分手等&lt;/p&gt;
&lt;p&gt;再有，就是华为一直强调的就是能吃苦，因此面试结束之后，一定会问你，你能吃苦嘛&lt;/p&gt;
&lt;p&gt;答案我想只要你不是傻子，基本上都会说，肯定能，还会搞两个例子出来说明一下，自已能吃苦~~~&lt;/p&gt;</summary><category term="华为面经"></category></entry><entry><title>美团网校园招聘面经2014年软件研发</title><link href="http://www.yanyulin.info/pages/2014/03/meituan_2014_2.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/meituan_2014_2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;从半年前开始找工作，一路被鄙视到现在。以至于面了一些公司也不敢发帖写面经了&lt;/p&gt;
&lt;p&gt;作为一个没有项目经验的渣渣，一开始问啥啥都不会，&lt;/p&gt;
&lt;p&gt;回忆一下，半年前找实习的时候，我第一次笔试和面试都给了&lt;code&gt;CVTE&lt;/code&gt;，当时因为选错方向就跪了。腾讯实习的时候也是选错方向，加上基础差，没经验也跪了。也不怕死的投了微软，做了一份全英的试题。还有UC的笔试之类的，最后都没过。然后我就决定暑假恶补基础，暑假回家之后由于一些原因决定卖队友大四不参加比赛了，不过那时候没怎么练也打不过师弟师妹们了，还不如把机会让给他们去练练&lt;/p&gt;
&lt;p&gt;九月份一开始我就基本上有校园招聘并且在广州有考场的公司都投了简历,第一场笔试应该是美团网的，一开始我不知道有这个，同学说明天就要截止了就顺手投了一份&lt;/p&gt;
&lt;p&gt;美团的笔试题：&lt;/p&gt;
&lt;p&gt;&lt;a  href="http://www.yanyulin.info/pages/2014/03/meituan_2014_B.html" target="_blank"&gt;美团网校招笔试题2014年研发东北&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;还好数学题我会，前5道都做出来了，第6道做过反而没写完...&lt;/p&gt;
&lt;p&gt;剑指Offer里面第一道题就是，&lt;code&gt;O(n+m)&lt;/code&gt;的解法就5行吧，之前看过二分的写法而且一个星期前还敲过，最后居然没写不出来，只写了个想法...&lt;/p&gt;
&lt;p&gt;之后收到第二天的面试通知&lt;/p&gt;
&lt;p&gt;一面问了一些基础问题&lt;/p&gt;
&lt;p&gt;C++类的……之类的&lt;/p&gt;
&lt;p&gt;有一道算法题，叫你写出 将1到n按字典序排序输出的程序&lt;/p&gt;
&lt;p&gt;二面的时候也问了&lt;/p&gt;
&lt;p&gt;一些C++的基础题，&lt;/p&gt;
&lt;p&gt;还有 求第k大数 这类问题网上都有详细的解法，我就不说了&lt;/p&gt;
&lt;p&gt;还问了一些关于优化的问题，具体忘了，反正答得不顺利，表现不好，面试官叹了几声气&lt;/p&gt;
&lt;p&gt;我就有种不详的预感了，最后他用两个问题把我秒了&lt;/p&gt;
&lt;p&gt;问：你操作系统，数据库，网络哪个学得好?(其实我感觉都没学好)&lt;/p&gt;
&lt;p&gt;答：操作系统……吧&lt;/p&gt;
&lt;p&gt;问：CPU的调度算法有哪些？&lt;/p&gt;
&lt;p&gt;答：……（我只知道进程的）&lt;/p&gt;
&lt;p&gt;之后问了一些linux的操作命令，例如：软链接和硬链接是什么？&lt;/p&gt;
&lt;p&gt;二面就结束了。之后没有接到三面。&lt;/p&gt;</summary><category term="美团面经"></category></entry><entry><title>美团网校招笔试题2014年研发东北</title><link href="http://www.yanyulin.info/pages/2014/03/meituan_2014_B.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/meituan_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、一堆硬币，一个机器人，如果是反的就翻正，如果是正的就抛掷一次，无穷多次后，求正反的比例&lt;/p&gt;
&lt;p&gt;解析：假设某个阶段正面硬币的比例为p，则反面的比例为1-p，下一次翻转后，p的部分分为p/2的正面、p/2的反面，而1-p的反面部分全部变为正面。趋于平衡时，前后两次正反的比例应相等，即：p/(1-p)=(p/2+(1-p))/(p/2)，得到p=2/3。&lt;/p&gt;
&lt;p&gt;更直接一点，翻转前后正面（反面）相等，即p=p/2+(1-p)，直接得到p=2/3。&lt;/p&gt;
&lt;p&gt;2、概率题：一个汽车公司的产品，甲厂占40%，乙厂占60%，甲的次品率是1%，乙的次品率是2%，现在抽出一件汽车时次品，问是甲生产的可能性&lt;/p&gt;
&lt;p&gt;解：p=1/4利用贝叶斯,感谢网友指正~&lt;/p&gt;
&lt;p&gt;3、100盏等，熄熄灭灭，求最后亮的&lt;/p&gt;
&lt;p&gt;解：应该是相当于求1-100这100个数的因子个数，因子个数为奇数的就是亮的灯。又因为所有的数分解为两个不相同的数的时候为两个因子，因此只有平方数满足要求。共有10盏灯。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="mi"&gt;9&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="mi"&gt;16&lt;/span&gt; &lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="mi"&gt;25&lt;/span&gt;
&lt;span class="mi"&gt;36&lt;/span&gt;
&lt;span class="mi"&gt;49&lt;/span&gt;
&lt;span class="mi"&gt;64&lt;/span&gt;
&lt;span class="mi"&gt;81&lt;/span&gt;
&lt;span class="mi"&gt;100&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、链表翻转,给出一个链表和一个数k，比如链表1→2→3→4→5→6，k=2，则翻转后2→1→4→3→6→5，若k=3,翻转后3→2→1→6→5→4，若k=4，翻转后4→3→2→1→5→6，用程序实现. &lt;/p&gt;
&lt;p&gt;解:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;struct&lt;/span&gt; &lt;span class="nb"&gt;ListNode&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;m_nValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;

&lt;span class="nb"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;CreateList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_nValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;InsertNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;ListNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;pNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_nValue&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;pNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;PrintList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_nValue&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nb"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nb"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pPre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pPre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;pPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPost&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;



&lt;span class="nb"&gt;ListNode&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nx"&gt;ReverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kt"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pPre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pEnd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;pEnd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pPost&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="nx"&gt;pEnd&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pPre&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pCurrent&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPost&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;pPost&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPost&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;m_pNext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pPre&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pStart&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;Reverse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pCurrent&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;pStart&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;ListNode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;输入链表中节点的个数 n：&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;请输入n个整数值：&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="nx"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="kt"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;pHead&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;CreateList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="nx"&gt;InsertNode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;pHead&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kd"&gt;data&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;请输入k:&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;cin&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;head&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;ReverseList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;PrintList&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

    &lt;span class="nx"&gt;system&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;pause&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5、一个函数access(),调用频率不能超过R次/sec，用程序实现一个函数，当超过R次/sec时返回access false，不超过时返回success&lt;/p&gt;
&lt;p&gt;解：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define false 0&lt;/span&gt;
&lt;span class="cp"&gt;#define success 1&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;getcurrentms&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;timeval&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;gettimeofday&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_sec&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;tv&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tv_usec&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;//得到毫秒数&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="nf"&gt;count_access&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;time_ms_old&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;time_ms_now&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;time_ms_old&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcurrentms&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
  &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;R&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;time_ms_now&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getcurrentms&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;time_ms_now&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;time_ms_pld&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、一个m*n的矩阵，从左到右从上到下都是递增的，给一个数elem，求是否在矩阵中，给出思路和代 码.&lt;/p&gt;
&lt;p&gt;解: 思路:从矩阵的右上角开始判断即可,每次可以消除一行或一列,详见&lt;a href="http://www.yanyulin.info/category/jing-pin-shu-ji.html" target="_blank"&gt;精品书箱&lt;/a&gt;剑指offer一书.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="美团网笔试题"></category></entry><entry><title>湖南麒麟校园招聘面经2014年软研面经</title><link href="http://www.yanyulin.info/pages/2014/03/qilin_2014_1.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/qilin_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;湖南麒麟&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;湖南麒麟信息工程技术有限公司&lt;/code&gt;，暨操作系统湖南省工程研究中心，2011年正式升级为国家地方联合工程研究中心，是由湖南省发改委批复的高科技实体。公司以国防科技大学计算机学院为依托，吸收了 国内的优秀技术资源和资本，致力于基础软件的研究与发展。公司总部座落于长沙，设有研发、测试、生产等职能部门，并在北京设立了营销和技术服务中心。公司 坚持“科技成果产业化、运行机制企业化、发展方向市场化”的发展思路；倡导创新文化，鼓励员工积极参与技术创新；重视企业制度建设，形成了以人为本的现代 化管理制度...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;评价&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对该公司不是很了解，不作评论&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，面试感觉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;地点：华科8号楼415&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、内核安全？&lt;/p&gt;
&lt;p&gt;2、缓冲区溢出是什么造成的？&lt;/p&gt;
&lt;p&gt;3、内存泄露是怎么造成的？内存出错？&lt;/p&gt;
&lt;p&gt;4、在一个局部函数内malloc，malloc是在堆上还是在栈上，函数结束时内存发生什么变化？&lt;/p&gt;
&lt;p&gt;5、堆和栈的区别？&lt;/p&gt;
&lt;p&gt;6、什么情况下定义变量是在堆上？什么情况下定义变量是在栈上？&lt;/p&gt;
&lt;p&gt;7、对linux内核的了解程度？&lt;/p&gt;
&lt;p&gt;8、函数指针用在什么情况下？为什么不直接使用函数名而去使用函数指针？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;湖南麒麟待遇：&lt;code&gt;5.5K*16&lt;/code&gt; 硕士&lt;/p&gt;</summary><category term="其他面经"></category></entry><entry><title>去哪儿网校园招聘笔试题2014年产品经理试题</title><link href="http://www.yanyulin.info/pages/2014/03/qunar_2014_C.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/qunar_2014_C.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、你不仅要以一个普通网民的身份，而且要作为一个旁观者、思考者的身份来回答以下问题&lt;/p&gt;
&lt;p&gt;我们重点考察的是你对产品策划的敏感程度以及是否能够站在用户易用性的角度来考虑问题，同时我们也会考察你的分析问题以及解决问题的能力，如用以支撑观点的论证分析和逻辑思路，此外你的观点不一定要正确，但请条理清晰，逻辑严密的给出理由，也请成体系的把握核心要点&lt;/p&gt;
&lt;p&gt;1、很多人会选择假期出游，但是选择出游目的地时又会犯愁，如果你设计一个产品，解决这样的需求，你会怎么做，请说明理由。&lt;/p&gt;
&lt;p&gt;2、你最经常使用的互联网产品是什么，这个产品的定位是什么，它满足了你怎样的需求，没有满足你的哪些需求。&lt;/p&gt;
&lt;p&gt;3、如果你是去哪儿酒店搜索的产品经理，请列出你最关注的三项数值指标&lt;/p&gt;
&lt;p&gt;4、你看过中国好声音，或者快乐大本营吗？用这两个节目中的任何一个为例，说明一下这个节目是怎样设计流程从而达到环环相扣吸引大量的观众的&lt;/p&gt;
&lt;p&gt;5、假设你有一名死党或者闺蜜，他/她某次偶然钟情于一位白富美/高富帅，立誓非她不娶/非他不嫁，你作为狗头军师，请为他/她出谋划策：&lt;/p&gt;
&lt;p&gt;1)如何知道他/她的手机号&lt;/p&gt;
&lt;p&gt;2）如何去搭讪又不被反感?之前要准备些什么?为什么?&lt;/p&gt;
&lt;p&gt;3)如果白富美/高富帅有男/女朋友，请你为你的死党或者闺蜜设计策略，找到突破口，最终得手。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家将答案粘贴在后面的评论框里，我会选出最好的答案作为本题的标准答案，以方便更多的师弟师妹们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="去哪网笔试题"></category></entry><entry><title>腾讯校园招聘笔试题目2012年软件研发类</title><link href="http://www.yanyulin.info/pages/2014/03/tencent_2012_A.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/tencent_2012_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、请定义一个宏，比较两个数a、b 的大小，不能使用大于、小于、if 语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define max(a,b) (((a-b)&amp;amp;(1&amp;lt;&amp;lt;31))?(b):(a))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、如何输出源文件的标题和目前执行行的行数&lt;/p&gt;
&lt;p&gt;1）&lt;code&gt;__DATE__&lt;/code&gt;：当前文件的编译日期。与在&lt;code&gt;time.h&lt;/code&gt;中定义的&lt;code&gt;asctime&lt;/code&gt;函数返回的格式一样，即是&lt;code&gt;Mmm DD yyyy（月、日、年)&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;2)&lt;code&gt;__FILE__&lt;/code&gt;：当前源文件的名称。字符串格式&lt;code&gt;（const char）&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;3）&lt;code&gt;__LINE__&lt;/code&gt;：当前代码在源文件中的行数。一个整数。&lt;/p&gt;
&lt;p&gt;4)&lt;code&gt;__TIME__&lt;/code&gt;：当前源文件的编译时间。一个字符串（hh:mm:ss)；&lt;/p&gt;
&lt;p&gt;5）&lt;code&gt;__TIMESTAMP__&lt;/code&gt;：当前源文件最后编译的日期时间。一个字符串（格式为：&lt;code&gt;Ddd Mmm Date hh:mm:ss yyyy&lt;/code&gt;，即星期几、月、日、时、分、秒、年）；&lt;/p&gt;
&lt;p&gt;其中通过宏&lt;code&gt;__FILE__&lt;/code&gt;和&lt;code&gt;__LIEN__&lt;/code&gt;可以快速的定位程序出错的文件和位置，并通过&lt;code&gt;Email&lt;/code&gt;的形式发送给开发人员，从而进行快速维护。&lt;/p&gt;
&lt;p&gt;3、两个数相乘，小数点后位数没有限制，请写一个高精度算法纪录小数点在a,b中的位置去掉a,b中的小数点&lt;/p&gt;
&lt;p&gt;计算c=a*b; （同整数的大数相乘算法）加上小数点&lt;/p&gt;
&lt;p&gt;4、有A、B、C、D 四个人，要在夜里过一座桥。他们通过这座桥分别需要耗时1、2、5、10 分钟，只有一支手电，并且同时最多只能两个人一起过桥。&lt;/p&gt;
&lt;p&gt;请问，如何安排，能够在17 分钟内这四个人都过桥？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;去：&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="o"&gt;---------------------------------&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="err"&gt;回：&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;-----------------------------------&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="err"&gt;去：&lt;/span&gt;&lt;span class="n"&gt;CD&lt;/span&gt;&lt;span class="o"&gt;---------------------------------&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;

&lt;span class="err"&gt;回：&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;------------------------------------&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;

&lt;span class="err"&gt;去：&lt;/span&gt;&lt;span class="n"&gt;AB&lt;/span&gt;&lt;span class="o"&gt;----------------------------------&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5、C++将父类的析构函数定义为虚函数，下列正确的是哪个？&lt;/p&gt;
&lt;p&gt;A、释放父类指针时能正确释放子类对象&lt;/p&gt;
&lt;p&gt;B、释放子类指针时能正确释放父类对象&lt;/p&gt;
&lt;p&gt;C、这样做是错误的&lt;/p&gt;
&lt;p&gt;D、以上全错&lt;/p&gt;
&lt;p&gt;C++的多态肯定是使用父类的指针指向子类的对象，所以肯定是释放子类的对象，如果不使用虚函数的话，父类的指针就只能够释放父类的对象。&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;typedef char *String_t&lt;/code&gt;; 和 &lt;code&gt;#define String_d char *&lt;/code&gt;这两句在使用上有什么区别？&lt;/p&gt;
&lt;p&gt;答：typedef char *String_t 定义了一个新的类型别名，有类型检查。而#define String_d char * 只是做了个简单的替换，无类型检查，前者在编译的时候处理，后者在预编译的时候处理。&lt;/p&gt;
&lt;p&gt;7、给定一个字符串，求出其最长的重复子串&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="nx"&gt;str&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=&amp;quot;huahuahuahualkjljlkdf&amp;quot;;
    int len=strlen(str);
    int i;
    int j;
    int k=0;
    int first;
    int max=0;
    for (i=1;i&lt;span class="nt"&gt;&amp;lt;len&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;j=&lt;/span&gt;&lt;span class="s"&gt;0;j&amp;lt;i;j++)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt;=&lt;/span&gt;&lt;span class="s"&gt;=str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;k&lt;/span&gt;&lt;span class="err"&gt;++;&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;else&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;k=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;k&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;max)
            {
                max=k;
                first=j+1-max;
            }
        }
        k=0;
    }

    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;子串长度：&amp;quot;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;max&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;first;i&amp;lt;(first+max);i++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8、给定一个数组a[N],我们希望构造数组b[N]，其中&lt;code&gt;b[i]=a[0]*a[1]*...*a[N-1]/a[i]&lt;/code&gt;。在构造过程：
不允许使用除法；&lt;/p&gt;
&lt;p&gt;要求&lt;code&gt;O(1)&lt;/code&gt;空间复杂度和&lt;code&gt;O(n)&lt;/code&gt;时间复杂度；&lt;/p&gt;
&lt;p&gt;除遍历计数器与&lt;code&gt;a[N] b[N]&lt;/code&gt;外，不可使用新的变量(包括栈临时变量、对空间和全局静态变量等)；&lt;/p&gt;
&lt;p&gt;请用程序实现并简单描述。&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;p&gt;迭代计算：&lt;/p&gt;
&lt;p&gt;i前的部分：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;..........&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;i后半部分&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;   &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="p"&gt;......&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="vi"&gt;#define&lt;/span&gt; &lt;span class="nb"&gt;N&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    int b&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    int i;
    cout&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&amp;quot;请输入&amp;quot;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;个数字&amp;quot;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;i&amp;lt;N;i++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cin&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt;a&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    }
    b&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=1;
    for (i=1;i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="s"&gt;b&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;*a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt;=&lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;N-2;i&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;=1;i--)
    {
        b&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; *= b&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
        b&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; *= a&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    }
    for (i=0;i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;b&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="腾讯笔试题"></category></entry><entry><title>腾讯校园招聘面经2014年软件研发面经</title><link href="http://www.yanyulin.info/pages/2014/03/tencent_2014_1.html" rel="alternate"></link><updated>2014-03-10T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-10:pages/2014/03/tencent_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;腾讯校招，之前有内推过广研，不过失败了，不知道是否有不良记录&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;笔试题目大部分人应该已经都做过，网上也有，就不说了&lt;/p&gt;
&lt;p&gt;一面的流程大概是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、介绍自己，讲一下自已的项目经验，问一些技术相关的问题，然后是面试官提问&lt;/p&gt;
&lt;p&gt;2、他问我的问题大概是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、tcp协议的三次握手&lt;/p&gt;
&lt;p&gt;2、10亿个数找中位数，写代码&lt;/p&gt;
&lt;p&gt;3、链表反转&lt;/p&gt;
&lt;p&gt;4、非递归的二分查找&lt;/p&gt;
&lt;p&gt;5、linux的一些命令&lt;/p&gt;
&lt;p&gt;6、字符串去空格和制表符&lt;/p&gt;
&lt;p&gt;7、C++类的一些问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;总体来说都比较基础，还有一些我忘了&lt;/p&gt;
&lt;p&gt;不过在面试的时候他让我看了笔试的成绩，然后我提问的时候问了两个问题&lt;/p&gt;
&lt;p&gt;我的问题：&lt;/p&gt;
&lt;p&gt;1.问：这次招聘的比例大概多少？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答：今年应该挺大，今年的笔试成绩都挺不错（也不可能说出具体的数字，不过可能意思的招的比以前多吧）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、问：我的笔试成绩大概排多少？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;答：你自己觉得呢（本来想试探一下的，不过没问出什么来）之后过了一面，到昨天的中午才收到二面短信&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二面的面试官一般是主管来着，我的那个面试官没怎么问技术的，就基本上像是在聊天&lt;/p&gt;
&lt;p&gt;中间跟我说，他手上的几份简历中只有我一个是本科的，其他都是中科大，华工什么的，其中一个英语过了专业八级...&lt;/p&gt;
&lt;p&gt;我顿时吓尿了，然后他又安慰我说我的笔试成绩比他们高，他们会公平考虑的，然后我直接地问二面会筛多少人，他明确的告诉我他最终只能给两个Offer&lt;/p&gt;
&lt;p&gt;然后今天中午收到他的电话，叫我等hr面，顿时有点激动&lt;/p&gt;
&lt;p&gt;不过短信通知是到27号才hr面的。其实我挺当心hr面会挂了，自从上次被cvte鄙视了之后..，现在结果如何还是未知数，只能自求多福了。如果能过的话，那也是运气好而已，也许是笔试成绩还行吧&lt;/p&gt;
&lt;p&gt;作为一个弱菜，我只能说说自己面试了几次之后的一些看法：&lt;/p&gt;
&lt;p&gt;1、最好的面经是一定是在自己面试的过程中积累的。网上的那些只能作为参考。每个人的情况都不一样，自己缺什么就重点补那方面的知识。&lt;/p&gt;
&lt;p&gt;2、面试题大部分都雷同（我只能这么说），大部分题目一般解法巧妙，大部分人短时间内做不出来，这很正常的，不然出这题干嘛。所以要多上网做一些题目，其实有时候打不出来也不一定就没戏，他主要还是看你面对难题的想法。&lt;/p&gt;
&lt;p&gt;3、面试过程一般会手写一些比较短又常用的代码，要多点积累。&lt;/p&gt;
&lt;p&gt;推荐搞IT技术的看两本书：《剑指Offer》《编程之美》讲得很好的两本书，对面试很有用&lt;/p&gt;
&lt;p&gt;然后就是具体方向看具体哪一方面的一些面试题了&lt;/p&gt;
&lt;p&gt;面试书下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;
剑指offer下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" target="_blank"&gt;
程序员面试宝典下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/prgbeautiful.html" target="_blank"&gt;
编程之美—微软技术面试心得
&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="腾讯面经"></category></entry><entry><title>创新工场校园招聘笔试题2013年软件研发</title><link href="http://www.yanyulin.info/pages/2014/03/cxgc_2013_B.html" rel="alternate"></link><updated>2014-03-09T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-09:pages/2014/03/cxgc_2013_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;时间：2012年9月27日 地点：鼎好大厦10层&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;考试时长：1小时&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一部份选择题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1，阅读以下程序，求z的结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define N 3  &lt;/span&gt;
&lt;span class="cp"&gt;#define Y(n) ((N+1)*n)  &lt;/span&gt;
&lt;span class="n"&gt;z&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;Y&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解析48&lt;/p&gt;
&lt;p&gt;2有关多线程，多进程的描述错误的是&lt;/p&gt;
&lt;p&gt;A）子进程获得父进程的数据空间，堆和栈的复制品&lt;/p&gt;
&lt;p&gt;B）线程可以与同进程的其他线程共享数据，但是它拥有自己的栈空间且拥有独立的执行序列&lt;/p&gt;
&lt;p&gt;C）线程执行开销小，但是不利于资源管理和保护&lt;/p&gt;
&lt;p&gt;D）进程适合在SMP机器上进行，而线程则可以跨机器迁移&lt;/p&gt;
&lt;p&gt;解答：D&lt;/p&gt;
&lt;p&gt;3、求sizeof（s）&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
   &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;z&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解答：16&lt;/p&gt;
&lt;p&gt;4、序列&lt;code&gt;{2,1,4,9,8,10,6,20}&lt;/code&gt;是某排序算法第二轮排序的结果，则该算法只能是&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A快速排序&lt;/code&gt;  &lt;/p&gt;
&lt;p&gt;B冒泡排序&lt;/p&gt;
&lt;p&gt;C选择排序    &lt;/p&gt;
&lt;p&gt;D插入排序&lt;/p&gt;
&lt;p&gt;5、我们需要监听一个事件状态，让它在状态发生改变时主动发出通知，请问需要哪种设计模式？&lt;/p&gt;
&lt;p&gt;A装饰者模式 &lt;/p&gt;
&lt;p&gt;B建造者模式&lt;/p&gt;
&lt;p&gt;C创新工场模式&lt;/p&gt;
&lt;p&gt;D观察者模式&lt;/p&gt;
&lt;p&gt;解答：D&lt;/p&gt;
&lt;p&gt;6、有2012瓶矿泉水，其中有一瓶有毒，请问需要多少只老鼠才能一次性找到有毒的矿泉水？&lt;/p&gt;
&lt;p&gt;解答：11只&lt;/p&gt;
&lt;p&gt;二 问答题&lt;/p&gt;
&lt;p&gt;1、有0-n这n+1个数，但是其中丢了一个数，请问如何找出丢了哪个数？&lt;/p&gt;
&lt;p&gt;解答：求这n个数的sum，然后计算n(n+1)/2-sum可得。&lt;/p&gt;
&lt;p&gt;2、 解释&lt;code&gt;#typedef char (*func)(int,char*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解答：定义了一个函数指针的数据类型；该数据类型可以用来定义函数指针；定义的函数指针指向的函数的参数为&lt;code&gt;(int,char*)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3、求以下程序输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="p"&gt;{{&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;}},{{&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;},{&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;12&lt;/span&gt;&lt;span class="p"&gt;}}};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解答：&lt;/p&gt;
&lt;p&gt;考察多级指针，一定要明确指针指向的是什么，才能知道它加1后跳过了多少字节。&amp;amp;a是个四级指针，指向的是a这样的数组，所以它加1，就会跳过整个数组。&lt;/p&gt;
&lt;p&gt;4、求以下程序输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;A::print()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;B&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;B::print()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;C&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;public&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;virtual&lt;/span&gt; &lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="nx"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;C::print()&amp;quot;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;a.print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;A&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;aa&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;B&lt;/span&gt; &lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;C&lt;/span&gt; &lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;aa&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;ac&lt;/span&gt;&lt;span class="o"&gt;=&amp;amp;&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;a.print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;b.print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;c.print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;aa&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ab&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;ac&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;b&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;c&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解答：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;

&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三算法编程题&lt;/p&gt;
&lt;p&gt;1，有1分,2分,5分,10分四种硬币，每种硬币数量无限，给定n分钱，求有多少种组合可以组合成n分钱？&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;p&gt;思路： &lt;/p&gt;
&lt;p&gt;1、四层循环&lt;/p&gt;
&lt;p&gt;2、使用回溯法在空间中搜索&lt;/p&gt;
&lt;p&gt;代码为思路2：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stdafx.h&amp;quot;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;Target&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;coin&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;={1,2,5,10};
int total=0;
vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; solution;

void dfs(int index)
{
    if( total == Target )
    {
        count++;
        cout &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; count&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;:&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="na"&gt;solution&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;cout&lt;/span&gt;  &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;solution&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;return&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;total&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; Target )
        return;

    for( int i=index; i&lt;span class="nt"&gt;&amp;lt;4&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;total&lt;/span&gt; &lt;span class="err"&gt;+=&lt;/span&gt; &lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;solution&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;push_back&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;coin&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="err"&gt;);&lt;/span&gt;
        &lt;span class="na"&gt;dfs&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;
        &lt;span class="na"&gt;solution&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;pop_back&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;
        &lt;span class="na"&gt;total&lt;/span&gt; &lt;span class="na"&gt;-=&lt;/span&gt;&lt;span class="s"&gt;coin&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;_tmain&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;argc&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;_TCHAR&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt; &lt;span class="na"&gt;argv&lt;/span&gt;&lt;span class="cp"&gt;[]&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;while&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;count=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt;
        &lt;span class="na"&gt;cin&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt; Target;
        dfs(0);
        cout &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; count&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、马戏团里有个叠罗汉的表演，为了便于美观，下面的人身高和体重都要大于上面的人。现在知道n个演员的身高和体重，请问最多能叠多少层？&lt;/p&gt;
&lt;p&gt;解答：&lt;/p&gt;
&lt;p&gt;思路：&lt;/p&gt;
&lt;p&gt;首先生成一个有向图，用连接矩阵的方式来表示。map[i][j]==1表示第i个人上面可以放第j个人。然后开始对每个人进行深度搜索，这个图中不可能有环。所以对于每个人来说就是一棵树，搜索树的高度，再找出最高的高度即是答案。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;stdafx.h&amp;quot;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;fstream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;cstdlib&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;weight&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;double&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nb"&gt;height&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxDepth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bestPath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;dfs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="nb"&gt;path&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;depth&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nx"&gt;vector&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nx"&gt;bestPath&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;index&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; != 0)
        { 
            flag = 1;
            vector&lt;span class="nt"&gt;&amp;lt;int&amp;gt;&lt;/span&gt; tPath;
            int t = dfs(i, tPath);
            if( t &amp;gt; depth )
            {
                path = tPath;
                depth = t;
            }
        }
    }

    if( flag==0 )
    {   
        path.clear();
        path.push_back(index);
        return 1;
    }
    else
    {
//      path = bestPath;
        path.push_back(index);
        return depth+1;
    }
}

void CreateMap()
{
    map = new int*&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;

    for( int i=0; i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;new&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="na"&gt;memset&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;N&lt;/span&gt;&lt;span class="err"&gt;*&lt;/span&gt;&lt;span class="na"&gt;sizeof&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt; &lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;j=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;j&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;j&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="err"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; &lt;span class="err"&gt;)&lt;/span&gt;
                &lt;span class="na"&gt;map&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;][&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt;=&lt;/span&gt;&lt;span class="s"&gt;1;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;void&lt;/span&gt; &lt;span class="na"&gt;CreateData&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;ofstream&lt;/span&gt; &lt;span class="na"&gt;out&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;N =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;30;&lt;/span&gt;
    &lt;span class="na"&gt;out&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;N&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="na"&gt;out&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;rand&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;;&lt;/span&gt;
    &lt;span class="na"&gt;out&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="na"&gt;out&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;rand&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;CreateData&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt;   
    &lt;span class="na"&gt;freopen&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;in&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;,&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;r&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;,&lt;/span&gt; &lt;span class="na"&gt;stdin&lt;/span&gt; &lt;span class="err"&gt;);&lt;/span&gt;
    &lt;span class="na"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;Please&lt;/span&gt; &lt;span class="na"&gt;input&lt;/span&gt; &lt;span class="na"&gt;N:&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;cin&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt; N;
    height = new double&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    weight = new double&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nb"&gt;N&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    for( int i=0; i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="na"&gt;cin&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt; height&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    for( int i=0; i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
        &lt;span class="na"&gt;cin&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&amp;gt; weight&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;

    CreateMap();
    int depth=0;
    for(int i=0; i&lt;span class="nt"&gt;&amp;lt;N&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;vector&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt; tPath;
        int t=dfs(i,tPath);
        if( t&amp;gt;depth )
        {
            bestPath = tPath;
            depth = t;
        }
    }
    cout &lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt; depth&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt; &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;&lt;span class="na"&gt;bestPath&lt;/span&gt;&lt;span class="err"&gt;.&lt;/span&gt;&lt;span class="na"&gt;size&lt;/span&gt;&lt;span class="err"&gt;();&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;height&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bestPath&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="na"&gt;weight&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;bestPath&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="创新工场笔试题"></category></entry><entry><title>去哪儿网校园招聘笔试题2014年成都软研|软测|前端</title><link href="http://www.yanyulin.info/pages/2014/03/qunar_2014_B.html" rel="alternate"></link><updated>2014-03-09T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-09:pages/2014/03/qunar_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;一、编程题、开发岗三道都必做，前端岗和测试岗前两道必做&lt;/p&gt;
&lt;p&gt;1、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;implement&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nb"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;randomAlphabetic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kr"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="err"&gt;，&lt;/span&gt;
&lt;span class="nx"&gt;Creats&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt; &lt;span class="nx"&gt;random&lt;/span&gt; &lt;span class="nx"&gt;string&lt;/span&gt; &lt;span class="nx"&gt;whose&lt;/span&gt; &lt;span class="nx"&gt;length&lt;/span&gt; &lt;span class="nx"&gt;is&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;number&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt; 
&lt;span class="nx"&gt;specified&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;Characters&lt;/span&gt; &lt;span class="nx"&gt;will&lt;/span&gt; &lt;span class="nx"&gt;be&lt;/span&gt; &lt;span class="nx"&gt;chosen&lt;/span&gt; &lt;span class="nx"&gt;from&lt;/span&gt; &lt;span class="nx"&gt;the&lt;/span&gt; &lt;span class="nx"&gt;set&lt;/span&gt; &lt;span class="nx"&gt;of&lt;/span&gt; &lt;span class="nx"&gt;alpabetic&lt;/span&gt; &lt;span class="nx"&gt;characters&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、已知字母序列&lt;/p&gt;
&lt;p&gt;&lt;code&gt;【d, g, e, c, f, b, o, a】&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;请实现一个函数针对输入的一组字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;input[] = {"bed", "dog", "dear", "eye"}&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;按照字母顺序排序并打印。&lt;/p&gt;
&lt;p&gt;本例的输出顺序为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;dear&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;dog&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;eye&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;bed&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、有一万个北京单身男女向你提交了基本资料，包括：姓名、性别、年龄、星座，写一段程序尝试找出他们最匹配的一对&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家将答案粘贴在后面的评论框里，我会选出最好的答案作为本题的标准答案，以方便更多的师弟师妹们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="去哪网笔试题"></category></entry><entry><title>保护Ripple币以及万特币的几点安全措施</title><link href="http://www.yanyulin.info/pages/2014/03/ripple_safe.html" rel="alternate"></link><updated>2014-03-09T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-09:pages/2014/03/ripple_safe.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如何保护ripple钱包，如何防止钱包被盗，本博文将向大家介绍几种方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;引言&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;万特币是基于&lt;code&gt;Ripple币&lt;/code&gt;的一种货币，具体简介，大家可以参考&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html" target="_blank"&gt;[赠送]WTC(万特币)获取30ripple和100WTC&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;随着三八节的过去和大家参与水木积分兑换万特币活动的热情高涨，领到红包的MM们手中的万特币也增值了不少，在可以预见的未来，万特币的这一增值趋势将&lt;strong&gt;更加明显，更加稳健，更加迅速&lt;/strong&gt;。但这也会引起黑客们的注意，我们知道&lt;code&gt;RIPPLE&lt;/code&gt;平台上有一些尚未克服的安全漏洞，使得黑客们能针对中国用户的使用习惯暴力破解密码账户，盗取那些快速增值的虚拟资产。过去一段时间，各种虚拟币都遭到过黑客们的盗窃，损失巨大，巨大的损失导致了Mt.Got公司的破产，还有国外一个交易平台同样也破产了。&lt;/p&gt;
&lt;p&gt;所以持有增值速度更快的万特币的&lt;code&gt;MM&lt;/code&gt;们，更要注意安全防范&lt;/p&gt;
&lt;p&gt;保护了万特币也就等于保护了&lt;code&gt;Ripple&lt;/code&gt;币，因为万特币是基于&lt;code&gt;Ripple币&lt;/code&gt;的一种货币，你懂滴~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;三大纪律&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、永远不要丢失手中的密钥，更不要将密钥告诉任何人，包括且不限于万特币官方人员。将密钥打印一份放进保险柜里，然后加密打包放进你最安全的电子邮箱文件夹里,然后将存在word中的删掉。&lt;/p&gt;
&lt;p&gt;如何用密钥恢复钱包，大家可以参考此篇文章&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html" target="_blank"&gt;
ripple钱包注册/更改/免费激活
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、永远不要告诉任何人你的账户和密码，包括且不限于万特币群中那些热心帮你忙的“好心人”，如果出现这种情况，请及时检查你账户中万特币是否还在，并设法将账户和密码设置或修改成复杂的不容易被破解的形式，请务必自行谷歌或百度正确的RIPPLE密码修改方式&lt;/p&gt;
&lt;p&gt;3、永远尽量少登录你的钱包，如果你要查看你的钱包，请采用这种更加安全便捷的方式：&lt;a href="https://ripple.com/graph/" target="_blank"&gt;https://ripple.com/graph/ &lt;/a&gt; 并在地址栏输入你的钱包地址，即可查询。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;八项注意（将万特币换成RIPPLE币即是RIPPLE币的八项注意~~）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、万特币官方将始终是遵纪守法的好公民，根据中华人民共和国法律，万特币官方绝不提供任何形式的充值与提现服务。在安全与法律问题没有解决前，任何冒用万特币官方名义进行的充值与提现活动，都很可能是值得高度警惕和注意的诈骗活动。 &lt;/p&gt;
&lt;p&gt;2、注意不要在别人面前露富和得瑟，行情来时，万特币可能会涨得让你晚上睡觉都能一直笑着睡到醒。但是记住了，这个时候也正是别人可能嫉妒你和想打劫你的时候。&lt;/p&gt;
&lt;p&gt;3、注意时刻关注万特币官方网站(&lt;code&gt;http://www.wanteb.com&lt;/code&gt;)宣布的风险控制与改进活动，作为生命不息创新不止的运营团队，万特币官方始终把不断改进虚拟货币的风险管理作为自身的使命。请根据官方提示配合参加一切提高你账户安全性的活动，并欢迎到论坛提问：http://bbs.wanteb.com/。&lt;/p&gt;
&lt;p&gt;4、注意定期杀毒，安装有效的杀毒软件，避免黑客入侵你的个人电脑。&lt;/p&gt;
&lt;p&gt;5、注意不要在公共场合或网吧登陆你的万特币钱包&lt;/p&gt;
&lt;p&gt;6、注意不要信任陌生的网关，万特币官方网关地址是&lt;code&gt;rHZP1pA3THovFqvwgtM2tnJWrS54hSrDiG&lt;/code&gt;检查下你的信任设置中是否关联的ripple同名货币，如关联，请将勾去掉。&lt;/p&gt;
&lt;p&gt;7、注意进入&lt;strong&gt;RIPPLE&lt;/strong&gt;网站时，不要将注册界面误认为是登录界面，如果你用你的账户和密码重新注册一遍的话，会带来非常麻烦的安全后果。&lt;/p&gt;
&lt;p&gt;8、注意注册时，就尽量采用复杂的别人难以破解的账户和密码进行注册。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本博客会不定期举行RIPPLE币赠送以及万特币赠送活动，频率大概是两周一次，大家可以点击右侧的订阅按钮，订阅即可，更新会通知大家&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>[赠送]免费领取赠送获取ripple币啦</title><link href="http://www.yanyulin.info/pages/2014/03/xrpfree.html" rel="alternate"></link><updated>2014-03-09T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-09:pages/2014/03/xrpfree.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.yanyulin.info" target="_blank"&gt;本博客&lt;/a&gt;会不定期举行RIPPLE币赠送以及万特币赠送活动，频率大概是两周一次，大家可以点击右侧的订阅按钮，订阅即可，更新会通知大家&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一轮的赠送大家热情太高了，实在对不住了，都说了已经截至了，还有不间断的留言，为了满足大家的热情，&lt;a href="http://www.yanyulin.info" target="_blank"&gt;烟雨林博客&lt;/a&gt;决定不定期举行赠送，以下是上次赠送时的信息，当然截至日期之后，均未发，对不住后来的哥们们啦，为了满足大家的热情，将继续赠送...&lt;/p&gt;
&lt;p&gt;关于上一轮赠送，大家可以看留言,不信的将Ripple地址留下，试试便知~~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/getxrp.html" target="_blank"&gt;&lt;/strong&gt;
[赠送]ripple币免费获取&amp;amp;免费领取
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;附注：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;别再给我留言，留言形式什么什么的激活钱包~~~,钱包激活教程，请看下面两篇文章，照着做，加群，报上烟雨林博客，即可激活还能获得100WTC，亲，动动你的小手吧~~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html" target="_blank"&gt;
&lt;strong&gt;ripple钱包注册/更改/免费激活&lt;/strong&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html" target="_blank"&gt;
&lt;strong&gt;[赠送]WTC(万特币)获取30ripple和100WTC&lt;/strong&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此次赠送由万特币团队提供赞助&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;万特币的价格目前处于一路飙升阶段，由最初发行的159个WTC币才能兑换一个xrp币，到现在的只需要25个万币就可以兑换1个XRP币啦，短短的一个月，这就是万特币的升值潜力，亲，马上我就要赠送啦，别急，哈哈~~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这是兑换比图，大家自已看吧，通过我博客领到大量XRP币的人，相信应该很信任本博客啦&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/xrpfree.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/invest/xrp1.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;赠送前说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;为了大家能够领取到万特币，请大家请先信任此网关，信任量最好要大于100，此次赠送WTC币额度会在100以内，如果不想要的，不强求，信任指南，请参考下文，也就几步~~&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html" target="_blank"&gt;
&lt;strong&gt;[赠送]WTC(万特币)获取30ripple和100WTC&lt;/strong&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;信任截图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/xrpfree.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/invest/wtc3.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;信任网关地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;rHZP1pA3THovFqvwgtM2tnJWrS54hSrDiG&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;大家信任了此网关后，每次都会有WTC币活动，获得了WTC就等于获得了XRP币，你懂的，不懂的好好看看，我博客里的其他文章，只能说是有利无害~~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，此次赠送&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、为避免垃圾留言，请以社交帐户（如QQ/微博...）登录，对于&lt;code&gt;国外的朋友&lt;/code&gt;，不作此要求，我会优先发放以社交帐户（如QQ/微博...）登录的用户，每人&lt;code&gt;0.3XRP-0.5XRP&lt;/code&gt;，加&lt;code&gt;50&lt;/code&gt;万特币(&lt;/strong&gt;50万特币等于2XRP币&lt;strong&gt;，不信大家去兑换试试)，留言形式为已信任WTC+Ripple钱包地址，如果不信任&lt;code&gt;万特币&lt;/code&gt;的话，&lt;/strong&gt;我可发送不了万特币哈&lt;strong&gt;，有心无力呀，那么就只能领取到&lt;code&gt;0.3XRP-0.5XRP&lt;/code&gt;啦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;2、对于不是以社交帐号登录的用户，只赠送&lt;code&gt;0.1-0.2XRP&lt;/code&gt;币，高贵的万币币不赠~~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;3、将本文转载出去，转载文要求附上&lt;code&gt;文章出处链接&lt;/code&gt;，将视&lt;/strong&gt;转载论坛或者...&lt;strong&gt;的质量，将赠送至少&lt;code&gt;0.6xrp币&lt;/code&gt;加100WTC（等于4XRP币），留言形式为已信任WTC+Ripple钱包地址+转载地址&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;4、对本文进行评价并转发到微博者，将视微博粉丝数至少获赠0.5XRP币加80WTC（等于3XRP币），粉毕数45个以下的，赠送数量将采用第一条或者第二条~~~&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>大众点评校园招聘面经2014年软件面经</title><link href="http://www.yanyulin.info/pages/2014/03/dianping_2014_1.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/dianping_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;大众点评网简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;大众点评网&lt;/strong&gt;于2003年4月由&lt;code&gt;张涛&lt;/code&gt;成立于上海，是中国领先的本地生活信息及交易平台，同时也是全球最早建立的独立第三方消费点评网站，主要为用户提供各种生活信息服务，时至今日分支机构遍布中国各大主要城市&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，面试感觉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;整体来说，对这个公司的印象不是太好，公司面试时过于功利&lt;/p&gt;
&lt;p&gt;它会问你有没有一些其他牛逼公司的offer，你说有的话，他就会很想要你，要是你说没有得话，基本上来说就跪了&lt;/p&gt;
&lt;p&gt;而且大众点评网没有笔试，只有一个上机考试，上机考试考的还有行测，对于一个面技术的人来说，考行测是什么玩意，我从来不看好一个考行测的技术公司，能有多大的前途,我不知道行测能考出啥，在这个奇葩的国度里，我以为只有公务员，事业单位才考，没想到这种技术性的公司也考...&lt;/p&gt;
&lt;p&gt;我面了一面就跪了，写下面试的问题吧，给师弟师妹们多些参考...&lt;/p&gt;
&lt;p&gt;问了我如下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、面向对象6大原则&lt;/p&gt;
&lt;p&gt;2、java与c++区别&lt;/p&gt;
&lt;p&gt;3、Java虚拟机你了解么？具体讲讲&lt;/p&gt;
&lt;p&gt;4、设计模式singleton，这个要写出代码，也是非常简单的&lt;/p&gt;
&lt;p&gt;5、sleep与wait的区别&lt;/p&gt;
&lt;p&gt;6、object类你了解么，有哪些方法&lt;/p&gt;
&lt;p&gt;7、java里的重载与重写之间的区别&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="大众点评面经"></category></entry><entry><title>校园招聘华为上机试题2014年武汉地区</title><link href="http://www.yanyulin.info/pages/2014/03/huawei_2014_3.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/huawei_2014_3.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、&lt;a href="http://www.yanyulin.info" target="_blank"&gt;手机电池&lt;/a&gt;余量的问题，描述: 自从有了智能手机，时刻都要关心手机的电量。你的任务很简单，用程序打印符号来表示当前手机的电量，用10行和10列来表示电池的电量，同时在外围加上边框，每一行表示10%的电量，假设还有60%的电量，则显示如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="o"&gt;+----------+&lt;/span&gt;

&lt;span class="o"&gt;|----------|&lt;/span&gt;

&lt;span class="o"&gt;|----------|&lt;/span&gt;

&lt;span class="o"&gt;|----------|&lt;/span&gt;

&lt;span class="o"&gt;|----------|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;|++++++++++|&lt;/span&gt;

&lt;span class="o"&gt;+----------+&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序对运行时间限制: 无限制 &lt;/p&gt;
&lt;p&gt;程序对内存限制:无限制 &lt;/p&gt;
&lt;p&gt;程序输入: 多组测试数据，第一行为测试数据组数N（N&amp;lt;10），紧接着是N行，每行一个数，表示电量，这个数值可能是0，10，20 ，30，40，50，60，70，80，90，100&lt;/p&gt;
&lt;p&gt;输出: 每组数据输出一个电池的电量，每组数据之间用15个“=”隔开&lt;/p&gt;
&lt;p&gt;样例输入:&lt;code&gt;2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;50&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;2、在中国，形容夫妻恩爱的词汇中，大家用的比较多的就是“夫妻相”。所谓“夫妻相”，就是两个人看上去比较般配，长相、身材等某些方面有一定的相似度。本题则另辟蹊径，从人的姓名维度，以字母重复个数来寻找最具“夫妻相”的人。&lt;/p&gt;
&lt;p&gt;题目中预先给定一组女士的姓名拼音。输入男士的姓名拼音（拼音中间可以有空格,字母全部小写），依预先给定姓名拼音的先后遍历所有姓名，输出字母重复数最多的女士姓名。&lt;/p&gt;
&lt;p&gt;规则1：如果字母重复数最多的女士有多位相同，则以最先匹配的女士做为最具“夫妻相”的人选。&lt;/p&gt;
&lt;p&gt;规则2：人名中的相同字母，按重复一次处理。例如：li ling 与li lei 重复的字符个数为2,而不是4。&lt;/p&gt;
&lt;p&gt;预置女士名单(先后循序必须保证):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="s"&gt;&amp;quot;wang fei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;zhang man yu&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;zhang zhi yi&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;li li&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;li xiao man&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;li yu cun&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;yang ni&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;xiao tong&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;li lei&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="s"&gt;&amp;quot;zhang san&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;运行时间限制: 无限制 &lt;/p&gt;
&lt;p&gt;内存限制: 无限制 &lt;/p&gt;
&lt;p&gt;输入: 输入一个男士姓名，字符串 &lt;/p&gt;
&lt;p&gt;输出: 输出最具“夫妻相”的女士姓名&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;解析一下：华为的上机题目每年就那么多，毕竟题库也是有限的，这道题目在北航上机时也考过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、&lt;code&gt;CandyBrush游戏&lt;/code&gt;，描述: CandyBrush一款流行的消除游戏，在一个方阵中布满各种糖果，任意交换两个糖果，如果交换后出现横向或者竖向有连续三个相同的情况，则可以消除糖果并得分。&lt;/p&gt;
&lt;p&gt;输入25个字符组成的字符串（编号为1到25），表示5×5的方阵，每个字符表示不同类型的糖果（区分大小写），判断是否有解，即交换某两个糖果后能够消除糖果。&lt;/p&gt;
&lt;p&gt;举例，下面的方阵无解&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;
&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面的方阵交换(0, 2)和(1, 2)两个糖果后，能消除M&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;q&lt;/span&gt;
&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;X&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt;
&lt;span class="n"&gt;U&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;M&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;O&lt;/span&gt;
&lt;span class="n"&gt;T&lt;/span&gt; &lt;span class="n"&gt;Q&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt; &lt;span class="n"&gt;R&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果有解，则输出&lt;code&gt;YES&lt;/code&gt;，同时输出所有交换方案中，被交换糖果最小编号（1到25），比如：上面的方阵中，被交换的糖果，编号最小的为糖果&lt;code&gt;“T”&lt;/code&gt;，编号为3。&lt;/p&gt;
&lt;p&gt;如果无解，则输出&lt;code&gt;NO&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;运行时间限制: 无限制&lt;/p&gt;
&lt;p&gt;内存限制: 无限制&lt;/p&gt;
&lt;p&gt;输入: &lt;/p&gt;
&lt;p&gt;输入&lt;code&gt;25个字符&lt;/code&gt;组成的字符串，不含空格，表示5×5的方阵&lt;/p&gt;
&lt;p&gt;输出: &lt;/p&gt;
&lt;p&gt;如果有解，则输出YES，同时输出所有交换方案中，被交换糖果最小编号，以空格隔开。如果无解，则输出NO。&lt;/p&gt;
&lt;p&gt;样例输入: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TMTMOXRMCqABCXRURMTOTQCRA&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;样例输出: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;YES&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答案提示:  &lt;/p&gt;
&lt;p&gt;输出最小糖果编号的意思，就是从左至右，从上到下对糖果进行遍历，找到第一个与其他交换后能消除的糖果即可&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;欢迎大家将答案粘贴在后面的评论框里，我会选出最好的答案作为本题的标准答案，以方便更多的师弟师妹们&lt;/strong&gt;&lt;/p&gt;</summary><category term="华为笔试题"></category></entry><entry><title>华为校园招聘面经2014年软件研发</title><link href="http://www.yanyulin.info/pages/2014/03/huawei_2014_A.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/huawei_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;华为&lt;/strong&gt;现在已经被黑的很严重了，什么累死了好几个人，什么工资低，什么华为工作比较累，什么加班比较多，等等一系列，大华为已经被好多人黑的不能再黑了，我身边的好多研究生都是将华为作为垫底的，说实在没公司要时，再考虑去华为&lt;/p&gt;
&lt;p&gt;华为今年的工资待遇是&lt;code&gt;11-13K/M&lt;/code&gt;,过年时会考虑发两个月的绩效，说实在的我个人感觉华为还是相当不错滴，都是年轻人嘛，少年时不奋斗，何时奋斗，少年是不艰苦，以后又有何出息，我个人还是非常好看华为滴...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;华为，我们不仅仅是世界500强&lt;/strong&gt;，这是今年华为校招时的口号~~~&lt;/p&gt;
&lt;p&gt;华为要想进行面试，面试之前必须要过机试，机试有三道题，只要做对一道，就有机会进入面试，但是推荐大家还是全做完，也不是很难，而且要尽快做完，因为成绩的取得要依赖于做题的时间，答对的题数，提交的次数...&lt;/p&gt;
&lt;p&gt;面试总共2面:&lt;/p&gt;
&lt;p&gt;第一面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、问了我一些项目&lt;/p&gt;
&lt;p&gt;2、然后让我写一个从1到n输出所有的素数，这个很简单吧，但是要考虑一下效率呦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、boss，估计看是你适不适合当他小弟&lt;/p&gt;
&lt;p&gt;2、主要问了一下未来得职业规划&lt;/p&gt;
&lt;p&gt;3、你能不能吃苦，这个问题的答案是很显然的吧，如果你答错了，那绝对是2货行为&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="华为面经"></category></entry><entry><title>美团网校园招聘2014年面经(软件研发)</title><link href="http://www.yanyulin.info/pages/2014/03/meituan_2014_1.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/meituan_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;每一年的&lt;code&gt;九月与十月&lt;/code&gt;都是个心酸的日子，也是个收获的季节，&lt;/p&gt;
&lt;p&gt;在这个&lt;strong&gt;苦逼&lt;/strong&gt;的年代里，在这个为&lt;strong&gt;前途奔波&lt;/strong&gt;的季节，我也不例外，没有什么特殊的机遇，也是经历了一次又一次残酷的海选，海选固然残酷，可我们又能做什么，能做的就是一次又一次的迎头前近，失败了并不可怕，可怕的是失败了后却没有了站起来的勇气...&lt;/p&gt;
&lt;p&gt;现把我经历简单的分享给各位学弟学妹们，希望，学弟学妹们找工作都能够如愿以偿&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;a href="http://www.yanyulin.info" target="_blank"&gt;个人&lt;/a&gt;对美团感觉的相当不错，面试官非常好&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;一面：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、问了我下试卷上的题目&lt;/p&gt;
&lt;p&gt;2、然后问我linux内存管理&lt;/p&gt;
&lt;p&gt;3、STL相关的知识，STL里最起码的你要知道什么是&lt;strong&gt;关联容器&lt;/strong&gt;，什么是&lt;strong&gt;序列式容器&lt;/strong&gt;吧，还有其底层的实现吧&lt;/p&gt;
&lt;p&gt;4、然后让我写一个字符串中最长不重复字符串&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;二面：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、问了一个概率题，具体就不说了&lt;/p&gt;
&lt;p&gt;2、后面算法的问我了一个算法题目（自己出的）&lt;/p&gt;
&lt;p&gt;3、二叉树分层遍历，这个数据结构均有的，自已看看，没有的扔了此书吧，就是采用队列的方式实现&lt;/p&gt;
&lt;p&gt;4、数组中连续和最大值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这题题，好好看看编程之美与剑指offer,里面也有，下载链接，下面有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试书下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;
剑指offer下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" target="_blank"&gt;
程序员面试宝典下载
&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="美团面经"></category></entry><entry><title>去哪儿网校招笔试题2014年软研|测试|前端</title><link href="http://www.yanyulin.info/pages/2014/03/qunar_2014_A.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/qunar_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;一、编程题&lt;/p&gt;
&lt;p&gt;1、写一个函数，转换相对路径为绝对路径，例如输入路径为&lt;code&gt;/home/abs/../temp/new/../&lt;/code&gt;，输出路径为：&lt;code&gt;/home/temp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、题目的大概意思就是要求写出一个strcpy函数，用于字符串的复制&lt;/p&gt;
&lt;p&gt;3、题目的大概意思就是在海量数据中，如何求出前100个最小的数，大概就是这样的，解决方法是用堆&lt;/p&gt;
&lt;p&gt;4、一个10*10的矩阵（可以理解为棋盘），随时生成一组数据填入矩阵，任何一个位置的数字，除4进行计算，按照余数进行着色，余数为0着色为red，1为blue，2为green，3为black，可以理解为生成4种颜色的棋子放入棋盘，如果存在其中同色五星连珠的情况（规则通五子棋），找出任意一组，输出5个棋子的位置下标值&lt;/p&gt;
&lt;p&gt;5、数据库有考试成绩表scg,包含属性：&lt;/p&gt;
&lt;p&gt;存储ID 学号(sno) 科目(cno) 分数(grade)&lt;/p&gt;
&lt;p&gt;1 s001 c01 90&lt;/p&gt;
&lt;p&gt;2 s001 c02 72&lt;/p&gt;
&lt;p&gt;3 s002 c01 95&lt;/p&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;写SQL,求：&lt;/p&gt;
&lt;p&gt;a)分数少于60的学号和科目，要求有:学号、科目、分数&lt;/p&gt;
&lt;p&gt;b)超过2科分数&amp;gt;=90的人的学号和科目数，按科目数由大到小排序，要求有：学号、科目数(&amp;gt;=90分)&lt;/p&gt;
&lt;p&gt;c)每个人成绩最好的三个科目，按学号、分数排序，要求有：学号、科目、分数&lt;/p&gt;
&lt;p&gt;d)每科目，前2名的分数差:科目、第一名学号、第二名学号、第一分数、第二分数、分数差&lt;/p&gt;
&lt;p&gt;当数据来源为文本文件(tab分割)时，写程序求上题b/c/d,程序语言不限(shell/python/java等均可，或者使用伪代码描述计算步骤&lt;/p&gt;
&lt;p&gt;参考答案如下：&lt;/p&gt;
&lt;p&gt;a) &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;scg&lt;/span&gt;
&lt;span class="n"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;b)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;scg&lt;/span&gt;
&lt;span class="n"&gt;WHERE&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;90&lt;/span&gt;
&lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt; &lt;span class="n"&gt;HAVING&lt;/span&gt; &lt;span class="n"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="n"&gt;ORDER&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;COUNT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;c)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;  
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;scg&lt;/span&gt;
&lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt;
&lt;span class="n"&gt;ORDER&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;d)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;cno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sno&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;second&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt; 
&lt;span class="p"&gt;(&lt;/span&gt; 
&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;scg&lt;/span&gt; 
&lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;cno&lt;/span&gt; 
&lt;span class="n"&gt;ORDER&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;first&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
  &lt;span class="p"&gt;(&lt;/span&gt;
&lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;SELECT&lt;/span&gt; &lt;span class="n"&gt;TOP&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; 
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="n"&gt;scg&lt;/span&gt;
&lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;cno&lt;/span&gt;
&lt;span class="n"&gt;ORDER&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;grade&lt;/span&gt; &lt;span class="n"&gt;DESC&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;
&lt;span class="n"&gt;GROUP&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;cno&lt;/span&gt;
&lt;span class="n"&gt;ORDER&lt;/span&gt; &lt;span class="n"&gt;BY&lt;/span&gt; &lt;span class="n"&gt;two&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;grade&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;second&lt;/span&gt;
&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;欢迎大家将答案粘贴在后面的评论框里，我会选出最好的答案作为本题的标准答案，以方便更多的师弟师妹们&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="去哪网笔试题"></category></entry><entry><title>人人网校招笔试题2014年软件研发类</title><link href="http://www.yanyulin.info/pages/2014/03/renren_2014_A.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/renren_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;技术类笔试题&lt;/p&gt;
&lt;p&gt;1、给定一个有序数组a,长度为len,和一个数X,判断A数组里面是否存在两个数，他们的和为X&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;judge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;存在的话反回true,不存在的话返回false&lt;/p&gt;
&lt;p&gt;参考答案：&lt;/p&gt;
&lt;p&gt;解题思路：&lt;code&gt;hash table&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;时间复杂度：&lt;code&gt;O(N)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;空间复杂度：&lt;code&gt;O(N)&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;hash_table&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;

bool judge(int *a, int len, int x)
{
    memset(hash_table, 0, sizeof(hash_table));
    for (int i=0; i&lt;span class="nt"&gt;&amp;lt;len&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;hash_table&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="err"&gt;]&lt;/span&gt; &lt;span class="err"&gt;=&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;for&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;i=&lt;/span&gt;&lt;span class="s"&gt;0;&lt;/span&gt; &lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;len&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;hash_table&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt; &lt;span class="na"&gt;1&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;true&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;false&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;len =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;10;&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;{1,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;5&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;7&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;9&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;4&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;2&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;8&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;10&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;6&lt;/span&gt;&lt;span class="err"&gt;};&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;x =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;19;&lt;/span&gt;

    &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;judge&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;len&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;x&lt;/span&gt;&lt;span class="err"&gt;))&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;Yes&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;else&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;No&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="na"&gt;system&lt;/span&gt;&lt;span class="err"&gt;(&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;pause&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;);&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、给定有n个数的数组a,其中超过一半的数为一个定值，在不进行排序的情况下，不开设额外数组的情况下，以最高效的算法找出这个数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;参考答案：&lt;/p&gt;
&lt;p&gt;时间复杂度为O(n)&lt;/p&gt;
&lt;p&gt;空间复杂度为O(1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;

&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nb"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;a&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
    int count = 0;
    for (int i=0; i&lt;span class="nt"&gt;&amp;lt;n&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt; &lt;span class="err"&gt;++&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
    &lt;span class="err"&gt;{&lt;/span&gt;
        &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;count =&lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;t =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;;&lt;/span&gt;
            &lt;span class="na"&gt;count =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;1;&lt;/span&gt;
            &lt;span class="na"&gt;continue&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="na"&gt;else&lt;/span&gt;
        &lt;span class="err"&gt;{&lt;/span&gt;
            &lt;span class="na"&gt;if&lt;/span&gt; &lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="s"&gt;=&lt;/span&gt; &lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="err"&gt;)&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;count&lt;/span&gt;&lt;span class="err"&gt;++;&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
            &lt;span class="na"&gt;else&lt;/span&gt;
            &lt;span class="err"&gt;{&lt;/span&gt;
                &lt;span class="na"&gt;count--&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
            &lt;span class="err"&gt;}&lt;/span&gt;
        &lt;span class="err"&gt;}&lt;/span&gt;
    &lt;span class="err"&gt;}&lt;/span&gt;

    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;t&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;

&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;main&lt;/span&gt;&lt;span class="err"&gt;()&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;n =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;10;&lt;/span&gt;
    &lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt; =&lt;/span&gt;&lt;span class="err"&gt; &lt;/span&gt;&lt;span class="s"&gt;{1,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;2&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;4&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;3&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;6&lt;/span&gt;&lt;span class="err"&gt;};&lt;/span&gt;

    &lt;span class="na"&gt;cout&lt;/span&gt;&lt;span class="err"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;find&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;a&lt;/span&gt;&lt;span class="err"&gt;,&lt;/span&gt; &lt;span class="na"&gt;n&lt;/span&gt;&lt;span class="err"&gt;)&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="na"&gt;endl&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;

    &lt;span class="na"&gt;system&lt;/span&gt;&lt;span class="err"&gt;(&amp;quot;&lt;/span&gt;&lt;span class="na"&gt;pause&lt;/span&gt;&lt;span class="err"&gt;&amp;quot;);&lt;/span&gt;
    &lt;span class="na"&gt;return&lt;/span&gt; &lt;span class="na"&gt;0&lt;/span&gt;&lt;span class="err"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、人人网最近在研发一个攒人口的新功能，用于回馈长期支持人人网的用户，人品值标识着用户在人人网的尊贵程序，除此之外它还有一个更经济的功能，第一个获得100万人品值的用户将获得一份人人网的实物大奖，攒人品的规则是这样的，人人网首先会给每个老用户发放一个【自动攒人品的手】，每秒种可以自动获得1点人品（且人品值是随着时间连续获得的，即每0.5秒就会获得0.5点人品值）。人品值可以用来兑换各种各样的加速攒人品的道具，道具列表及价如如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/renren_2014_A.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/job/renren0.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;a)如果每一种道具可购买无限多次，效果叠加，作为人人网的一名老用户且有钻研精神的你，对这场人品竞赛是志在必得，因此在功能上线前提前想好了最佳方案以便确保成位第一位获得100万人品的用户，请给最快攒到100万人品的策略&lt;/p&gt;
&lt;p&gt;b)如果每一种道具可购买无限多次，效果叠加，但每一次购买后该道具会成原来价格的1.2倍，请给出最快攒到100万人品的策略&lt;/p&gt;
&lt;p&gt;参考值：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log(1000000)=75.78&lt;/code&gt; 备注log底数为1.2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log(7000)=45.56&lt;/code&gt; 备注log底数为1.2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log(2000)=41.69&lt;/code&gt; 备注log底数为1.2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log(500)=34.09&lt;/code&gt; 备注log底数为1.2&lt;/p&gt;
&lt;p&gt;&lt;code&gt;log(100)=25.26&lt;/code&gt; 备注log底数为1.2&lt;/p&gt;</summary><category term="人人网笔试题"></category></entry><entry><title>威盛电子校园招聘面经2014年软件面经</title><link href="http://www.yanyulin.info/pages/2014/03/weconnect_2014_1.html" rel="alternate"></link><updated>2014-03-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-08:pages/2014/03/weconnect_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;威盛电子&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;威盛电子股份有限公司&lt;/strong&gt;是台湾地区的积体电路设计公司，主要生产主机板的晶片组、中央处理器(CPU)、以及记忆体。它是世界上最大的独立主机板晶片组设计公司。作为一个无晶圆厂半导体厂商（fabless），VIA主要在研究与发展他的晶片组，然后将晶圆制造外包给晶圆厂进行...&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点，面试感觉&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;共有3面技术面，然后最后一面是HR面，加起来总共是4面,工资就不透露了，肯定是没互联网公司高&lt;/p&gt;
&lt;p&gt;由于我投的是嵌入式，所以各种问我&lt;code&gt;linux kernel&lt;/code&gt;以及&lt;code&gt;andriod&lt;/code&gt;，其实主要的也就是涉及到Linux下层的内层管理，以及调度算法这一块,当然中间问了一些比较简单算法题目，如以下问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、写了个冒泡排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;冒泡排序也有是有效率可言的，大家要把情况考虑详细，如序列已经有序的情况下，冒泡排序的时间复杂度为O(n)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、实现一个算法，该算法可以求出链表倒数第k个节点（说白了就是快慢指针的问题）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;还是那句好，还是好好看看下面这两本书，不多说&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试书下载&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;
剑指offer下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" target="_blank"&gt;
程序员面试宝典下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、然后singleton&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;设计模式中最简单的一种，也是面试中最常让写的一种，因为代码量少，而且很容易考察人思维是否周到&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary><category term="其他面经"></category></entry><entry><title>阿里巴巴校招面经(2014年软件研发)</title><link href="http://www.yanyulin.info/pages/2014/03/ali_3.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/ali_3.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;阿里巴巴的面试共分为三面，如果进不了第三面，基本上就是挂了的节奏&lt;/p&gt;
&lt;p&gt;这是我的&lt;a href="http://www.yanyulin.info" title="烟雨林博客"&gt;处男面&lt;/a&gt;啊，第一次就这么没了&lt;/p&gt;
&lt;p&gt;我面了总共有2面&lt;/p&gt;
&lt;p&gt;第一面面技术：&lt;/p&gt;
&lt;p&gt;先问了我一下项目，由于我做&lt;code&gt;ASIC&lt;/code&gt;的，估计他兴趣也不大，问了如下问题：&lt;/p&gt;
&lt;p&gt;1、字符串编辑距离&lt;/p&gt;
&lt;p&gt;2、写出二分查找算法，以及在什么时候会形成死循环&lt;/p&gt;
&lt;p&gt;3、linux进程同步&lt;/p&gt;
&lt;p&gt;4、当发生hash冲突的时候，有什么解决办法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这道题很简单，数据结构上都有，没有的，扔了它，重新买一本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二面：&lt;/p&gt;
&lt;p&gt;1、还是问了我项目&lt;/p&gt;
&lt;p&gt;2、让我写一个字符串比较函数strcmp，&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个也简单，但是要注间的边界条件的判断，写程序思维要严谨&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、问了我&lt;code&gt;bloom filter&lt;/code&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;搜索引擎中经常使用的一种算法，主要用于判断某个url是否已经拜访过，或者在处理垃圾邮件中也经常使用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;感觉整体还可以，可能项目不太相关，没有给我&lt;code&gt;offer&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="阿里面经"></category></entry><entry><title>百度校招面经2014年软研面经</title><link href="http://www.yanyulin.info/pages/2014/03/baidu_2.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/baidu_2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;百度面试共分为三面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;二面技术&lt;/p&gt;
&lt;p&gt;一面boss面&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我对百度的印象比较好，由于我不是科班出生，所以在项目方项基本上没问什么，这点很到位，不像我面阿里巴巴，说一句，百度人真的很不错&lt;/p&gt;
&lt;p&gt;一面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、给你一个整数，找出大于这个数的最小不重复的数，不重复数定义为各位没有连续相同的数。例如，11230是重复的数，12121是不重复的数。 &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;暴力破解的人肯定是挂&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、将整数转成字符串，写出代码；&lt;/p&gt;
&lt;p&gt;3、考查二分查找算法，求恰好大于某个数的数，其实就是用二分法求上界。写出代码；&lt;/p&gt;
&lt;p&gt;4、链表翻转写出代码，这个是考了多少遍臭题，三个指针即可实现；&lt;/p&gt;
&lt;p&gt;5、STL的容器讲解，怎么实现的。包括序列容器和关联容器（内存存局上有内存存，关联容器采用的是红黑树实现较多）；&lt;/p&gt;
&lt;p&gt;6、java的自动回收机制怎么实现的（堆加收的三种实现策略）；&lt;/p&gt;
&lt;p&gt;7、TCP三次握手，怎么关闭连接的（常考的题目）。&lt;/p&gt;
&lt;p&gt;8、linxu进程调度相关的问题；&lt;/p&gt;
&lt;p&gt;9、linux内存管理相关的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这面我大概面了一个多小时，总之可以看出百度考得很广。&lt;/p&gt;
&lt;p&gt;二面:是个美女面试官，我至今记忆尤新，感谢这位前辈，我首先简单的讲了项目吧，然后开始问问题：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、三次握手；&lt;/p&gt;
&lt;p&gt;2、插入排序写出代码；&lt;/p&gt;
&lt;p&gt;3、考了大数据（曾经遇到一个硕士，尽然不知道什么叫大数据~~）；&lt;/p&gt;
&lt;p&gt;4、求了一道概率题；&lt;/p&gt;
&lt;p&gt;5、一个数组存储了0到n中缺了一个数，怎么求出来；&lt;/p&gt;
&lt;p&gt;6、一个数组存储了0到n中缺了2个数，又怎么求出来；&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;三面&lt;/p&gt;
&lt;p&gt;项目经理面，主要问了我下项目，然后问了下我TCP四次握手。算法不怎么问，主要考察你这个人，他想不想要。&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="百度面经"></category></entry><entry><title>2014年百度校招笔试题(移动研发类)</title><link href="http://www.yanyulin.info/pages/2014/03/baidu_2014_B.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/baidu_2014_B.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人，也欢迎大家将答案粘贴到评论框里，我会挑选出最好的答案，做为问题答案&lt;/p&gt;
&lt;p&gt;百度2014年移动研发类这套试题和软研考的差不多，这套试题在清华考过，然后在沈阳也考过，不知道是什么情况，我参加了沈阳的，感觉重复好多&lt;/p&gt;
&lt;p&gt;一、简答题&lt;/p&gt;
&lt;p&gt;1、简述计算机的存储系统分为哪几个层次，为什么这样的分层能够提高程序的执行效率。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前，在计算机系统中通常采用三级层次结构来构成存储系统，主要由高速缓冲存储器Cache、主存储器和辅助存储器组成,存储系统多级层次结构中，由上向下分三级，其容量逐渐增大，速度逐级降低，成本则逐次减少,整个结构又可以看成两个层次：它们分别是主存一辅存层次和cache一主存层次,一个较大的存储系统是由各种不同类型的存储设备构成，是一个具有多级层次结构的存储系统。该系统既有与CPU相近的速度，又有极大的容量，而成本又是较低的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、浮点数在计算中如何表示，如何判断两个浮点数相等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;浮点数在计算机如何表示，大家可以自已百度去，一般就是拆分成指数、尾数的形式，对于判断两个浮点数是否相等，切记不能直接使用==进行判断，浮点数之间相等的判断一般是两数相减，看相减后两数之间差值的绝对值是否在我们约定的误差范围之内，如果在误范围之内，就表示我们可以接受，就认为这两个浮点数是相等的，否则就认为这两个浮点数是不等的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、简述TCP与UDP协议的差别，两者与HTTP的关系。并列举HTTP的方法，以及常见的&lt;code&gt;返回状态码&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;二、算法与程序设计题&lt;/p&gt;
&lt;p&gt;1.设计一个反转字符串的函数&lt;code&gt;char *reverse_str(char *str)&lt;/code&gt;,不使用系统函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;算法思想，设计两个指针，分别指向字符串的两头，然后从字符串的两头向中间靠近，在靠近的过程中，对两指针指向的字符作交换，即可，简单题目，大家不可失分&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.给定一个字符串,&lt;code&gt;（1，（2，3），（4，（5，6），7））&lt;/code&gt;,使它变为&lt;code&gt;（1，2，3，4，5，6，7）&lt;/code&gt;，设计一个算法消除其中嵌套的括号。(c/c++)&lt;/p&gt;
&lt;p&gt;3.使用C语言实现&lt;code&gt;htonl&lt;/code&gt;（将long型的数据转化为网络字节码），不可以使用系统自带的函数进行处理。&lt;/p&gt;
&lt;p&gt;三、系统设计题&lt;/p&gt;
&lt;p&gt;面向对象是一种思想，使用C语言来实现下列问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、如何定义一个类？&lt;/p&gt;
&lt;p&gt;2、如何创建以及销毁对象？&lt;/p&gt;
&lt;p&gt;3、如何实现类的继承？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;本篇答案不全，希望有时间的同学补全&lt;/strong&gt;&lt;/p&gt;</summary><category term="百度笔试题"></category></entry><entry><title>Linux系统中并发与竞争机制分析</title><link href="http://www.yanyulin.info/pages/2014/03/concurrent.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/concurrent.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;现代&lt;code&gt;Linux&lt;/code&gt;系统中有相非常多的并发源，导致的问题就是并发与竞争，多个并发源竞争同一个共享数据
竞争的情况来自对资源的共享存取结果，当多个线程操作同一数据结构时，混乱就可能存在，在驱动编程中尽量避免共享资源，采用的方法通常是加锁机制。&lt;/p&gt;
&lt;p&gt;共享资源的互斥&lt;/p&gt;
&lt;p&gt;&lt;code&gt;PV&lt;/code&gt;操作：PV操作实际上是对一个整形值进行操作，一个想进入临界区获取共享资源的进程调用P操作，如果整形值大于0,将整形值减1，获取共享资源，否则等待，使用完后调用V操作，将整形值增1，唤醒等待的进程&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;下PV实现：&lt;/p&gt;
&lt;p&gt;要使用PV操作，必须包含&lt;code&gt;&amp;lt;linux/semaphore.h&amp;gt;,&lt;/code&gt;相关的数据类型是&lt;code&gt;struct semaphore&lt;/code&gt;,PV操作要进行创建然后初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kr"&gt;inline&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sema_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//val是pv操作的初始整形值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;PV操作一般用于互斥，因此内核提供了如下的宏定义进行申明&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define DECLARE_MUTEX(name)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果PV操作必须在运行时初始化，内核提供了如下操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define init_MUTEX(sem)     sema_init(sem, 1)&lt;/span&gt;
&lt;span class="c"&gt;#define init_MUTEX_LOCKED(sem)  sema_init(sem, 0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Linux中P操作对应如下三个函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;down&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//P操作递减整形值，如果没有，等待&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__must_check&lt;/span&gt; &lt;span class="nf"&gt;down_interruptible&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//P操作递减整形值，允许&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用户可中断&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__must_check&lt;/span&gt; &lt;span class="nf"&gt;down_trylock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//P操作不成功，立刻返回，不等待&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;V操作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;up&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//信号使用完毕之后必须要返还给系统&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;读者写者的PV操作&lt;/p&gt;
&lt;p&gt;Linux内核为这种情况提供了一个特殊的类型rwsem(在linux/rwsem.h中)，rwsem必须在运行时显示的初始化&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Void&lt;/span&gt; &lt;span class="n"&gt;init_rwsem&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;rw_semaphore&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sem&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Completion机制&lt;/p&gt;
&lt;p&gt;Completion是任务使用的一个轻量级机制，允许一个线程告诉另一个线程工作已完成，为使用completion你的代码必须包括&lt;code&gt;&amp;lt;linux/completion.h&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;DECLARE_COMPLETION(name)创建completion&lt;/p&gt;
&lt;p&gt;自旋锁简介&lt;linux/spinlock.h&gt;类型为spinlock_t,同任何其他类型一样，自旋锁必须要初始化，注意所有的自旋锁都是不可中断的，一旦你调用 spin_lock你将自旋直到锁变为可用。&lt;/p&gt;
&lt;p&gt;对自旋锁进行操作的相关函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#define spin_lock_irq(lock)     _spin_lock_irq(lock)&lt;/span&gt;
&lt;span class="c"&gt;#define spin_lock_bh(lock)      _spin_lock_bh(lock)//获得锁之前禁止软件中断&lt;/span&gt;
&lt;span class="c"&gt;#define spin_lock_irqsave(lock, flags)  //获得锁之间禁止中断，之前的中断保存在flag里   &lt;/span&gt;
&lt;span class="c"&gt;#define spin_trylock(lock)  &lt;/span&gt;
&lt;span class="c"&gt;#define spin_lock(lock)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有四个方法来释放自旋锁&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;# define spin_unlock(lock)      _spin_unlock(lock)&lt;/span&gt;
&lt;span class="c"&gt;# define read_unlock(lock)      _read_unlock(lock)&lt;/span&gt;
&lt;span class="c"&gt;# define write_unlock(lock)     _write_unlock(lock)&lt;/span&gt;
&lt;span class="c"&gt;# define spin_unlock_irq(lock)      _spin_unlock_irq(lock)&lt;/span&gt;
&lt;span class="c"&gt;# define read_unlock_irq(lock)      _read_unlock_irq(lock)&lt;/span&gt;
&lt;span class="c"&gt;# define write_unlock_irq(lock)     _write_unlock_irq(lock)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;非阻塞的自旋锁操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;spin_trylock&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;spinlock_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;Int&lt;/span&gt; &lt;span class="n"&gt;spin_trylock_bh&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;spinlock_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这些函数成功时返回非零，否则0，没有try版本来禁止中断&lt;/p&gt;
&lt;p&gt;一个完整的加锁体制对于一个简单的整数值有点过分，对于这样的情况，内核提供了一个原子整数类型称为atomic_t定义在,&lt;code&gt;&amp;lt;asm/atomic.h&amp;gt;&lt;/code&gt;中&lt;/p&gt;</summary><category term="Linux汇总"></category></entry><entry><title>创新工场2013年校园招聘笔试题(研发)</title><link href="http://www.yanyulin.info/pages/2014/03/cxgc_2013_A.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/cxgc_2013_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一部份选择题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、假设系统有A类资源m个，现在有n个进程需要互斥使用A类资源，而每个进程对A类资源的最大需求为w，哪种情况一定不会发生死锁？&lt;/p&gt;
&lt;p&gt;A)m=80,n=20,w=5&lt;/p&gt;
&lt;p&gt;B)m=101 ,n=20 ,w=6&lt;/p&gt;
&lt;p&gt;C)m=55 ,n=10 ,w=7&lt;/p&gt;
&lt;p&gt;D)m=201 ,n=30 ,w=8&lt;/p&gt;
&lt;p&gt;2、以下关于IPv4和IPv6的说法，错误的是( ）。&lt;/p&gt;
&lt;p&gt;A） IPv4采用32位地址，IPv6采用了128位地址长度&lt;/p&gt;
&lt;p&gt;B） 使用IPv6替代IPv4的原因是因为IPv4已经不够用了&lt;/p&gt;
&lt;p&gt;C） IPv6由于位数多，数据量大，导致路由转发数据包的速度慢&lt;/p&gt;
&lt;p&gt;D） IPv6的安全性要低于IPv4&lt;/p&gt;
&lt;p&gt;3、设有一顺序栈S,元素s1，s2，s3，s4，s5，s6依次进栈，如果6个元素出栈的顺序是s2，s3，s4，s6，s5，s1，则栈的容量至少应该是&lt;/p&gt;
&lt;p&gt;A) 2&lt;/p&gt;
&lt;p&gt;B) 3&lt;/p&gt;
&lt;p&gt;C) 5&lt;/p&gt;
&lt;p&gt;D) 6&lt;/p&gt;
&lt;p&gt;4、某二叉树的前序序列和后序序列正好相反，则该二叉树一定是()的二叉树&lt;/p&gt;
&lt;p&gt;A)空或只有一个结点    B)任一结点无左子树    C)高度等于其结点数    D)任一结点无右子树&lt;/p&gt;
&lt;p&gt;5、现在需要将整数a的二进制表式形式中最右边的1变成0，下列哪一个表达式可以完成这个任务&lt;/p&gt;
&lt;p&gt;A) a^(a+1)   B)a&amp;amp;(a+1)      C)a^(a-1)       D)a&amp;amp;(a-1)&lt;/p&gt;
&lt;p&gt;6、关于面向对象，下列说法错误的是&lt;/p&gt;
&lt;p&gt;A)面向对象的三大特征依次是封装、继承、多态&lt;/p&gt;
&lt;p&gt;B)继承并不一定能让子类访问父类的所有属性&lt;/p&gt;
&lt;p&gt;C)多态的实现方式包括静态绑定和动态绑定 &lt;/p&gt;
&lt;p&gt;D)基于原型的面向对象语言认为每个类本身都是一个对象&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二部分填空题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、以下程序运行时屏幕输出的结果是?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%ld%,sum);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、找出下列C代码中的错误之处，并进行修改？&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;in&lt;/span&gt;  &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、当在浏览器中输入一个url后，发生以下步骤，请填写完整所有的步骤&lt;/p&gt;
&lt;p&gt;1)浏览器请求DNS服务器，解析请求的url的IP地址&lt;/p&gt;
&lt;p&gt;2)DNS服务器返回IP地址给浏览器&lt;/p&gt;
&lt;p&gt;3)（）&lt;/p&gt;
&lt;p&gt;4)浏览器获得所请求的url的html代码&lt;/p&gt;
&lt;p&gt;5)浏览器在窗口显示所获得的html代码&lt;/p&gt;
&lt;p&gt;6)窗口关闭，（）&lt;/p&gt;
&lt;p&gt;4、阅读下面的程序段，写出输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Base f(int):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Base f(double):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Base&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nl"&gt;public:&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Derived f(int):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Derived f(double):&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;Base&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;derive&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Derived&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;derive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;derive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;5.5&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;第三部分编程题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、设计一个算法，编程实现去掉一个字符串里的重复字符，要求不能额外开辟内存空间&lt;/p&gt;
&lt;p&gt;2、设X[1:n]是由不同实数组成的数组，如果i&lt;j且X[i]&gt;X[j],则称实数对(X[i],X[j])是该数组的一个反序，如，若X=[3,5,2,4],则该数组存在3个反序，（3，2）、（5，2）和(5,4),反序的个数可以用来衡量一个数组的无序程序，请设计一个算法并用代码实现，计算给定数组的反序个数，并分析算法的时间复杂度。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="创新工场笔试题"></category></entry><entry><title>剑指Offer书籍PDF下载及简介</title><link href="http://www.yanyulin.info/pages/2014/03/offer.html" rel="alternate"></link><updated>2014-03-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-07:pages/2014/03/offer.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;剑指offer PDF格式下载:&lt;a href="http://pan.baidu.com/s/1hq0wGy4" target="_blank" title="《剑指offer》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下载密码为&lt;code&gt;t3ku&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;书评&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;剑指&lt;code&gt;offer&lt;/code&gt;一书，写的还可以，与编程之美相比，程序看起来更像是作者本人所写，编程之美上的程序代码实现个人觉的实在不怎么的，感觉就像是实习生写的，但是撇开代码的实现，光去分研其算法的思想，编程之美也算是一本好书，剑指offer一书，开篇介绍的是面试前的准备，涉及了简历、电话面试、以及现场面试，在第一章中作者给出的面试经验还是非常值的学习以及分析，特别是面试者经常犯的一些比较2的问题，如面完一面后就问工资如何，我能被录用嘛，等等，书中的后面几章均是一些算法的实现，这些算法也是面试官经常问的一些算法，对于面试者特别是应届毕业生来说，最好都要能熟练胡写出来。&lt;/p&gt;
&lt;p&gt;剑指offer--何海涛&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;内容简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;剑指Offer:名企面试官精讲典型编程题剖析了50个典型的程序员面试题，从基础知识、代码质量、解题思路、优化效率和综合能力五个方面系统整理了影响面试的5个要点。&lt;/p&gt;
&lt;p&gt;全书分为7章，主要包括面试的流程，讨论面试流程中每一环节需要注意的问题；面试需要的基础知识，从编程语言、数据结构及算法三方面总结了程序员面试的知识点；高质量的代码，讨论影响代码质量的3个要素，强调高质量的代码除了能够完成基本的功能之外，还能考虑到特殊情况并对非法输入进行合理的处理；解决面试题的思路，总结在编程面试中解决难题的常用思路。&lt;/p&gt;
&lt;p&gt;第1章 面试的流程 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 面试官谈面试 1&lt;/p&gt;
&lt;p&gt;1.2 面试的三种形式 2&lt;/p&gt;
&lt;p&gt;1.2.1 电话面试 2&lt;/p&gt;
&lt;p&gt;1.2.2 共享桌面远程面试 3&lt;/p&gt;
&lt;p&gt;1.2.3 现场面试 4&lt;/p&gt;
&lt;p&gt;1.3 面试的三个环节 5&lt;/p&gt;
&lt;p&gt;1.3.1 行为面试环节 5&lt;/p&gt;
&lt;p&gt;1.3.2 技术面试环节 10&lt;/p&gt;
&lt;p&gt;1.3.3 应聘者提问环节 17&lt;/p&gt;
&lt;p&gt;1.4 本章小结 18&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第2章 面试需要的基础知识 20&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1 面试官谈基础知识 20&lt;/p&gt;
&lt;p&gt;2.2 编程语言 22&lt;/p&gt;
&lt;p&gt;2.2.1 C++ 22&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题1：赋值运算符函数 24&lt;/p&gt;
&lt;p&gt;经典的解法，适用于初级程序员 25&lt;/p&gt;
&lt;p&gt;考虑异常安全性的解法，高级程序员必备 26&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.2.2 C# &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题2：实现Singleton模式 31&lt;/p&gt;
&lt;p&gt;不好的解法一：只适用于单线程 31&lt;/p&gt;
&lt;p&gt;不好的解法二：可用于多线程但效率不高 32&lt;/p&gt;
&lt;p&gt;可行的解法：同步锁前后两次判断 33&lt;/p&gt;
&lt;p&gt;推荐的解法一：利用静态构造函数 34&lt;/p&gt;
&lt;p&gt;推荐的解法二：按需创建实例 34&lt;/p&gt;
&lt;p&gt;解法比较 35&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.3 数据结构 36&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.3.1 数组 36&lt;/p&gt;
&lt;p&gt;面试题3：二维数组中的查找 38&lt;/p&gt;
&lt;p&gt;2.3.2 字符串 42&lt;/p&gt;
&lt;p&gt;面试题4：替换空格 44&lt;/p&gt;
&lt;p&gt;O(n2)的解法，不足以拿到Offer 45&lt;/p&gt;
&lt;p&gt;O(n)的解法，搞定Offer就靠它 46&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.3.3 链表 49&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题5：从尾到头打印链表 51&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.3.4 树 53&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题6：重建二叉树 55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.3.5 栈和队列 58&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题7：用两个栈实现队列 59&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.4 算法和数据操作 62&lt;/p&gt;
&lt;p&gt;2.4.1 查找和排序 63&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题8：旋转数组的最小数字 66&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.4.2 递归和循环 71&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题9：斐波那契数列 73&lt;/p&gt;
&lt;p&gt;效率很低的解法，面试官不会喜欢 73&lt;/p&gt;
&lt;p&gt;面试官期待的实用解法 74&lt;/p&gt;
&lt;p&gt;O(logn)但不够实用的解法 74&lt;/p&gt;
&lt;p&gt;解法比较 75&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.4.3 位运算 77&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题10：二进制中1的个数 78&lt;/p&gt;
&lt;p&gt;可能引起死循环的解法 79&lt;/p&gt;
&lt;p&gt;常规解法 79&lt;/p&gt;
&lt;p&gt;能给面试官带来惊喜的解法 80&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2.5 本章小结 82&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第3章 高质量的代码 84&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1 面试官谈代码质量 84&lt;/p&gt;
&lt;p&gt;3.2 代码的规范性 86&lt;/p&gt;
&lt;p&gt;3.3 代码的完整性 87&lt;/p&gt;
&lt;p&gt;3.4 代码的鲁棒性 106&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题15：链表中倒数第k个结点 107&lt;/p&gt;
&lt;p&gt;面试题16：反转链表 112&lt;/p&gt;
&lt;p&gt;面试题17：合并两个排序的链表 114&lt;/p&gt;
&lt;p&gt;面试题18：树的子结构 117&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.5 本章小结 121&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4章 解决面试题的思路 123&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题19：二叉树的镜像 125&lt;/p&gt;
&lt;p&gt;面试题20：顺时针打印矩阵 127&lt;/p&gt;
&lt;p&gt;面试题21：包含min函数的栈 132&lt;/p&gt;
&lt;p&gt;面试题22：栈的压入、弹出序列 134&lt;/p&gt;
&lt;p&gt;面试题23：从上往下打印二叉树 137&lt;/p&gt;
&lt;p&gt;面试题24：二叉搜索树的后序遍历序列 140&lt;/p&gt;
&lt;p&gt;面试题25：二叉树中和为某一值的路径 143&lt;/p&gt;
&lt;p&gt;面试题26：复杂链表的复制 147&lt;/p&gt;
&lt;p&gt;面试题27：二叉搜索树与双向链表 151&lt;/p&gt;
&lt;p&gt;面试题28：字符串的排列 154&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第5章 优化时间空间效率 160&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题29：数组中出现次数超过一半的数字 163&lt;/p&gt;
&lt;p&gt;基于Partition函数的O(n)算法 163&lt;/p&gt;
&lt;p&gt;利用数组特点的O(n)算法 165&lt;/p&gt;
&lt;p&gt;解法比较 166&lt;/p&gt;
&lt;p&gt;面试题30：最小的k个数 167&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;O(n)的算法，只当可以修改输入数组时可用 167&lt;/p&gt;
&lt;p&gt;O(nlogk)的算法，适合处理海量数据 168&lt;/p&gt;
&lt;p&gt;解法比较 169&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题31：连续子数组的最大和 171&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;举例分析数组的规律 171&lt;/p&gt;
&lt;p&gt;应用动态规划法 173&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题32：从1到n整数中1出现的次数 174&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不考虑效率的解法，想拿Offer有点难 174&lt;/p&gt;
&lt;p&gt;明显提高效率的解法，让面试官耳目一新 175&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题33：把数组排成最小的数 177&lt;/p&gt;
&lt;p&gt;面试题34：丑数 182&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;逐个判断整数是不是丑数的解法 182&lt;/p&gt;
&lt;p&gt;创建数组保存已经找到的丑数的解法 183&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题35：第一个只出现一次的字符 186&lt;/p&gt;
&lt;p&gt;面试题36：数组中的逆序对 189&lt;/p&gt;
&lt;p&gt;面试题37：两个链表的第一个公共结点 193&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第6章 面试中的各项能力 198&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.1 面试官谈能力 198&lt;/p&gt;
&lt;p&gt;6.2 沟通能力和学习能力 200&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;沟通能力 200&lt;/p&gt;
&lt;p&gt;学习能力 200&lt;/p&gt;
&lt;p&gt;善于学习、沟通的人也善于提问 201&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.3 知识迁移能力 203&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题38：数字在排序数组中出现的次数 204&lt;/p&gt;
&lt;p&gt;面试题39：二叉树的深度 207&lt;/p&gt;
&lt;p&gt;重复遍历结点的解法，不足以打动面试官 209&lt;/p&gt;
&lt;p&gt;只遍历结点一次的解法，正是面试官喜欢的 209&lt;/p&gt;
&lt;p&gt;面试题40：数组中只出现一次的数字 211&lt;/p&gt;
&lt;p&gt;面试题41：和为s的两个数字VS和为s的连续正数序列 214&lt;/p&gt;
&lt;p&gt;面试题42：翻转单词顺序 VS左旋转字符串 218&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.4 抽象建模能力 222&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题43：n个骰子的点数 223&lt;/p&gt;
&lt;p&gt;基于递归求骰子点数，时间效率不够高 223&lt;/p&gt;
&lt;p&gt;基于循环求骰子点数，时间性能好 224&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题44：扑克牌的顺子 226&lt;/p&gt;
&lt;p&gt;面试题45：圆圈中最后剩下的数字 228&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;经典的解法，用循环链表模拟圆圈 229&lt;/p&gt;
&lt;p&gt;创新的解法，拿到Offer不在话下 230&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.5 发散思维能力 232&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;面试题46：求1+2+…+n 233&lt;/p&gt;
&lt;p&gt;利用构造函数求解 234&lt;/p&gt;
&lt;p&gt;利用虚函数求解 234&lt;/p&gt;
&lt;p&gt;利用函数指针求解 235&lt;/p&gt;
&lt;p&gt;利用模板类型求解 236&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;面试题47：不用加减乘除做加法 237&lt;/p&gt;
&lt;p&gt;面试题48：不能被继承的类 239&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;常规的解法：把构造函数设为私有函数 239&lt;/p&gt;
&lt;p&gt;新奇的解法：利用虚拟继承 240&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6.6 本章小结 241&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第7章 两个面试案例 243&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7.1 案例一：（面试题49）把字符串转换成整数 244&lt;/p&gt;
&lt;p&gt;7.2 案例二：（面试题50）树中两个结点的最低公共祖先 252&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="面试书"></category></entry><entry><title>一款自动发链接的软件设计思路</title><link href="http://www.yanyulin.info/pages/2014/03/zhihu_1.html" rel="alternate"></link><updated>2014-03-06T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-06:pages/2014/03/zhihu_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;快毕业了，看了看那些年为了赚点钱自已干的蠢事，看了看自已电脑上的几款自已写的软件，虽然不是很完美，但删掉也实在可惜，于是起笔，记录在自已的&lt;a href="http://www.yanyulin.info"&gt;个人博客&lt;/a&gt;上，供&lt;code&gt;有缘人&lt;/code&gt;参阅，以及完善，今天分享的是一款在&lt;code&gt;知乎&lt;/code&gt;上群发链接的软件，&lt;code&gt;知乎&lt;/code&gt;是一个神圣的论坛，其实挺不错的，却被我这样的程序员糟蹋了，&lt;strong&gt;有罪呀&lt;/strong&gt;，现在不谈这些，只谈技术~~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;写此软件原由&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最大的原因是学生时代&lt;strong&gt;缺钱&lt;/strong&gt;，需求就是能够实现在高权重的论坛上群发链接，进行网站的推广~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;设计思路&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1、开发语言的选取，我会&lt;code&gt;C/C++/Java/Python&lt;/code&gt;,这种网络性的软件非Java/Python莫属，当然C++绝对也能够实现，但是实现起来的困难程序不同，最终选用了Java开发语言&lt;/p&gt;
&lt;p&gt;2、开源Jar包的选取，自动发链接软件实质上就是要模拟浏览器的登录，归结到底就是要模拟&lt;code&gt;POST/GET&lt;/code&gt;请求，Java本身提供了&lt;code&gt;URL jar&lt;/code&gt;包，但模拟浏览器的登录过程中还要操作Cookie,非常不便，于是弃之，目前开源的Jar包基本上都是由Apache组织提供，比较流行的有HttpClient/HtmlUnit,权衡再三，选择了HtmlUnit&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;HtmlUnit&lt;/strong&gt;是啥?HtmlUnit实质上就是一个Java版的浏览器，只不过这个浏览器没有图形界面，也正是因为其没有图形界面，因此速度还算可以，支持JavaScript,但支持能力比较有限，基本上可以满足要求，HtmlUnit的详细使用以及下载可以参考这篇文章&lt;a href="http://www.yanyulin.info/pages/2013/11/fetchPage.html" target="_blank"&gt;爬虫的自我解剖(抓取网页HtmlUnit)&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、模拟浏览器登录后，在知乎上回答问题，如果每一个问题都由用户来回答，不如不做，可是如果直接贴上链接，什么也不做，那么被删的可能性就太大了，最好的办法就是要回答问题，而且最好要答的差不多才行，该怎么解决呢？百度知道给我们提供了最好的解决办法，将问题放在百度知道里，搜一遍，再粘贴到知乎上不就行了嘛&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;最好的方法就是将要推广的网站链接写在此处：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_1.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/zhihu1.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4、是的，&lt;strong&gt;百度知道确实是一个好方法&lt;/strong&gt;，但是一台机器如果频繁的搜索百度知道，就会被百度知道封锁，需要输入验证码，验证码是个非常可怕的东西，解决方法就是在百度知道里查询，但是不访问具体的内容，即如下图所示：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_1.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/zhihu2.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;上图中，直接将红色方框里的内容粘贴到知乎上进行回复，不要点进入查看详细内容，否则会由于频繁访问，要被百度封锁，结果等待你的就是无情的验证码了~~~&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5、如果一个问题已经回答过了，要避免再次回答这个问题，知乎中限制了一个用户对一个问题只能回答一次，自动发链接肯定得注册多个帐号，如果每个帐号都对同一个问题回答一次，结果就是帐号很容易被封&lt;/p&gt;
&lt;p&gt;6、最后是一个统计功能，软件要能统计出成功发出了多少链接，发送失败了多少&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;到此为止，这就是整个软件设计过程中需要考虑的问题，&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_2.html" target="_blank"&gt;
下一篇将会介绍软件的实现
&lt;/a&gt;&lt;/p&gt;</summary><category term="实用工具"></category></entry><entry><title>一款自动发链接软件的实现细节分析</title><link href="http://www.yanyulin.info/pages/2014/03/zhihu_2.html" rel="alternate"></link><updated>2014-03-06T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-06:pages/2014/03/zhihu_2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;源码下载&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://pan.baidu.com/s/1mgG38yk" target="_blank"&gt;
自动发链接软件下载
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;阅读此篇博文之前，可以参阅上一篇博文&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_1.html" target="_blank"&gt;一款自动发链接的软件设计思路&lt;/a&gt;，了解该软件的设计思路以及要解决的技术点，和为什么选择Java这种开发语言。&lt;/p&gt;
&lt;p&gt;设计步骤：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;模拟浏览器的登录&lt;/strong&gt;，HtmlUnit如何模拟浏览器的登录，可以参考这篇文章
&lt;a href="http://www.yanyulin.info/pages/2013/11/fetchPage.html" target="_blank"&gt;爬虫的自我解剖(抓取网页HtmlUnit)&lt;/a&gt;,由于HtmlUnit本身对JavaScript的支持不是好好，而且也没有必要去加载网页的CSS文件，因此在使用HtmlUnit之前进行相关的配置，禁用CSS以及JavaScript,代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BrowserVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setCssEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setActiveXNative&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setAppletEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setPopupBlockerEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setThrowExceptionOnScriptError&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setPrintContentOnFailingStatusCode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、经过了上述设置之后即禁用了CSS/JS和一些其他相关的插件，下面分析一下Post请求里的相关参数，打开Chrome浏览器，在网页的登录按钮旁点击审查元素，即可查看该处附近的相关html代码，相关Html代码如下所示(只列出比较关心的部份)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email input-wrapper&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;email&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;邮箱&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;input-wrapper&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;input&lt;/span&gt; &lt;span class="na"&gt;required=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;name=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;maxlength=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;128&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;placeholder=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;密码&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;button-wrapper command&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;button&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sign-button&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;登录&lt;span class="nt"&gt;&amp;lt;/button&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上述的代码中可以看出Post请求里需要的相关的参数为email以及password,因此Post请求中这两项是必不可少的，模拟登录过程的代码如下图如示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;webClient.getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com/#signin&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HtmlForm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;forms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;page.getForms&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nx"&gt;HtmlForm&lt;/span&gt; &lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;forms.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;HtmlTextInput&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;login.getInputByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;email&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;HtmlPasswordInput&lt;/span&gt; &lt;span class="n"&gt;pwd&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;login.getInputByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;DomNodeList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HtmlElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;btn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;login.getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;button&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;HtmlButton&lt;/span&gt; &lt;span class="n"&gt;submit&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HtmlButton&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="nx"&gt;btn.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;email.setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;key.trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="nx"&gt;pwd.setText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;map&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;submit.click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这里登录即以成功，是不是So easy,而且不用我们操作Cookie,此次模拟的是Chrome浏览器登录&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;List&lt;HtmlForm&gt; forms=page.getForms();代表的是获取页面上的所有Form表单&lt;/p&gt;
&lt;p&gt;HtmlForm login=forms.get(0);由于整个页面上只有一个表单，直接取第一个即可&lt;/p&gt;
&lt;p&gt;HtmlTextInput email=login.getInputByName("email");获取页表上的email输入框&lt;/p&gt;
&lt;p&gt;HtmlPasswordInput pwd=login.getInputByName("password");获取页面上的密码输入框&lt;/p&gt;
&lt;p&gt;下面这两句是用来获取页面上的登录按钮&lt;/p&gt;
&lt;p&gt;DomNodeList&lt;HtmlElement&gt; btn=login.getElementsByTagName("button");&lt;/p&gt;
&lt;p&gt;HtmlButton submit=(HtmlButton)btn.get(0);&lt;/p&gt;
&lt;p&gt;下面这两句是用来设置email与密码&lt;/p&gt;
&lt;p&gt;email.setText(key.trim());&lt;/p&gt;
&lt;p&gt;pwd.setText(map.get(key));&lt;/p&gt;
&lt;p&gt;submit.click();这一句模拟的是用户点击行为&lt;/p&gt;
&lt;p&gt;3、用户登录后，下一步的操作就是到论坛列表，也就是到问题列表去寻找问题，由于登录成功后HtmlUnit有cookie记录了访问的标识符，因此非常方便，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;questions&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;webClient.getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com/topic&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nb"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HtmlAnchor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hrefs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;questions.getAnchors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;hrefList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;LinkedList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;hrefs.size&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
   &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;href&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;hrefs.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;href&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
   &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;href.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;question&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;!&lt;/span&gt;&lt;span class="nx"&gt;href.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;www&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
     &lt;span class="nx"&gt;hrefList.add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;href&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此名是到问题列表，注意此该用户仍处于登录状态&lt;/p&gt;
&lt;p&gt;final HtmlPage questions=webClient.getPage("http://www.zhihu.com/topic")&lt;/p&gt;
&lt;p&gt;获取页面上的所有超链接&lt;/p&gt;
&lt;p&gt;List&lt;HtmlAnchor&gt; hrefs=questions.getAnchors();&lt;/p&gt;
&lt;p&gt;后面几句是将以问题开头的几个超链接放入&lt;code&gt;hrefList&lt;/code&gt;中&lt;/p&gt;
&lt;p&gt;4、有了超链接之后，就可以直接回复问题，然后带上自已网站的链接了吗？是的，但是这样做，发上去的帖子很容易被删除，而且很容易封号，最好的办法在这篇文章&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_1.html" target="_blank"&gt;一款自动发链接的软件设计思路&lt;/a&gt;中我已经列出来的，可以参考，代码如下&lt;/p&gt;
&lt;p&gt;&lt;textarea style="width:100%;height:450px" &gt;
    static public String Search(String ques) {
        WebClient  webClient=new WebClient(BrowserVersion.CHROME);
        webClient.getOptions().setCssEnabled(false);
        webClient.getOptions().setJavaScriptEnabled(false);
        String str = null;
        try {
            str = new String(ques.getBytes("GBK"),"GBK");
        } catch (Exception e) {
            e.printStackTrace();
        }
        String url=UrlEncoded.encodeString(str,"GBK");
        HtmlPage page = null;
        try {
            page = webClient.getPage("http://zhidao.baidu.com/search?lm=0&amp;amp;rn=10&amp;amp;pn=0&amp;amp;fr=search&amp;amp;ie=gbk&amp;amp;word="+url);
        } catch (Exception e) {
            e.printStackTrace();
        }
        DomNodeList&lt;DomElement&gt; doms=page.getElementsByTagName("dd");
        String res=null;
        for(int i=0;i&lt;doms.size();i++)
        {
            HtmlDefinitionDescription def=(HtmlDefinitionDescription)doms.get(i);
            if(def.getAttribute("class").contains("dd answer")){
                String ans=def.asText();
                int  start=0;
                if(ans.indexOf("答：")&gt;-1)
                    start=start+2;
                if(ans.indexOf("推荐答案")&amp;gt;-1)
                    start=start+4;
                int end=ans.length();
                if(ans.contains("[详细]"))
                    end=end-4;
                res=ans.substring(start,end);
                break;
            }
        }
        webClient.closeAllWindows();          &lt;br /&gt;
        return res;
    }
&lt;/textarea&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;从上面的代码中你也可以看出，此处采用的是从百度知道里搜出来的结果进行粘贴的&lt;/p&gt;
&lt;p&gt;此时需要对问题进行转码，否则在搜索的结果中会出现码码问题&lt;/p&gt;
&lt;p&gt;5、有了问题也有了答案，下一步的操作就是将问题粘贴到答案处，此处的过程仍然是一个post请求的过程，仍然是模拟post请求，同样的方法查看post请求的参数：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/zhihu_2.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/zhihu3.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;从上面的请求参数中可以看出模拟post请求需要什么参数了吧，其中id与_xsrf均可以从问题页面中获取，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HtmlDivision&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HtmlDivision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;zh-question-detail&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;data-resourceid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;HtmlInput&lt;/span&gt; &lt;span class="n"&gt;_xsrf1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HtmlInput&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;topic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;_xsrf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;_xsrf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_xsrf1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;得于了id,与_xsrf之后，将从百度知道搜索出来的答案作为content即可发送了，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;WebRequest&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebRequest&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nb"&gt;URL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.zhihu.com/answer/add&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;HttpMethod&lt;/span&gt; &lt;span class="n"&gt;post&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;HttpMethod.POST&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nb"&gt;List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;ArrayList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;id&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_xsrf&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;_xsrf&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;System.out.println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ZhiDaoVerify.head&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;content&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;searchRes.getBytes&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)));&lt;/span&gt;
&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;NameValuePair&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;anon&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="nx"&gt;request.setCharset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;request.setRequestParameters&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;params&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;request.setHttpMethod&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;post&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="nx"&gt;try&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nx"&gt;webClient.getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;request&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;LinkStastics.countLinks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;hrefList.get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;trim&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="nx"&gt;catch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;System.out.println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e.getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、上面代码中有一个&lt;code&gt;LinkStastics.countLinks&lt;/code&gt;此处是一个统计函数，用来统计本次发贴是否成功，即发完贴后再去扫描一下问题页面的回复，是否包含了刚才发送的，代码如下，此处以我的个人博客&lt;a href="http://www.yanyulin.info" target="_blank"&gt;www.yanyulin.info&lt;/a&gt;为例&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;static&lt;/span&gt; &lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;countLinks&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="nx"&gt;ques&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="nx"&gt;WebClient&lt;/span&gt;  &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;new&lt;/span&gt; &lt;span class="nx"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;BrowserVersion.CHROME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;webClient.getOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setCssEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;webClient.getOptions&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="nx"&gt;try&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="nx"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;webClient.getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ques&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nx"&gt;DomNodeList&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;DomElement&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;doms&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;page.getElementsByTagName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;DomElement&lt;/span&gt; &lt;span class="nx"&gt;dom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;doms&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;dom.getAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;tabindex&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;equals&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;-1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                &lt;span class="kt"&gt;String&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;dom.asText&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;text.contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;http://www.yanyulin.info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="nx"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                    &lt;span class="kt"&gt;array&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nb"&gt;add&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ques&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt; &lt;span class="nx"&gt;catch&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;Exception&lt;/span&gt; &lt;span class="nx"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="nx"&gt;System.out.println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;e.getMessage&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7、还有一个问题就是发贴帐号肯定不止一个，如何多个帐号都对同一个帖子进行回复，而且回答的内容一样，必然会引起管理员的怀疑，以至封号，解决办法自已看源码吧，代码都差不多，自已把源码下下来，看看吧，不难~~&lt;/p&gt;
&lt;p&gt;8、程序的运行截图，大家可以自已运行一下，如果有什么问题，可以在博文下面留言&lt;/p&gt;</summary><category term="实用工具"></category></entry><entry><title>github搭建网站优化(修复过多的302重定向请求)</title><link href="http://www.yanyulin.info/pages/2014/03/github_site.html" rel="alternate"></link><updated>2014-03-05T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-05:pages/2014/03/github_site.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;本博客采用&lt;strong&gt;pelican&lt;/strong&gt;搭建，服务器采用的是免费的&lt;strong&gt;github&lt;/strong&gt;,博客搭建完成后，需要在博客根目录下写上一个配置文件&lt;code&gt;CNAME&lt;/code&gt;,其中&lt;code&gt;CNAME&lt;/code&gt;写上自已的域名，然后在DNS域名解析器里写上三条A记录，等上24个小时，即可在全球任何地点访问自已的网站，本网站的DNS采用的是免费的&lt;a href="https://www.dnspod.cn" target="_blank"&gt;DNSpod&lt;/a&gt;进行解析，在DNSPod里的配置如下所示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;主机记录&lt;/span&gt;       &lt;span class="err"&gt;记录类型&lt;/span&gt;    &lt;span class="err"&gt;线路类型&lt;/span&gt;    &lt;span class="err"&gt;记录值&lt;/span&gt;        &lt;span class="n"&gt;MX&lt;/span&gt;&lt;span class="err"&gt;优先级&lt;/span&gt;    &lt;span class="n"&gt;TTL&lt;/span&gt;      
  &lt;span class="n"&gt;www&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;          &lt;span class="err"&gt;默认&lt;/span&gt;  &lt;span class="mf"&gt;207.97.227.245&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;          &lt;span class="err"&gt;默认&lt;/span&gt;  &lt;span class="mf"&gt;207.97.227.245&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;         &lt;span class="n"&gt;A&lt;/span&gt;          &lt;span class="err"&gt;默认&lt;/span&gt;  &lt;span class="mf"&gt;207.97.227.245&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;经过了上述的设置之后，的确可以正常访问网站，但是如果你用百度或者谷歌对网站的速度进行诊断，会发现有非常多的302重定向请求&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;什么是302重定向请求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;假设浏览器要访问服务器的a.html页面，服务器上没有a.html页面，在服务器上将所有对a.html页面的访问全部转向了访问 b.html,那么当用户访问a.html页面时，服务器就会产生一个应答，应答的类型就是302类型，同时应答消息里还会含有b.html的位置，浏览器在接收到302类型的消息后，会取出应答消息中的url重新发送一次请求，请求b.html&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;从上述过程的分析中，可以看出一次重定向，会发生两次请求，因些耗费了非常多的时间，当网站中有太多的重定向请求时，势必会影响网站的响应速度&lt;/p&gt;
&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;github上搭建的博客，如何按照上述的DNS设置之后，网站由于产生了过多的重定向，会大大影响网站的响应速度，以下是采用上述设置之后，百度诊断网速的结果示意图，是不是很不理想，这样的响应速度不仅影响了用户体验，而且还会影响各大搜索引擎的收录&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/github_site.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github_site0.jpg"  alt="烟雨林博客" /&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解决方案&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;修改DNS域名解析器，此处即为DNSPod,在DNSPod里停用A记录，采用别名，即CNAME,将CNAME指向主机的域名即可，即指向&lt;code&gt;username.github.io&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;主机记录&lt;/span&gt;       &lt;span class="err"&gt;记录类型&lt;/span&gt;    &lt;span class="err"&gt;线路类型&lt;/span&gt;      &lt;span class="err"&gt;记录值&lt;/span&gt;        &lt;span class="n"&gt;MX&lt;/span&gt;&lt;span class="err"&gt;优先级&lt;/span&gt;       &lt;span class="n"&gt;TTL&lt;/span&gt;     
  &lt;span class="n"&gt;www&lt;/span&gt;       &lt;span class="n"&gt;CNAME&lt;/span&gt;        &lt;span class="err"&gt;默认&lt;/span&gt;   &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
    &lt;span class="err"&gt;@&lt;/span&gt;       &lt;span class="n"&gt;CNAME&lt;/span&gt;        &lt;span class="err"&gt;默认&lt;/span&gt;   &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
    &lt;span class="o"&gt;*&lt;/span&gt;       &lt;span class="n"&gt;CNAME&lt;/span&gt;        &lt;span class="err"&gt;默认&lt;/span&gt;   &lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;     &lt;span class="o"&gt;-&lt;/span&gt;         &lt;span class="mi"&gt;600&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;p&gt;等一会，短点的话大概几分钟左右，长点估计行24小时，因为DNS也要将更改的域名广播出去~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;测试，采用百度网速度诊断测试，测试后的结果如下图所示，网站的速度还行吧~~~&lt;/p&gt;
&lt;p&gt;网站评分结果：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/github_site.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github_site1.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;网站重定向结果：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/github_site.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github_site2.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;pelican搭建博客教程如下&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" target="_blank"&gt;
http://www.yanyulin.info/pages/2013/11/pelican.html&lt;/a&gt;&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>华为校招机试2014年北京试题</title><link href="http://www.yanyulin.info/pages/2014/03/huawei_2014_2.html" rel="alternate"></link><updated>2014-03-05T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-05:pages/2014/03/huawei_2014_2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、回文数的判断(60分)&lt;/p&gt;
&lt;p&gt;给定一个数，然后将其倒过来相加，如果和不是回文串，那么将和再采取同样的操作,判断这个数在7步之内能不能变成回文数，如果能，则输出这个回文数，如果不能，则输出0，变化规则如下述例子所示&lt;/p&gt;
&lt;p&gt;例如 68&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;68+86=154&lt;/p&gt;
&lt;p&gt;154+451=605&lt;/p&gt;
&lt;p&gt;605+506=1111，&lt;/p&gt;
&lt;p&gt;1111是回文数，输出1111.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;运行要求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行时间限制: 无限制 &lt;/p&gt;
&lt;p&gt;内存限制: 无限制 &lt;/p&gt;
&lt;p&gt;2、在中国，形容夫妻恩爱的词汇中，大家用的比较多的就是“夫妻相”,所谓“夫妻相”，就是两个人看上去比较般配，长相、身材等某些方面有一定的相似度,本题则另辟蹊径，从人的姓名维度，以字母重复个数来寻找最具“夫妻相”的人。&lt;/p&gt;
&lt;p&gt;题目中预先给定一组女士的姓名拼音，输入男士的姓名拼音（拼音中间可以有空格,字母全部小写），依预先给定姓名拼音的先后遍历所有姓名，输出字母重复数最多的女士姓名。&lt;/p&gt;
&lt;p&gt;规则1：如果字母重复数最多的女士有多位相同，则以最先匹配的女士做为最具“夫妻相”的人选。&lt;/p&gt;
&lt;p&gt;规则2：人名中的相同字母，按重复一次处理。例如：li ling 与li lei 重复的字符个数为2,而不是4。&lt;/p&gt;
&lt;p&gt;预置女士名单(先后循序必须保证):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"wang fei",&lt;/p&gt;
&lt;p&gt;"zhang man yu",&lt;/p&gt;
&lt;p&gt;"zhang zhi yi",&lt;/p&gt;
&lt;p&gt;"li li",&lt;/p&gt;
&lt;p&gt;"li xiao man",&lt;/p&gt;
&lt;p&gt;"li yu cun",&lt;/p&gt;
&lt;p&gt;"yang ni",&lt;/p&gt;
&lt;p&gt;"xiao tong",&lt;/p&gt;
&lt;p&gt;"li lei",&lt;/p&gt;
&lt;p&gt;"zhang san"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;运行要求&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;运行时间限制: 无限制 &lt;/p&gt;
&lt;p&gt;内存限制: 无限制 &lt;/p&gt;
&lt;p&gt;输入: 输入一个男士姓名，字符串 &lt;/p&gt;
&lt;p&gt;输出: 输出最具“夫妻相”的女士姓名&lt;/p&gt;
&lt;p&gt;3、实现一个函数，给定一个N进制的数，将其转换成M进制的数，其中N与M均大于0,说白了就是进制数之间的转换&lt;/p&gt;
&lt;p&gt;这套试题，我是在2014年北京北航参加，用了半个小时全做完，全对，交卷的~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;到此为止，大家写写自已的函数吧，写好后可以给我留言，我会挑出最好的，做为试题答案，为其他人提供方便&lt;/strong&gt;&lt;/p&gt;</summary><category term="华为笔试题"></category></entry><entry><title>git保存用户名与密码(避免用户名密码输入)</title><link href="http://www.yanyulin.info/pages/2014/03/git.html" rel="alternate"></link><updated>2014-03-04T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-04:pages/2014/03/git.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;写在前面的话&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;由于本博客是托管于github之上，因此每次&lt;code&gt;git push -u origin master&lt;/code&gt;时都得输入用户名与密码，是非常烦人的，经过一番尝试，原来可以写一个配置文件避免输入用户名与密码，这样通过git上传文件到github上就非常方便了~~~&lt;/p&gt;
&lt;p&gt;&lt;code&gt;git&lt;/code&gt;工具是由linux之父开发的一款分布式代码管理工具，代码开源，功能强大，&lt;code&gt;git&lt;/code&gt;开发的一般流程是首先从服务器上&lt;code&gt;clone&lt;/code&gt;一份主干代码，相当于创建了分支，然后修改分支代码，最后将修改后的代码提交到服务器上，为了安全，每一提交都需要输入用户名与密码，肯定是很繁琐的，因此得想办法，避免每次提交时都需要输入&lt;strong&gt;用户名与密码&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、设置环境变量，在我的电脑上单击右键-&amp;gt;属性-&amp;gt;高级-&amp;gt;环境变量-&amp;gt;系统变量-&amp;gt;新建里写上如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;变量名：&lt;/span&gt;&lt;span class="n"&gt;HOME&lt;/span&gt;
&lt;span class="err"&gt;变量值&lt;/span&gt;&lt;span class="o"&gt;:%&lt;/span&gt;&lt;span class="n"&gt;HOMEPATH&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果使用的是Win7系统可以直接输入以下命令:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setx&lt;/span&gt; &lt;span class="n"&gt;HOME&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;USERPROFILE&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;以下是WinXP下的截图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/git.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/git0.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2、在运行窗口（可以按Windows+R键）中输入如下命令，即可以打开%HOMEPATH%文件夹，在该文件夹下建立一个文件，文件名为&lt;code&gt;_netrc&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/git.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/git1.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;%HOMEPATH%&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、以记事本的形貌打开_netrc文件，在文件里面输入如下配置项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;machine&lt;/span&gt; &lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;login&lt;/span&gt; &lt;span class="o"&gt;*****&lt;/span&gt;&lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;gmail&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;******&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;代码中&lt;/p&gt;
&lt;p&gt;machine：表示要上传的服务器，上述代码中表示要上专到github.com中&lt;/p&gt;
&lt;p&gt;login：填入登录用户名，例子中应该填入github帐户名&lt;/p&gt;
&lt;p&gt;password：填入登录密码，例子中应该填入github帐户密码&lt;/p&gt;
&lt;p&gt;如有问题，可以联系我，联系方式，看博客下方邮箱&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>pelican博客搭建设置分页和分页保存位置</title><link href="http://www.yanyulin.info/pages/2014/03/pelican_page.html" rel="alternate"></link><updated>2014-03-04T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-04:pages/2014/03/pelican_page.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;本篇&lt;strong&gt;博客&lt;/strong&gt;紧随前几篇博客而来&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" target="_blank" &gt;pelican搭建属于自已的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/pelican_question.html" target="_blank" &gt;pelican创建博客常见问题汇总&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/comment.html" target="_blank" &gt;博客添加第三方评论系统多说评论框&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/navigator.html" target="_blank" &gt;pelican创建博客如何设置导航条&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;今天介绍一下pelican创建博客中如何进行博客的分页，分页效果可以参考本博客首页底部效果图，该效果图类似于百度搜索的分页机制，一次性不会显示出全部分页，会随用户的选择的分页显示出该分页前几分页以及后几分页，话不多说，截图如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/pelican_page.html"&gt;
&lt;img  alt="烟雨林博客"  src="http://www.yanyulin.info/pics/tools/pelican_page0.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;pelican创建上述分页机制的步骤如下：&lt;/p&gt;
&lt;p&gt;1、更改配置文件pelicanconf.py，加入如下配置选项：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DEFAULT_PAGINATION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;
&lt;span class="n"&gt;PAGINATION_PATTERNS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;base_name&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;}{&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="p"&gt;}.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;配置选项的含义&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;DEFAULT_PAGINATION = 11表示分页时一页显示11条&lt;/p&gt;
&lt;p&gt;PAGINATION_PATTERNS里面配置的是分页时各分布保存的位置，上述代码的含义就是第1分页保存在网站根目录下，从第二分页开始，保存在page目录下&lt;/p&gt;
&lt;p&gt;2、Pelican采用的是&lt;code&gt;JinJa2&lt;/code&gt;模板，最好先了解一下&lt;code&gt;JinJa2&lt;/code&gt;,本博客中分页长度是11个长度，也就是上图中的分页小方块最多有11个，当分页数&lt;code&gt;&amp;gt;11&lt;/code&gt;时，假设为12时，当用户点击第10页时，则会显示&lt;code&gt;2-12&lt;/code&gt;页，当用户点击第1页时，则又会显示&lt;code&gt;1-11&lt;/code&gt;页，实现代码如下(代码更改在模板中的pagination.html中)：&lt;/p&gt;
&lt;p&gt;&lt;textarea style="width:100%;height:450px" &gt;
    {% if DEFAULT_PAGINATION %}
        {% set pageCut=11 %}
        {% set cut=5 %}
        &lt;div class="navigation_b"&gt;
            &lt;div class="pagination"&gt;      &lt;br /&gt;
                {% set currentpage=articles_page.number %}
                {% if currentpage-cut &amp;gt;0 and articles_paginator.num_pages-currentpage &amp;gt;= cut %}
                    {% for j in range(currentpage-cut,currentpage) %} 
                        {% if j ==currentpage %}
                           &lt;span class="current"&gt;{{articles_page.number}}&lt;/span&gt;
                        {% elif j ==1 %}
                           &lt;a href="{{ SITEURL }}/{{ page_name }}.html" class="inactive"&gt;{{ j }}&lt;/a&gt;      &lt;br /&gt;
                        {% else %}
                           &lt;a href="{{ SITEURL }}/page/{{ page_name }}{{ j }}.html" class="inactive"&gt;
                            {{ j }}
                           &lt;/a&gt;
                           {% endif %}
                       {% endfor %}
                       {% for j in range(currentpage,currentpage+cut+1) %} 
                           {% if j ==currentpage %}
                             &lt;span class="current"&gt;{{articles_page.number}}&lt;/span&gt;
                           {% else %}
                              &lt;a href="{{ SITEURL }}/page/{{ page_name }}{{ j }}.html" class="inactive"&gt;
                              {{ j }}
                              &lt;/a&gt;
                           {% endif %}
                        {% endfor %}
                 {% elif articles_paginator.num_pages &amp;gt; pageCut and articles_paginator.num_pages-currentpage&lt;pageCut %}
                       {% for j in range(pageCut-1,-1,-1) %} 
                            {% if articles_paginator.num_pages-j==currentpage %}
                              &lt;span class="current"&gt;{{articles_page.number}}&lt;/span&gt;
                            {% elif articles_paginator.num_pages-j ==1 %}         &lt;br /&gt;
                                &lt;a href="{{ SITEURL }}/page/{{ page_name }{{ j }}.html" class="inactive"&gt;
                                {{ j }}
                                &lt;/a&gt;
                            {% else %}
                                &lt;a href="{{ SITEURL }}/page/{{ page_name }}{{ articles_paginator.num_pages-j }}.html" class="inactive"&gt;
                                    {{ articles_paginator.num_pages-j }}
                                &lt;/a&gt;
                            {% endif %}
                        {% endfor %}  &lt;br /&gt;
                  {% else %}
                            {% if articles_paginator.num_pages &amp;lt; pageCut %}
                                {% set realPage=articles_paginator.num_pages %}
                            {% else %}
                                {% set realPage=pageCut %}
                            {% endif %}
                            {% for j in range(1,realPage+1) %} 
                                {% if j ==currentpage %}
                              &lt;span class="current"&gt;{{articles_page.number}}&lt;/span&gt;
                                {% elif j ==1 %}
                                &lt;a href="{{ SITEURL }}/{{ page_name }}.html" class="inactive"&gt;
                                    {{ j }}
                                &lt;/a&gt;
                                {% else %}
                                  {% if j ==currentpage %}
                                   &lt;span class="current"&gt;{{articles_page.number}}&lt;/span&gt;
                                  {% else %}
                                    &lt;a href="{{ SITEURL }}/page/{{ page_name }}{{ j }}.html" class="inactive"&gt;
                                        {{ j }}
                                    &lt;/a&gt;
                                  {% endif %}
                                {% endif %}
                            {% endfor %}                                  &lt;br /&gt;
                        {% endif %}
            &lt;a href="{{ SITEURL }}/{{ page_name }}.html"&gt;首页&lt;/a&gt;
            {% if articles_paginator.num_pages == 1 %}
                    &lt;a href="{{ SITEURL }}/{{ page_name }}.html"&gt;
                        尾页
                    &lt;/a&gt;&lt;/div&gt;
            {% else %}
                    &lt;a href="{{ SITEURL }}/page/{{ page_name }}{{articles_paginator.num_pages}}.html"&gt;
                        尾页
                    &lt;/a&gt;&lt;/div&gt;
            {% endif %}
    &lt;/div&gt;
    {% endif %}
&lt;/textarea&gt;&lt;/p&gt;
&lt;p&gt;上述的代码看起来比较长，去掉CSS样式后可以直接使用&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;备注，程序注解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;{% if DEFAULT_PAGINATION %}&lt;/code&gt;表示的是如果设置了分布时，则执行后绪代码&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;{% set pageCut=11 %}&lt;/code&gt;设置一变量，代表的是每页显示的条目数&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;{% set cut=5 %}&lt;/code&gt;表示的是以用户当前点击的分页为坐标，该分页前后应该都显示&lt;code&gt;5页&lt;/code&gt;(如果当前页前面或者后面分页数不足五页要在程序中进行处理)&lt;/p&gt;
&lt;p&gt;4、&lt;code&gt;articles_page.number&lt;/code&gt;代表的是当前所处的分页&lt;/p&gt;
&lt;p&gt;5、&lt;code&gt;articles_paginator.num_pages&lt;/code&gt;代表的是总共的分页数目&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;{{ SITEURL }}&lt;/code&gt;代表的是网站域名，在配置文件中可以查到，此处就是&lt;a href="www.yanyulin.info"  target="_blank"&gt;http://www.yanyulin.info&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;code&gt;{{ page_name }}&lt;/code&gt;代表的是分页名，其中分页名还含有分页所在的目录，即假如分页pelican.html在page目录下的category目录中，则分页名实际上为&lt;strong&gt;category/pelican&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如有问题，可以联系我，联系方式，看博客下方邮箱&lt;/strong&gt;&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>多说评论框如何|怎么样|实际测试</title><link href="http://www.yanyulin.info/pages/2014/03/duoshuo.html" rel="alternate"></link><updated>2014-03-03T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-03:pages/2014/03/duoshuo.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;本文非&lt;code&gt;多说水客&lt;/code&gt;，博主也坚决抵制&lt;code&gt;水客&lt;/code&gt;，水客只有误导人的份，本博文以博主自已的博客实际使用心得来&lt;strong&gt;评价第三方评价系统多说&lt;/strong&gt;，目前国内比较出名的第三方社会化评论系统有友言、评论啦、多说，其中友言界面比较简洁，当然也非常优秀，起步较&lt;strong&gt;多说&lt;/strong&gt;要早，评论啦未使用过，不做评价，国外disqus不适合国内的国情，如不支持QQ、百度贴吧、新浪微博分享等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何使用多说可以参考下文&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/comment.html" target="_blank"&gt;
博客添加第三方评论系统多说评论框&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;为什么采用第三方评论系统&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.数据库以及空间贵，我等屌丝还支付不起&lt;/p&gt;
&lt;p&gt;2.第三方评论系统具有强大的反垃圾机制，可以有效的过滤垃圾流言&lt;/p&gt;
&lt;p&gt;3.添加容易，界面操作方便，省去了我们自已写代码&lt;/p&gt;
&lt;p&gt;4.功能比较强大，都带有自已的&lt;code&gt;分享按钮&lt;/code&gt;以及&lt;strong&gt;微博、QQ、人人、百度贴吧&lt;/strong&gt;登录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;多说评论框优点&lt;/strong&gt;*&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.支持国内目前主流的SNS,如&lt;strong&gt;微博、QQ、人人、百度贴吧&lt;/strong&gt;,国外嘛，也没必要，你懂的~&lt;/p&gt;
&lt;p&gt;2.团队技术实力还是比较强大，多说创建团队是来自于清华的牛人，用了两个月的时间成功上线多说&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;多说&lt;/code&gt;支持&lt;code&gt;SEO优化&lt;/code&gt;,这是其最为突出的地方，也最吸引人的...&lt;/p&gt;
&lt;p&gt;4.评论系统反馈比较及时，界面美观，提供CSS自定义&lt;/p&gt;
&lt;p&gt;5.提供了从其他第三方评论系统导入评论的功能&lt;/p&gt;
&lt;p&gt;6.提供了各种API以及自定义组件&lt;/p&gt;
&lt;p&gt;7.完全免费，目说使用多说评论框的公司比较多，其中不泛名企，如小米....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;多说评论框缺点&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;免费当然也有免费的缺点，其中最大的缺点就是服务器有时会出现问题，如崩溃，而且恢复起来需要大概四五个小时，以下是博主实际遇到的一次情况，当然多说技术人员服务还是挺好的，其他缺点暂时没有发现，大家可以试试&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以下截图发生在2014.2.27号&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/duoshuo.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/zatan/duoshuo1.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/duoshuo.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/zatan/duoshuo2.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/duoshuo.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/zatan/duoshuo.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;多说欧阳 9:42:30 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;是有一台服务器小故障，已经开始修复，估计一小时以后可以恢复、&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/duoshuo.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/zatan/duoshuo3.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;多说欧阳 15:54:09 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;服务器正在修复，还没完全好&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多说欧阳 16:54:10 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;我们的技术人员已经完成了修复工作的操作，现在正等待数据库数据传输；成功保证了所有数据完整，&lt;/span&gt;
&lt;span class="err"&gt;大家耐心等待一下，由于数据量比较大，所以没有马上全部恢复，请大家不要着急，没有任何数据丢失&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/duoshuo.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/zatan/duoshuo4.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;多说欧阳 17:00:26 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;感谢支持&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;多说欧阳 19:11:35 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;多说服务已经全部正常，关闭插件的用户现在可以重新打开使用了，对给大家造成的麻烦深表歉意，感谢大家支持&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从上面的聊天记录可以看出，多说评论技术人员服务还是挺到位的~~~&lt;/p&gt;</summary><category term="烟雨分享"></category></entry><entry><title>pelican创建博客如何设置导航条</title><link href="http://www.yanyulin.info/pages/2014/03/navigator.html" rel="alternate"></link><updated>2014-03-03T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-03:pages/2014/03/navigator.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Pelican搭建博客中，如果比较懒，可以直接使用官方提供的主题，官方提供的主题均比较简单，做一些简单的博客还是可以的，但要想做到美观、大方似乎还得努力，今天分享一下，&lt;strong&gt;本博客&lt;/strong&gt;(当然也是采用pelican搭建的)在搭建过程中，如何使用pelican创建自定义的菜单，菜单的样式如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/navigator.html"&gt;
&lt;img  alt="烟雨林博客" src="http://www.yanyulin.info/pics/tools/nav1.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;本博客的搭建过程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" target="_blank"&gt;
pelican搭建属于自已的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/github.html" target="_blank"&gt;
Github简明教程(入门篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
Github上如何给别人贡献代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/pelican_question.html" target="_blank"&gt;
pelican创建博客常见问题汇总
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/comment.html" target="_blank"&gt;
博客添加第三方评论系统多说评论框
&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Pelican是基于Jinja2模板的，因此在设置菜单时有必要了解一些JinJa2的语法以及相关函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;菜单设置步骤&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;的设置&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISPLAY_PAGES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DISPLAY_PAGES_ON_MENU = False&lt;/code&gt;表示的是单独页即&lt;code&gt;page&lt;/code&gt;文件夹里的标题不显示在导航菜单中&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DISPLAY_CATEGORIES_ON_MENU = False&lt;/code&gt;表示的是目录,即文章分类要显示在导航菜单中&lt;/p&gt;
&lt;p&gt;2、在目录中，有些目录不想显示在导航条中，如本博文中的&lt;a href="http://www.yanyulin.info/category/cheng-xu-yuan-zhao-gong-zuo.html" target="_blank"&gt;程序员找工作&lt;/a&gt;以及&lt;a href="http://www.yanyulin.info/category/cheng-xu-yuan-de-mian-jing.html" target="_blank"&gt;程序员的面经&lt;/a&gt;可以在配置文件中写上如下语句，表示不想显示的目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;LINKS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt;  &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;程序员找工作&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
          &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;程序员的面经&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="err"&gt;#&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;),)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、设置好上述的配置文件后，打开你自已的主题，例如本博文的主题是&lt;code&gt;pelican-themes/gum&lt;/code&gt;,找到templates文件夹下的base.html，写下如下代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!--表示的是如果是首页时，对样式进行的设置，效果如本博文稿www.yanyulin.info主页导航栏--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;page_name&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;index&amp;quot;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;                       
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt;  &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;current-menu-item current_page_item &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;烟雨首页&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;烟雨首页&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--看看菜单栏里是否有菜单--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;link&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;MENUITEMS&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;link&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--看看page目录下的页标题是否显示--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY_PAGES_ON_MENU&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;PAGES&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;p.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;p.title&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--关键部件，即显示目录名字到导航条上--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;DISPLAY_CATEGORIES_ON_MENU&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--过滤掉不想显示的目录--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;set&lt;/span&gt; &lt;span class="nv"&gt;dit&lt;/span&gt;&lt;span class="o"&gt;=[]&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;txm&lt;/span&gt; &lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;LINKS&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;dit.append&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;txm&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--开如显示--&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nv"&gt;null&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;categories&lt;/span&gt;  &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="k"&gt;not&lt;/span&gt; &lt;span class="k"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;dit&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;category&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;                                                
&lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;current-menu-item current_page_item &amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;li&amp;gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;SITEURL&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;/&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat.url&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;cat&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt;&lt;span class="k"&gt;endif&lt;/span&gt;&lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endfor&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;多看上面注释，代码不难理解&lt;/p&gt;
&lt;p&gt;4、更改了上述主题后，将原有主题卸载，重新安装，如下是以本博文主题&lt;code&gt;gum&lt;/code&gt;为例子，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;gum&lt;/span&gt;

&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gum&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如有问题，可以联系我，联系方式，看博客下方邮箱&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>博客添加第三方评论系统多说评论框</title><link href="http://www.yanyulin.info/pages/2014/03/comment.html" rel="alternate"></link><updated>2014-03-02T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-02:pages/2014/03/comment.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;博客&lt;/code&gt;已经基本搭建完成，前前后后历时将近两周，采用的是开源工具&lt;code&gt;Pelican&lt;/code&gt;搭建，服务器采用的是强大的分布式代码托管库&lt;code&gt;Github&lt;/code&gt;,两者的教程可以参考下面的链接，本博客总共破费了&lt;code&gt;我3美元&lt;/code&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" target="_blank"&gt;
pelican搭建属于自已的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/github.html" target="_blank"&gt;
Github简明教程(入门篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
Github上如何给别人贡献代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/pelican_question.html" target="_blank"&gt;
pelican创建博客常见问题汇总
&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天&lt;code&gt;分享&lt;/code&gt;一下，博客如何添加&lt;strong&gt;第三方评论系统&lt;/strong&gt;，国外的第三方评论系统已经做的相当强大，如&lt;code&gt;disqus&lt;/code&gt;,但国外终究是国外，与国内行情不同，如&lt;code&gt;disqus&lt;/code&gt;不支持&lt;strong&gt;微博、QQ、人人、百度贴吧&lt;/strong&gt;登录以及分享等，国内的第三方评论系统起步较国外晚，但做的也相当不错，如&lt;strong&gt;多说、友言、评论啦&lt;/strong&gt;等，比较符合国内的行情，本博客最初搭建时采用的第三方评论系统为&lt;code&gt;disqus&lt;/code&gt;,最后发现&lt;code&gt;disqus&lt;/code&gt;除了上述的缺点之外，还有一个非常严重的问题，就是在&lt;code&gt;IE7/IE6&lt;/code&gt;下，&lt;code&gt;disqus&lt;/code&gt;会出现问题，即不能很好的跨浏览器，使用了将近两周，于是弃之，改用了国内的多说&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;为什么采用第三方评论系统&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.数据库以及空间贵，我等屌丝还支付不起&lt;/p&gt;
&lt;p&gt;2.第三方评论系统具有强大的反垃圾机制，可以有效的过滤垃圾流言&lt;/p&gt;
&lt;p&gt;3.添加容易，界面操作方便，省去了我们自已写代码&lt;/p&gt;
&lt;p&gt;4.功能比较强大，都带有自已的&lt;code&gt;分享按钮&lt;/code&gt;以及&lt;strong&gt;微博、QQ、人人、百度贴吧&lt;/strong&gt;登录&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;多说评论框&lt;/strong&gt;*&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.支持国内目前主流的SNS,如&lt;strong&gt;微博、QQ、人人、百度贴吧&lt;/strong&gt;,国外嘛，也没必要，你懂的~&lt;/p&gt;
&lt;p&gt;2.团队技术实力还是比较强大&lt;/p&gt;
&lt;p&gt;3.&lt;code&gt;多说&lt;/code&gt;支持&lt;code&gt;SEO优化&lt;/code&gt;,这是其最为突出的地方，也最吸引人的...&lt;/p&gt;
&lt;p&gt;4.评论系统反馈比较及时，界面美观，提供自定义....&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;重点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1.向博客中添加评论系统，首先要在多说网上注册自已的帐号，注册帐号后要验证自已的域名，邮箱等，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/comment.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/duoshuo1.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2.点击管理员左侧的工具，获取通用代码，或者直接复制下面的代码，将该代码粘贴到博客中需要添加评论的地方，即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;&amp;lt;!-- Duoshuo Comment BEGIN --&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ds-thread&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
var duoshuoQuery = {short_name:&amp;quot;yanyulin&amp;quot;};
    (function() {
        var ds = document.createElement(&amp;#39;script&amp;#39;);
        ds.type = &amp;#39;text/javascript&amp;#39;;ds.async = true;
        ds.src = &amp;#39;http://static.duoshuo.com/embed.js&amp;#39;;
        ds.charset = &amp;#39;UTF-8&amp;#39;;
        (document.getElementsByTagName(&amp;#39;head&amp;#39;)&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; 
        || document.getElementsByTagName(&amp;#39;body&amp;#39;)&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;).appendChild(ds);
    })();
    &lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!-- Duoshuo Comment END --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;代码中的的&lt;code&gt;short_name&lt;/code&gt;要改写成添加站点时&lt;code&gt;http://www.XXXX.duoshuo.com&lt;/code&gt;中的&lt;code&gt;XXXX&lt;/code&gt;部分，添加成功后，运行图我如下图如博文下面的评论框所示&lt;/p&gt;
&lt;p&gt;3.给博文添加最新评论，效果如我的博客右侧栏如示，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nt"&gt;&amp;lt;ul&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ds-recent-comments&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-num-items=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;7&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-show-title=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-show-avatars=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-show-time=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-show-admin=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0&amp;quot;&lt;/span&gt; &lt;span class="na"&gt;data-excerpt-length=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;40&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;clear&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--多说js加载开始，一个页面只需要加载一次 --&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;script&lt;/span&gt; &lt;span class="na"&gt;type=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;text/javascript&amp;quot;&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
var duoshuoQuery = {short_name:&amp;quot;yanyulin&amp;quot;};
(function() {
    var ds = document.createElement(&amp;#39;script&amp;#39;);
    ds.type = &amp;#39;text/javascript&amp;#39;;ds.async = true;
    ds.src = &amp;#39;http://static.duoshuo.com/embed.js&amp;#39;;
    ds.charset = &amp;#39;UTF-8&amp;#39;;
    (document.getElementsByTagName(&amp;#39;head&amp;#39;)&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt; || document.getElementsByTagName(&amp;#39;body&amp;#39;)&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;).appendChild(ds);
})();
&lt;span class="nt"&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class="c"&gt;&amp;lt;!--多说js加载结束，一个页面只需要加载一次 --&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;备注&lt;/strong&gt;代码中的的&lt;code&gt;short_name&lt;/code&gt;要改写成添加站点时&lt;code&gt;http://www.XXXX.duoshuo.com&lt;/code&gt;中的&lt;code&gt;XXXX&lt;/code&gt;部分&lt;/p&gt;
&lt;p&gt;最终的结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/comment.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/duoshuo2.jpg"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;如有问题，可以联系我，联系方式，看博客下方邮箱&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>【赠送】ripple币免费获取&amp;免费领取</title><link href="http://www.yanyulin.info/pages/2014/03/getxrp.html" rel="alternate"></link><updated>2014-03-02T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-03-02:pages/2014/03/getxrp.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;转载时请注明出处&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;赠送前说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;最近&lt;code&gt;ripple&lt;/code&gt;的表现实在是太差劲极了，不，是整个虚拟币的表现是&lt;strong&gt;实在糟糕透顶了&lt;/strong&gt;，估计这种情况还会持续下去，虚拟币究竟&lt;strong&gt;有没有价值&lt;/strong&gt;还是一个值得人深思的问题，虚拟币&lt;strong&gt;该不该去中心化&lt;/strong&gt;，随着&lt;strong&gt;门头沟&lt;/strong&gt;事件的爆发，&lt;strong&gt;Mt.Gox&lt;/strong&gt;因黑客盗取的破产，&lt;code&gt;744000比特币&lt;/code&gt;丢失，这么多资金已经足够&lt;strong&gt;摧毁&lt;/strong&gt;这家公司，日本和美国监管机构正在介入，后绪还不知道有什么新闻会曝光，也许&lt;strong&gt;一次致命性的新闻&lt;/strong&gt;会足以使虚拟币走向灭亡，当然ripple的价格也随着比特币的价格浮沉，下面是ripple价格图：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/03/getxrp.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/invest/bts.jpg" alt="烟雨林博客" /&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;虚拟币的负面新闻：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mt.Gox&lt;/code&gt;在记者招待会上宣布进入破产程序&lt;/p&gt;
&lt;p&gt;越南政府表态:禁止信贷机构参与比特币交易&lt;/p&gt;
&lt;p&gt;澳大利亚政府追踪所有澳元与比特币转换的交易&lt;/p&gt;
&lt;p&gt;约旦中央银行声明：阻止金融公司从事比特币业务&lt;/p&gt;
&lt;p&gt;国内银行的态度大家也知道吧，不多说....&lt;/p&gt;
&lt;p&gt;也许不去中心化，有专门的公司进行维护可能会好些，但也许有些人&lt;strong&gt;又会担心&lt;/strong&gt;，这些维护性的公司可能&lt;strong&gt;操纵虚拟币&lt;/strong&gt;，想想Ripple吧，Ripple算得上去中心化嘛，Ripple后面由强大的RippleLab再维护，只要报告一个Bug,就可以免费获取&lt;code&gt;150 xrp&lt;/code&gt;,ripple只有75%的货币用于发行,任何事情都有双面性，好外是也许这样会使ripple更加安全,坏处嘛，大家心里清楚~~~&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重要，赠送&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上述为&lt;strong&gt;个人观点&lt;/strong&gt;，不同意者直接看下面赠送，也算是为&lt;code&gt;ripple宣传&lt;/code&gt;吧，【&lt;code&gt;Ripple&lt;/code&gt;是世界上第一个开放的支付网络，通过这个支付网络可以转账任意一种货币，包括美元、欧元、人民币、日元或者比特币，简便易行快捷，交易确认在几秒以内完成，交易费用几乎是零，没有所谓的跨行异地以及跨国支付费用,&lt;code&gt;Ripple&lt;/code&gt;是开放源码的点到点支付网络，它可以使你轻松、廉价并安全的把你的金钱转账到互联网上的任何一个人，无论他在世界的哪个地方。因为Ripple是p2p软件，没有任何个人、公司，或政府操控，任何人可以创建一个ripple账户】。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;领取赠送方法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、直接在文章下面评论框里留下自已的ripple地址者，将获赠&lt;code&gt;0.1-0.2xrp&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;分享&lt;/code&gt;让更多玩家前来领取者：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.将本文转载出去，转载文要求附上&lt;code&gt;文章出处链接&lt;/code&gt;，将获赠&lt;code&gt;0.5xrp币&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.对本文进行评价并转发到微博者，将获&lt;code&gt;赠0.2-0.4xrp币&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;赠送货币奖会在夜晚统一发送，&lt;code&gt;严禁作弊&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其他获取途径，请参考此链接：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html" target="_blank"&gt;
ripple钱包注册/更改/免费激活
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html" target="_blank"&gt;
[赠送]WTC(万特币)获取30ripple和100WTC
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html" target="_blank"&gt;
[赠送]GKO币每天免费领取10ripple
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/jed.html" target="_blank"&gt;
JED币免费获取30 ripple币
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html" target="_blank"&gt;
免费获取ripple币的方法汇总
&lt;/a&gt;&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>ripple钱包注册/更改/免费激活</title><link href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html" rel="alternate"></link><updated>2014-02-24T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-24:pages/2014/02/ripplereginster.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ripple&lt;/code&gt;是世界上第一个开放的支付网络，通过这个支付网络可以转账任意一种货币，包括美元、欧元、人民币、日元或者比特币，简便易行快捷，交易确认在几秒以内完成，交易费用几乎是零，没有所谓的跨行异地以及跨国支付费用&lt;/p&gt;
&lt;p&gt;本博文向大家介绍&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何&lt;code&gt;注册钱包&lt;/code&gt;以及&lt;code&gt;更改ripple钱包密码&lt;/code&gt;和免费激活ripple钱包。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、注册钱包地址如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ripple.com/client/#/register" target="_blank"&gt;
https://ripple.com/client/#/register 
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;界面如下图如示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/walet1.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2、点击上图中的创建钱包后的，界面如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/walet2.jpg" width="100%"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;3、进入下图所示的主界面:&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/walet3.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;4、钱包需要激活，每个钱包至少&lt;code&gt;20&lt;/code&gt;个币才能激活以及交易，大家可以自行购买，也可以通过免费赠送途径。以下是两种免费的激活方式&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html" target="_blank"&gt;
[赠送]WTC(万特币)获取30ripple和100WTC（可免费激活钱包，大家尽早）
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html" target="_blank"&gt;
免费获取ripple币的方法汇总(无法激活，一次只能0.1xrp)
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html" target="_blank"&gt;
[赠送]GKO币每天免费领取10ripple(需激活钱包)
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/jed.html" target="_blank"&gt;
JED币免费获取30 ripple币(需激活钱包)
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;改密教程&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;只要你有你钱包的&lt;code&gt;秘钥&lt;/code&gt;，就可以找回哦。现在知道秘钥的重要性了吧。&lt;/p&gt;
&lt;p&gt;1、首先你要找到你的秘钥&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/walet4.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;2、点击显示密钥如图五所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img  alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/walet5.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;3、点击以下地址&lt;/p&gt;
&lt;p&gt;&lt;a href="https://ripple.com/client/#/register" target="_blank"&gt;
https://ripple.com/client/#/register 
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img  alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/walet6.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;4、点击 use key后，出现以下界面：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/walet7.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;5、按照以上图操作后，&lt;code&gt;creat wallet&lt;/code&gt;会由灰色变成蓝色。点击&lt;code&gt;creat wallet&lt;/code&gt;进入钱包。
如果此时&lt;code&gt;creat wallet&lt;/code&gt;还是灰色，说明你第2部的两次密码输入不匹配，重新输入即可。&lt;/p&gt;
&lt;p&gt;进入钱包后，一切都回来了，之前的钱包里面的钱都在呢。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;需要提醒大家的是，尽管你新建立了用户名和密码，但是用你原来的用户名和密码也可以进入钱包。所以如果你感觉你的钱包已经不安全，请尽快注册新的钱包，将所有钱转移&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如果觉的本博文对你有用，请捐赠ripple或者wtc(万特币)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ripple:r42DgYzKysWR3hkoVM4DhEWNH3v7ax24Ag&lt;/strong&gt;&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>[赠送]WTC(万特币)获取30ripple和100WTC</title><link href="http://www.yanyulin.info/pages/2014/02/wtc.html" rel="alternate"></link><updated>2014-02-24T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-24:pages/2014/02/wtc.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在最知名、最悠久也最有青春朝气的新水木网站， 在多位远见卓识者多次的深情召唤中，在众多地青屌丝的热情拥抱和呵护下，万特币于2014年春节前夕应时而生！&lt;/p&gt;
&lt;p&gt;1、万特币是具有中国特色的高知青年的集体的创造物。&lt;/p&gt;
&lt;p&gt;2、万特币是第一个拥有最民主的发行和管理中心的虚拟币。&lt;/p&gt;
&lt;p&gt;共计&lt;code&gt;30&lt;/code&gt;位接受过清华北大多年培养和文化熏陶的各行业翘楚——而且全都是新水木社区资深网友，他们自发站出来，在水木最高精神领袖、水木键盘委员会李遵白总书记的亲自指导下，形成万特币最高管理机构，为万特币信用担保，决定一切相关事宜。万特币欢迎任何建议和批评。&lt;/p&gt;
&lt;p&gt;3 万特币不仅最赤裸、最阳光，也将是最有文化、最有社会责任感的中国高知地青专用虚拟物体。万特币关爱地球，保护环境，不浪费电力挖矿，不滥发，不为某个匿名者的一己之私而损害他人的利益。&lt;/p&gt;
&lt;p&gt;4 万特币致力于学术与民族进步，在时光中，我们只是过客。我们交换一切，到那时我们更需要为我们所深爱的奉献出自己的一切。&lt;/p&gt;
&lt;p&gt;5 中国当代知识青少年追求和关注的一切就是万特币的焦点。万特币将助燃你明亮火热的青春，万特币将润泽你与他人之间最真诚美好的交互&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;重点如何获取ripple与wtc(万特币)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、水木网友&lt;code&gt;[可选条件]&lt;/code&gt;，因为&lt;code&gt;水木积分&lt;/code&gt;可以兑换万特币!您不是水木网友也没关系，可以临时注册&lt;a href="http://www.newsmth.net" target="_blank"&gt;http://www.newsmth.net&lt;/a&gt; &lt;strong&gt;当然不注册也可以&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2、注册ripple钱包，钱包注册教程链接如下&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/ripplereginster.html" target="_blank"&gt;
ripple钱包注册/更改/免费激活
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、注册完钱包后，加QQ群188646541,群里面有个红包发送人，叫h21红包发送者（WTC创建者之一），将ripple地址发给他，&lt;strong&gt;找他给你激活&lt;/strong&gt;，或者直接QQ他，他QQ号是&lt;code&gt;885200816&lt;/code&gt;，如果已有ripple钱包的，就不用注册了，直接加群或者QQ他&lt;strong&gt;加群时说信息来源于烟雨林博客，可以得到30xrp，哈哈&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4、新注册的钱包获取xrp,激活后，需要如下设置才能获取&lt;code&gt;万特币&lt;/code&gt;WTC，已经激活过的钱包，如下设置后，告诉红包发送者，就坐等收ripple以及wtc啦&lt;/p&gt;
&lt;p&gt;添加信任网关，  点击trust 和 Advanced，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/wtc1.jpg" width="100%"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;在里面填写网关地址，如下：&lt;/p&gt;
&lt;p&gt;网关地址：rHZP1pA3THovFqvwgtM2tnJWrS54hSrDiG  &lt;/p&gt;
&lt;p&gt;信任额80000WTC(其中WTC要自已输入)&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/wtc2.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;填写万特币名称WTC与数额，比如 8万 WTC。 WTC需要您亲自动手敲入。修改USD为 WTC。&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/wtc3.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;如需要今后交易变现，再设置该网关信任&lt;code&gt;8万人民币&lt;/code&gt;。CNY下拉选择就可以。&lt;/p&gt;
&lt;p&gt;设置网关的时候，不要勾选allow rippling，&lt;strong&gt;就是不允许不同网关间同名虚拟币自由兑换&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;兑换成功的图如下所示   &lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/wtc5.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;个人对WTC观点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;劣势：&lt;/p&gt;
&lt;p&gt;万特币WTC是基于ripple币的一种虚拟币，其本身要依赖于ripple,这是他的一种局限性，目前还没有什么活动，推荐该币的发行者可以多弄些活动，像GKO币一样，让玩家或者爱好者能够真正从中体会出该币的乐趣&lt;/p&gt;
&lt;p&gt;优势：&lt;/p&gt;
&lt;p&gt;万特币WTC是中国人发明的一种虚拟币，比较贴近中国人，诞生于水木清华社会，水木论坛一天有二万多人访问，因此人气会慢慢的涨起来，该币刚开始出来，目前的网关排行如下图所示，从图中看出人气上浮较大，目前该币初出，团队热情较高，此次免费激活钱包加送100WTC，就是最好的证明,同时该币发行量2014年为1500万，大家可以去领一下，前景目前还比较好，目前兑换比是550 WTC=3 ripple,兑换率一直在上涨中!!!&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/wtc.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/wtc4.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;如果觉的本博文对你有用，请捐赠ripple或者wtc(万特币)&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ripple:r42DgYzKysWR3hkoVM4DhEWNH3v7ax24Ag&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>C++中类初始化列表的妙用</title><link href="http://www.yanyulin.info/pages/2014/02/classinitiallist.html" rel="alternate"></link><updated>2014-02-22T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-22:pages/2014/02/classinitiallist.html</id><summary type="html">&lt;p&gt;C++中类初始化列表的妙用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1：类的初始化列表是怎么提高效率的？&lt;/p&gt;
&lt;p&gt;2：类的初始化列表是按照列表中出现的顺序来初始化的吗？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看下面的两个程序代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;construct A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;destruct A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序二：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;construct A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="o"&gt;~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;destruct A&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;程序一被编译器实际转化为了：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//以下代码不可实际运行，只是说明问题&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//调用A的构造函数&lt;/span&gt;
    &lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="nf"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//产生一个临时的对象&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//通过赋值运算符将临时对象付给a&lt;/span&gt;
    &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::~&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//释放临时对象空间&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;下面是相应的汇编代码：可以发现和上面的过程分析是一样的，有兴趣可以自已研究下
程序二在底层被转化成了&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/classinitiallist.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/classlist.png"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;可以发现通过初始化列表在申请了对象a的空间后直接调用初始化列表中指定的构造函数来构造成员对象，因此少了很多中间步骤，因此提高了程序的效率:)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这是程序二对应的汇编代码(看看就知道了吧:))：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;dword&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;ecx&lt;/span&gt;
&lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mov&lt;/span&gt; &lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;dword&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;call&lt;/span&gt; &lt;span class="err"&gt;@&lt;/span&gt;&lt;span class="n"&gt;ILT&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;::&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mf"&gt;0040100f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这了，初始化列表确实能够提高程序的效率，不是吗:)，初始化列表就是指明了应该调用成员对象的哪个构造函数对于第二个问题并不是按初始化列表来构造成员的，就不做实验了，有兴趣的可一块讨论，构造函数初始化的顺序是按这个顺序，先根据基类的声明顺序，调用基类的构造函数，初始化基类，再按照类里面成员对象的声明顺序调用成员对象的构造函数对成员对象进行初始化:)&lt;/p&gt;
&lt;p&gt;以下几种情况一定要用到初始化列表&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1:当初始化一个引用成员对象时&lt;/p&gt;
&lt;p&gt;2:当初始化一个const成员对象时(1、2两种情况可以想想为什么？原理是一样的，注意强调的是对象)&lt;/p&gt;
&lt;p&gt;3:当调用一个基类的构造函数，而它拥有一组带参数的构造函数时&lt;/p&gt;
&lt;p&gt;4:当类里面的成员对象有自已的构造函数时，且有参数时(3、4归为一类，为什么必须使用，原理也是一样的)&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="C++学习"></category></entry><entry><title>[赠送]GKO币每天免费领取10ripple</title><link href="http://www.yanyulin.info/pages/2014/02/gko.html" rel="alternate"></link><updated>2014-02-22T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-22:pages/2014/02/gko.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html" title="烟雨林"&gt;本文&lt;/a&gt;旨在向大家介绍&lt;code&gt;GKO&lt;/code&gt;币，GKO币（Gecko Coin中文名壁虎币）由&lt;code&gt;Daven&lt;/code&gt;创建，GKO币基于Ripple币，以下是Daven创建GKO币的原话翻译：&lt;/p&gt;
&lt;p&gt;我认为ripple是一个有着巨大潜力的大平台。我想为ripple社区建立一些有趣的东西。所以我建立了这个网站，壁虎币是免费赠送给大家的，我想以此让新来者或者有经验的ripple玩家体验ripple的巨大乐趣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本博文的重点是向大家介绍如何获取GKO币，然后通过GKO币每天免费领取10个ripple币&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、在获取GKO币前你必须有一个已经激活的ripple钱包&lt;/p&gt;
&lt;p&gt;2、在钱包中进行如下设置，即添加对GKO币的信任，如何添加对GKO币的信任，可以参考下文&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/jed.html" target="_blank"&gt;
JED币免费获取30 ripple币
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;添加信任的基本信息如下&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/gko1.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;即&lt;/p&gt;
&lt;p&gt;Name/Address：ruazs5h1qEsqpke88pcqnaseXdm6od2xc&lt;/p&gt;
&lt;p&gt;数量填1000 GKO&lt;/p&gt;
&lt;p&gt;最终结果如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/gko2.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;3、打开GKO币的网站，链接如下，填写自已的ripple钱包地址&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.geckocoin.com/" target="_blank"&gt;https://www.geckocoin.com/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如下图所示&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/gko3.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;4、填写完后，点击界面上的&lt;code&gt;Distribution&lt;/code&gt;,进入下图所示界面&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/gko4.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;在该界面上点击&lt;code&gt;Get Package&lt;/code&gt;即可获取GKO币，有两次机会，如果觉的获取的数量少，还可以发回去，再获取一次,当然第二次可能更少啦，由于GKO币已经发了很多，一般来说，可以获取&lt;code&gt;1-6&lt;/code&gt;个左右&lt;/p&gt;
&lt;p&gt;5、&lt;strong&gt;最关键的一步啦，就是将GKO币发向ripple钱包，如下图所示：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img  alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/gko5.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;在发的过程中，由于用户没有设置密码以及邮箱，会提示用户进入设置，这时需要用户发送0.1 xrp设置才会生效，如果大家钱包里没有0.1 xrp,如何获取0.1 xrp,请参考下文&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html" target="_blank"&gt;
免费获取ripple币的方法汇总
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、发送完后，即可到ripple钱包查看是否有GKO币，如下是我的钱包&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/gko6.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;7、&lt;code&gt;讲了这么多，最后一步就是将GKO币转为ripple币啦，开心吧，哈哈，目前1GKO币可以买3.5左右的ripple币&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;转换是点击钱包的左边的Convert(中文兑换)即可，由于兑换率一直变动，1GKO币一般可以兑换2-5个ripple币，如果不会兑换，请参考下文&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/jed.html" target="_blank"&gt;
JED币免费获取30 ripple币
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;如下是我的转换结果&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/gko.html"&gt;
&lt;img  alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/gko7.jpg"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>快速介绍Linux（Linux入门教程）</title><link href="http://www.yanyulin.info/pages/2014/02/linux1.html" rel="alternate"></link><updated>2014-02-22T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-22:pages/2014/02/linux1.html</id><summary type="html">&lt;p&gt;1：严格意义上，可将操作系统定义为一种软件，它控制计算机硬件资源，提供程序运行环境，我们称此种软件为内核，它相对较小，位于环境中心&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen1.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;图一介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;内核的接口称为系统调用（阴影部分）&lt;/p&gt;
&lt;p&gt;公用函数库(如glibc【即C语言库】)是构建在系统调用之上&lt;/p&gt;
&lt;p&gt;Shell是一种特殊的程序，它为其他应用程序提供一个接口&lt;/p&gt;
&lt;p&gt;登录Linux&lt;/p&gt;
&lt;p&gt;登录Linux有两种方式，一种是文本模式登录，一种是图形界面登录&lt;/p&gt;
&lt;p&gt;文本模式登录【没有图形界面，类似于控制台】，在VirtulBox中进入了Linux后，按Ctrl+F1可以进入文本模式如下图&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen2.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;输入用户名与密码即可登录成功结果如下&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen3.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;图中用户名是pengpeng,登录成功后进入用户的家目录&lt;strong&gt;(所谓家目录即/home/pengpeng这个目录，Linux为系统的每个用户都在/home目录下创建了以用户名为名称的目录，作为用户登录成功后的当前目录)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;图三中命令介绍：&lt;/p&gt;
&lt;p&gt;ls 列出当前目录所有文件，不包括隐藏文件&lt;/p&gt;
&lt;p&gt;cd改变目录，&lt;code&gt;cd /home/pengpeng&lt;/code&gt;【/home/pengpeng中/是根目录即根目录-&amp;gt;home目录-&amp;gt;pengpeng，采用的是绝对路径】【备注cd ~ 改变目录为当前家目录】&lt;/p&gt;
&lt;p&gt;图形界面登录略&lt;/p&gt;
&lt;p&gt;附:登录过程&lt;/p&gt;
&lt;p&gt;用户在登录Linux系统时，输入用户名与密码，系统会在其口令文件/etc/passwd中查看校验是否为合法用户，口令文件如下&lt;/p&gt;
&lt;p&gt;在终端上输入&lt;code&gt;vim /etc/passwd&lt;/code&gt;【vim/vi是linux中的一种文本编辑器，默认只安了vi,安装vim输入以下命令sudo su apt-get install vim】&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen4.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;口令文件组成的意思如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pengpeng&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1000&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;pengpeng&lt;/span&gt;&lt;span class="o"&gt;,,,:/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="sr"&gt;/pengpeng:/bin/&lt;/span&gt;&lt;span class="n"&gt;bash&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;其中pengpeng是用户名 x对应的是用户密码【加密了】1000用户ID,1000用户组ID,pengpeng,,,注释字段，/home/pengpeng用户登录后进入的目录【即当前目录为家目录】，/bin/bash登录后用户默认使用的shell即Bourne shell&lt;/p&gt;
&lt;p&gt;Shell&lt;/p&gt;
&lt;p&gt;Shell是一个命令行解释器，它读取用户的输入，然后执行命令，用户通常通过终端(类似于Windows中的cmd.exe)向shell进行输入，Shell有好多种，如Bourne shell, C shell, Korn Shell,等，我们现在使用的一般都是Bourne shell&lt;/p&gt;
&lt;p&gt;文件与目录&lt;/p&gt;
&lt;p&gt;Linux文件系统是目录与文件组成的一种层次结构，目录的起点称为根【名称为/】,每个目录中都包括了两个特殊的文件.与..这两个文件是链接文件，分别指向当前目录与上一级目录&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd .&lt;/code&gt;即转向当前目录【其实不变】 &lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd ..&lt;/code&gt; 返回上一级目录&lt;/p&gt;
&lt;p&gt;Linux系统中以/开关的路径名是绝对路径名，否则为相对路径名&lt;/p&gt;
&lt;p&gt;实例分析：ls的简要现&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen5.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;在终端上输入&lt;code&gt;vim lsM.c&lt;/code&gt;创建如上文件&lt;/p&gt;
&lt;p&gt;说明&lt;/p&gt;
&lt;p&gt;&lt;code&gt;drent.h&lt;/code&gt;中包括对目录进行的相关操作&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DIR&lt;/code&gt;是一个目录结构&lt;/p&gt;
&lt;p&gt;&lt;code&gt;struct dirent&lt;/code&gt;是一个结构体，包涵目录或者文件的相关属性&lt;/p&gt;
&lt;p&gt;编译&lt;code&gt;lsM.c&lt;/code&gt;生成可执行文件，并执行&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxmen6.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Gcc&lt;/code&gt;是C语言编译器, -o选项表示后面是输入的目标文件的文件名 lsM.c表示编译的源程序&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Ls&lt;/code&gt;命令输入后可以发现生成了可执行的lsM&lt;/p&gt;
&lt;p&gt;&lt;code&gt;./lsM&lt;/code&gt; &lt;code&gt;.&lt;/code&gt;可以发现当前目录中包括四个文件&lt;/p&gt;
&lt;p&gt;注意：本程序的输出的文件未进行排序，而ls的输出一般是按照字母的顺序进行输出&lt;/p&gt;
&lt;p&gt;Main函数使用了ISO C标准使用的风格,argc代表传给程序的参数个数，即&lt;code&gt;argv&lt;/code&gt;中的个数&lt;/p&gt;
&lt;p&gt;按惯例当程序返回0时表示正常结束，返回其他值表求出错&lt;/p&gt;
&lt;p&gt;每个进程都有一个工作目录，有时称其为当前工作目录，所有的相对路径都是从工作目录开始解释，进程可以用&lt;code&gt;chrdir&lt;/code&gt;更改其工作目录。&lt;/p&gt;</summary><category term="Linux汇总"></category></entry><entry><title>Linux里的输入输出（Linux快速入门）</title><link href="http://www.yanyulin.info/pages/2014/02/linux2.html" rel="alternate"></link><updated>2014-02-22T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-22:pages/2014/02/linux2.html</id><summary type="html">&lt;p&gt;阅读本博文之前可以参考以下文章&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/linux1.html" target="_blank"&gt;
快速介绍Linux（Linux入门教程）
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux系统中每个文件均有一个文件描述符（文件描述符是一个整数），当内核打开一个文件或者创建一个文件时，返回一个文件描述符，读写文件就可以使用它&lt;/p&gt;
&lt;p&gt;在shell中运行的每个新程序都对应三个文件描述符，标准输入，村准输出，标准出错输出，简单命令&lt;code&gt;ls&lt;/code&gt;三个文件描述符都指向终端（&lt;strong&gt;linux中将设备都当作文件来操作&lt;/strong&gt;），&lt;code&gt;Shell&lt;/code&gt;中也提供了重定向文件输出，将输出重定向到某个文件如：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;将&lt;code&gt;ls&lt;/code&gt;的输出重定向到&lt;code&gt;file.txt&lt;/code&gt;（&lt;strong&gt;此时可以发现控制台上没有输出&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;输入输了关的函数&lt;/p&gt;
&lt;p&gt;不带缓冲的I/O函数有&lt;code&gt;open,read,write,lseek,close&lt;/code&gt;（&lt;code&gt;即中间没有一个缓存区作为过渡&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux2.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxio.jpg" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;注解:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux系统中规定标准输入的文件描述符为0,标准输出为1,标准错误输出为2,&lt;code&gt;STDIN_FILENO&lt;/code&gt;与&lt;code&gt;STDOUT_FILENO&lt;/code&gt;分别指定了输入输出的来源&lt;/p&gt;
&lt;p&gt;Read函数返回读的字节数，当到达文件未尾时返回0，如果发生读错误返回-1&lt;/p&gt;
&lt;p&gt;标准I/O，标准I/O函数提供一种带缓冲的I/O函数，并简化了对输入出输出的处理，如fgets(标准函数)函数能读一个完整的行。而read（不带缓存）只能以字节读取。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;程序与进程&lt;/p&gt;
&lt;p&gt;程序的执行实例被称为进程，&lt;code&gt;Unix&lt;/code&gt;系统确保每个进程都有一个唯一的数字标识符，称为进程ID.&lt;/p&gt;
&lt;p&gt;进程控制的三个主要函数：&lt;code&gt;fork exec waitpid&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;示例程序：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux2.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxio1.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;
&lt;p&gt;程序解释如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;标准I/O函数fgets从标准输入中一次读取一行，fgets读取的字符串以换行符做做为结束，面execlp要求其参数是以null结束，故要进行转换。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Fork&lt;/code&gt;创建新进程，新进程是调用进程的复制品，fork向父进程返回新创建进程的ID,对子进程而言，返回的是0,(&lt;strong&gt;fork调用一次，返回两次&lt;/strong&gt;)&lt;/p&gt;
&lt;p&gt;父进程希望等待子进程终止，则需要调用函数waitpid函数，其参数为要等待进程的ID&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;线程与线程ID&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;线程的提出是为了利用多处理器的并行性，以及程序任务的划分。进程中的所有线程共享地址空间，文件描述符，堆栈，以及进程相关属性。正因为这些特性，才产生了线程的同步问题。&lt;/p&gt;
&lt;p&gt;线程也有ID,但ID只在它所属的进程内起作用，离开了其所属的进程，谈线程没意义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;出错处理：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;文件&lt;errno.h&gt;中定义了符号errno(函数返回的错误代码)可被赋予的各种常量，这些常量均以字符E开头，如EMSGSIZE表示消息过长。    要使用errno需要包函&lt;errno.h&gt;这个头文件，同时在&lt;string.h&gt;中也提供了&lt;/p&gt;
&lt;p&gt;将错误代码转换成有意义的字符串操作函数如：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;strerror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;&amp;lt;stdio.h&amp;gt;&lt;/code&gt;中也提供了基于&lt;code&gt;errno&lt;/code&gt;在标准出错上产生一条出错消息的函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//输出msg指向的字符串，后一冒号，一空格，接着是errno值对应的出错信息，最后是一个换行符。&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;示例程序如下：&lt;/p&gt;
&lt;p&gt;&lt;center&gt;
&lt;a href="http://www.yanyulin.info/pages/2014/02/linux2.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/tech/linuxio2.png" alt="烟雨林博客"/&gt;
&lt;/a&gt;
&lt;/center&gt;&lt;/p&gt;</summary><category term="Linux汇总"></category></entry><entry><title>JED币免费获取30 ripple币</title><link href="http://www.yanyulin.info/pages/2014/02/jed.html" rel="alternate"></link><updated>2014-02-17T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-17:pages/2014/02/jed.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;
&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg" title="烟雨林"&gt;本文&lt;/a&gt;旨在向大家介绍&lt;code&gt;JED&lt;/code&gt;币，JED币是为了纪念&lt;code&gt;Ripple&lt;/code&gt;公司的一个员工，由论坛用户&lt;code&gt;lucky331&lt;/code&gt;发行，用户只需要几步简单的操作，就可以获取9,999,999个JED币，然后再将这些JED币转为Ripple币后，用户即可以免费获得30个Ripple币，祝大家都能够获得&lt;/p&gt;
&lt;p&gt;1、获得JED币前需要添加Ripple信任线，即信任该币的发行方，如下图所示，点击增加信任线&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg"&gt;&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/jed_1.jpg" width="100%"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、在下图界面中，进行如下设置，设置后点击Grant Trust对其进行信任即可&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg"&gt;&lt;img src="http://www.yanyulin.info/pics/invest/jed_2.jpg" alt="烟雨林博客" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;图中的ripple地址为：rMUVZiUKrcZNqfpgNJRqQjpatGCPZSdrB8&lt;/p&gt;
&lt;p&gt;数量为9999999&lt;/p&gt;
&lt;p&gt;3、设置完之后，参考&lt;a href="http://www.yanyulin.info/pages/2014/02/xrptalk.html" target="blank"&gt;XRP Talk论坛注册教程&lt;/a&gt;在该论坛中注册帐号，并根据第六步将自已的ripple钱包地址设为签名&lt;/p&gt;
&lt;p&gt;4、找到这篇帖子，帖子地址如下，对其进行回复，回复内容如下图如示&lt;/p&gt;
&lt;p&gt;&lt;a href="https://xrptalk.org/topic/1243-got-jed-giveaway/" target="_blank"&gt;https://xrptalk.org/topic/1243-got-jed-giveaway/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg"&gt;&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/jed_3.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、接下来做的就是等，大概半天左右会向你的ripple帐号发送9,999,999个JED币，有了这些币后，到你的ripple帐户点击兑换(英文是Convet)将其转为ripple币，如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg"&gt;&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/jed_4.jpg" width="100%"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、兑换成功结果如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pics/inverst/jed_1.jpg"&gt;&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/invest/jed_5.jpg"/&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html" target="_blank"&gt;
免费获取ripple币的方法汇总&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/whyRipple.html" target="_blank"&gt;
为什么大家都转向了Ripple&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>XRP Talk论坛注册教程</title><link href="http://www.yanyulin.info/pages/2014/02/xrptalk.html" rel="alternate"></link><updated>2014-02-17T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-17:pages/2014/02/xrptalk.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;
玩&lt;code&gt;Ripple&lt;/code&gt;币的估计基本上都知道&lt;code&gt;XRP Talk&lt;/code&gt;论坛，在这个论坛上有各种各样的关于&lt;code&gt;Ripple&lt;/code&gt;的介绍，要想了解&lt;code&gt;Ripple&lt;/code&gt;的最新信息以及官方或者个人团队的各种赠送活动，那么此论坛是必须要了解的，并且必须要注册的，本篇博文就带领大家来注册一个&lt;code&gt;XRP Talk&lt;/code&gt;论坛的帐号，有了帐号后，才有机会在该论坛获得赠送。&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;XRP Talk&lt;/code&gt;论坛的网址，在浏览器上输入以下网址，或者直接点击下面的链接&lt;/p&gt;
&lt;p&gt;&lt;code&gt;XRP Talk&lt;/code&gt;:&lt;a href="https://xrptalk.org/"&gt;https://xrptalk.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、在该网站的右上角，找到&lt;code&gt;Create Account&lt;/code&gt;,如下图所示，点击&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/xrptalk.html"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/xrptalk_1.jpg"/&gt;&lt;/p&gt;
&lt;p&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、进入如下图所示的界面，在该界面中输入你的用户信息&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/xrptalk.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/xrptalk_2.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、点击进入下一步，此时&lt;code&gt;XRP Talk&lt;/code&gt;论坛已向您的邮箱发送了邮件，打开您的邮箱，点击链接，即可激活该帐户&lt;/p&gt;
&lt;p&gt;5、&lt;strong&gt;重要&lt;/strong&gt;,注册成功后，要给自已的帐户设置ripple地址签名，这样设置之后，以后用户每次在论坛上回复时都可以自动签上自已的ripple地址，而不用每次都写，如下图所示，点击红色方框里的内容，进入下一个页面，在下一个页面中点击Edit my profile&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/xrptalk.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/xrptalk_3.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、此时，界面如下图所示，在此图中红色方框Signature表示给帐户设置签名，点击此处写上自已的ripple地址，另一个红色方框则表示给帐户设置图片&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/xrptalk.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/invest/xrptalk_4.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>程序员面试宝典--欧立奇</title><link href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" rel="alternate"></link><updated>2014-02-15T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-02-15:pages/2014/02/pbaodian.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;程序员面试宝典 PDF格式下载:&lt;a href="http://pan.baidu.com/s/1pJvypIV" target="_blank" title="《程序员面试宝典》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序员面试宝典本书涉及的内容&lt;code&gt;较多&lt;/code&gt;，书中的测重点在程序语言上，主要关注的是面试过程中公司问起的关于程序语言方面的题目，比较适合小型的&lt;code&gt;IT&lt;/code&gt;公司，同时书中第一篇也介绍了面试前的准备，面试的流程，面试的心态，最后也给出某些公司面试过程中爱考的智力题，但是对于应该名企，该书还少了点算法，总之还是不错的，可以应付找工作。&lt;/p&gt;
&lt;p&gt;程序员面试宝典--欧立奇&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第1章 应聘求职 3&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 应聘渠道 3&lt;/p&gt;
&lt;p&gt;1.2 应聘流程 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第2章 简历书写 5&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1 简历注意事项 5&lt;/p&gt;
&lt;p&gt;2.2 简历模板 8&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第3章 3种考试 13&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1 笔试 13&lt;/p&gt;
&lt;p&gt;3.2 电话面试 15&lt;/p&gt;
&lt;p&gt;3.3 面试 16&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4章 职业生涯发展规划 19&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.1 缺乏工作经验的应届毕业生 19&lt;/p&gt;
&lt;p&gt;4.2 更换工作的程序员们 21&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第5章 程序设计基本概念 25&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5.1 赋值语句 25&lt;/p&gt;
&lt;p&gt;5.2 i++ 27&lt;/p&gt;
&lt;p&gt;5.3 编程风格 29&lt;/p&gt;
&lt;p&gt;5.4 类型转换 30&lt;/p&gt;
&lt;p&gt;5.5 螺旋队列 34&lt;/p&gt;
&lt;p&gt;5.6 a、b交换 35&lt;/p&gt;
&lt;p&gt;5.7 C和C++的关系 36&lt;/p&gt;
&lt;p&gt;5.8 程序设计其他问题 37&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第6章 预处理、const与sizeof 39&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.1 宏定义 39&lt;/p&gt;
&lt;p&gt;6.2 const 41&lt;/p&gt;
&lt;p&gt;6.3 sizeof 42&lt;/p&gt;
&lt;p&gt;6.4 内联函数和宏定义 55&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第7章 指针与引用 57&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7.1 指针基本问题 57&lt;/p&gt;
&lt;p&gt;7.2 传递动态内存 65&lt;/p&gt;
&lt;p&gt;7.3 函数指针 71&lt;/p&gt;
&lt;p&gt;7.4指针数组和数组指针73&lt;/p&gt;
&lt;p&gt;7.5 迷途指针 77&lt;/p&gt;
&lt;p&gt;7.6 指针和句柄 79&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第8章 循环、递归与概率 81&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;8.1 递归基础知识 81&lt;/p&gt;
&lt;p&gt;8.2 典型递归问题 83&lt;/p&gt;
&lt;p&gt;8.3 打靶 84&lt;/p&gt;
&lt;p&gt;8.4 字符子串 89&lt;/p&gt;
&lt;p&gt;8.5 循环语言 91&lt;/p&gt;
&lt;p&gt;8.6 0-1背包 94&lt;/p&gt;
&lt;p&gt;8.7 概率 95&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第9章 STL模板与容器 97&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;9.1 向量容器 98&lt;/p&gt;
&lt;p&gt;9.2 泛型编程 103&lt;/p&gt;
&lt;p&gt;9.3 模板 105&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第10章 面向对象 109&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10.1 面向对象的基本概念 110&lt;/p&gt;
&lt;p&gt;10.2 类和结构 111&lt;/p&gt;
&lt;p&gt;10.3 成员变量 113&lt;/p&gt;
&lt;p&gt;10.4 构造函数和析构函数 117&lt;/p&gt;
&lt;p&gt;10.5拷贝构造函数和赋值函数 119&lt;/p&gt;
&lt;p&gt;10.6多态的概念 123&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;第11章 继承与接口 127&lt;/p&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;11.1 覆盖 128&lt;/p&gt;
&lt;p&gt;11.2 私有继承 130&lt;/p&gt;
&lt;p&gt;11.3 虚函数继承和虚继承 137&lt;/p&gt;
&lt;p&gt;11.4 多重继承 141&lt;/p&gt;
&lt;p&gt;11.5 检测并修改不适合的继承 142&lt;/p&gt;
&lt;p&gt;11.6 纯虚函数 146&lt;/p&gt;
&lt;p&gt;11.7 COM 148&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第12章 位运算与嵌入式编程 151&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;12.1 位制转换 151&lt;/p&gt;
&lt;p&gt;12.2 嵌入式编程 157&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第13章数据结构基础167&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;13.1 单链表 167&lt;/p&gt;
&lt;p&gt;13.2 双链表 173&lt;/p&gt;
&lt;p&gt;13.3 循环链表 176&lt;/p&gt;
&lt;p&gt;13.4 队列 177&lt;/p&gt;
&lt;p&gt;13.5 堆栈 180&lt;/p&gt;
&lt;p&gt;13.6 树 185&lt;/p&gt;
&lt;p&gt;13.7 排序 185&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第14章 字符串 203&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;14.1 整数字符串转化 203&lt;/p&gt;
&lt;p&gt;14.2 字符数组和strcpy 205&lt;/p&gt;
&lt;p&gt;14.3 数组越界 210&lt;/p&gt;
&lt;p&gt;14.4 数字流和数组声明 212&lt;/p&gt;
&lt;p&gt;14.5 字符串其他问题 213&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第15章 设计模式 219&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;15.1 设计模式 220&lt;/p&gt;
&lt;p&gt;15.2 软件工程 235&lt;/p&gt;
&lt;p&gt;15.3 C#基础 237&lt;/p&gt;
&lt;p&gt;15.4 C#继承 240&lt;/p&gt;
&lt;p&gt;15.5 C#委托 249&lt;/p&gt;
&lt;p&gt;15.6 ASP NET 251&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第16章 操作系统 257&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;16.1 进程 257&lt;/p&gt;
&lt;p&gt;16.2 图形学 259&lt;/p&gt;
&lt;p&gt;16.3内存管理261&lt;/p&gt;
&lt;p&gt;16.4 DOS、Linux、UNIX 271&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第17章 数据库与SQL语言 273&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;17.1 数据库理论 273&lt;/p&gt;
&lt;p&gt;17.2 SQL语言 276&lt;/p&gt;
&lt;p&gt;17.3 SQL语言客观题 279&lt;/p&gt;
&lt;p&gt;17.4 SQL语言主观题 282&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第18章 计算机网络及分布式系统285&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;18.1 网络结构 285&lt;/p&gt;
&lt;p&gt;18.2 TCP/IP 288&lt;/p&gt;
&lt;p&gt;18.3 SNMP 292&lt;/p&gt;
&lt;p&gt;18.4 网络其他问题 295&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第19章 英语面试 301&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;19.1 面试过程和技巧 301&lt;/p&gt;
&lt;p&gt;19.2 关于工作（About Job） 303&lt;/p&gt;
&lt;p&gt;19.3 关于个人（About Person） 308&lt;/p&gt;
&lt;p&gt;19.4 关于未来（About Future） 311&lt;/p&gt;
&lt;p&gt;19.5 其他建议（Other Tips） 312&lt;/p&gt;
&lt;p&gt;19.6 英文面试常用词汇 313&lt;/p&gt;
&lt;p&gt;19.6.1 工作经历相关词汇 313&lt;/p&gt;
&lt;p&gt;19.6.2 个人资料相关词汇 314&lt;/p&gt;
&lt;p&gt;19.6.3 个人品质相关词汇 315&lt;/p&gt;
&lt;p&gt;19.6.4 学历相关词汇 316&lt;/p&gt;
&lt;p&gt;19.6.5 离职原因相关词汇 318&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第20章 电话面试 319&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;20.1 电话面试之前的准备工作 319&lt;/p&gt;
&lt;p&gt;20.2 电话面试交流常见问题 320&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第21章 智力测试 329&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;21.1 关于数字的智力测试 329&lt;/p&gt;
&lt;p&gt;21.2 关于推理的智力测试 332&lt;/p&gt;
&lt;p&gt;21.3 关于时间的智力测试 333&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;附录A 简历模板 339&lt;/p&gt;
&lt;p&gt;附录B 面试经历总结 351&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="面试书"></category></entry><entry><title>去哪儿网校招2014年面经</title><link href="http://www.yanyulin.info/pages/2014/01/qunar_1.html" rel="alternate"></link><updated>2014-01-20T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-20:pages/2014/01/qunar_1.html</id><summary type="html">&lt;p&gt;面试地点:&lt;strong&gt;沈阳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;软件研发工程师(北京)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试结果:&lt;code&gt;失败&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;去哪儿&lt;/strong&gt;目前来说还是一个比较不错的公司，待遇还行，技术上不是很了解，今年校招待遇一般是&lt;code&gt;11-16k/m&lt;/code&gt;,每年发&lt;code&gt;13&lt;/code&gt;个月的基本工资，三个月的奖金，其中奖金的比例是7：2：1，即&lt;code&gt;10%&lt;/code&gt;的人可能拿不到那三个月的奖金，也就是说其他的人不但能拿到这三个月的奖金而且还可高会高于三个月&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;好处&lt;/strong&gt;讲了这么多，但是去哪儿网这个蛋疼的小公司，面试过程极不规范，而且面试官的水平以及态度个人感觉有待商量，总之给我的感觉很差&lt;/p&gt;
&lt;p&gt;在讲面试前，还是先回忆一下我的悲催经历，参加完去哪网笔试完，个人感觉答的还凑合，在参加笔试前由师姐将我们班的所有人都内推了，师姐说只要是内推的，就一定能进面试，笔试完当天夜晚，去哪网就开始发笔试，一夜间，整个班的人都收到了面试通知，而我没有收到，心凉透了，于是第二天跟着他们前去，准备开始霸面，在哪苦苦求了&lt;code&gt;HR&lt;/code&gt;好久，&lt;code&gt;HR&lt;/code&gt;很勉强的说看看吧，看看下午6点时能不能给你个机会，于是我就开始等，从上午一直等到了下午一点，那个心情呀，哎，下午一点时，我陪同学去看看面试的名单，尽然发现我在名单里(意味着什么，意味着面试名单中有我，而&lt;code&gt;HR&lt;/code&gt;却没有通知到我，面试时间是下午4点钟)，我的心情变的开始激动，人生好像是从大悲到了大喜，下午四点时开始了面试，面我的面试官感觉可不耐心了，可能是太恶了吧，或者面了一天，累了，一会走来走去，给了一支笔，让我写程序，我能说的就是连笔头都没有，写程序的纸，妈的，那叫纸嘛，没地方写啦，面试官态度极差，问的问题，大家看看剑指offer基本上都能搞写，在就是卷子上的题目,我是用C语言写的算法，他让我用Java写，心情失落了一天，这个算法改写成Java写的不是很好，最后还是让我进了二面，能说的还有一个问题，就是面我的面试官面的所有人过的很少，我们班被他面的，都挂了，所以面试时遇到一个好的面试官是非常重要的，基实面试官和面试都都不容易，希望都能相互理解&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;剑指offer下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" target="_blank"&gt;程序员面试宝典下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;去哪网一面：&lt;/p&gt;
&lt;p&gt;1、自我介绍一下，去哪网笔试时好像比较期待面试者自我介绍的比较长点&lt;/p&gt;
&lt;p&gt;2、写一个单例模式&lt;/p&gt;
&lt;p&gt;3、将卷子上的第一道算法题改成Java实现&lt;/p&gt;
&lt;p&gt;4、面向对象语言的基本特征&lt;/p&gt;
&lt;p&gt;去哪网二面:&lt;/p&gt;
&lt;p&gt;去哪网二面时由于一面给的等级比较低，二面时面的时间比较短，5分钟就让我出来了，哎，就问了下对什么比较感兴趣，你觉的你感兴趣的东西未来的发展走向，就完了&lt;/p&gt;
&lt;p&gt;最后总结一下，去哪网总共有三面，最后一面直接是&lt;code&gt;HR&lt;/code&gt;面，而且比较好拿Offer,我们班好多人都拿到了，我能说的，就是面试比较水，大家也是这么说~~~&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="去哪面经"></category></entry><entry><title>阿里巴巴校招2014年软研面经</title><link href="http://www.yanyulin.info/pages/2014/01/ali_1.html" rel="alternate"></link><updated>2014-01-19T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-19:pages/2014/01/ali_1.html</id><summary type="html">&lt;p&gt;面试地点:&lt;strong&gt;沈阳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;软件研发工程师(北京)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阿里&lt;/strong&gt;一个非常神圣的公司，如果将&lt;code&gt;BAT&lt;/code&gt;按照每年的盈利来说，实际上应该叫做&lt;code&gt;TAB&lt;/code&gt;,腾讯的盈利是最大的，其次就是阿里，再次就是百度，如果按照员工的待遇来排序的话，应该叫做&lt;code&gt;ABT&lt;/code&gt;,三家公司的待遇阿里最高，一般是&lt;code&gt;15K*15&lt;/code&gt;,其次是百度一般&lt;code&gt;13*14.6&lt;/code&gt;，再次就是腾讯....&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;阿里&lt;/strong&gt;总的来说面试还是比较轻松，如果不是算法工程师，就是开发或者研发工程师，一般问的都是一些比较基本的东西&lt;/p&gt;
&lt;p&gt;阿里我走的是实习路线，然后再由实习转入校招，阿里会在每年的四月份进行实习生招聘，此次实习生招聘不压于校招，据说比校招还难，校招时卷子上出的题目就有实习生招聘时卷子上出的题目，所以在此强烈推荐大家都参加阿里的实习生招聘，无论是报着什么目的，并且阿里实习生的待遇还是相当不错的~~&lt;/p&gt;
&lt;p&gt;由于我在沈阳，而阿里的实习生招聘笔试均在北京，所以未参加，所有的面试都是通过电话面试的&lt;/p&gt;
&lt;p&gt;以下仅是回忆，时间比较久远，多少回忆点吧&lt;/p&gt;
&lt;p&gt;电话一面&lt;/p&gt;
&lt;p&gt;1、String,StringBuffer,StringBuilder的区别&lt;/p&gt;
&lt;p&gt;2、GetBuffer的缓存&lt;/p&gt;
&lt;p&gt;3、C语言与C++的区别&lt;/p&gt;
&lt;p&gt;4、说说STL&lt;/p&gt;
&lt;p&gt;5、做过Java相关的项目简介&lt;/p&gt;
&lt;p&gt;6、MFC中点击一个铵钮的整个消息响应流程&lt;/p&gt;
&lt;p&gt;在此这里有些问题，大家可以看一下程序员面试宝典，程序员面试宝典可以应付一下面试、笔试，但是个人不推荐&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/02/pbaodian.html" target="_blank"&gt;程序员面试宝典下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;电话二面：&lt;/p&gt;
&lt;p&gt;1、自我介绍&lt;/p&gt;
&lt;p&gt;2、如果让你来设计一种程序设计语言，你会怎么来设计&lt;/p&gt;
&lt;p&gt;3、Java里的泛型有没有类型推导机制&lt;/p&gt;
&lt;p&gt;4、讲讲泛型里面的类型推导机制&lt;/p&gt;
&lt;p&gt;5、做过Java相关的项目没&lt;/p&gt;
&lt;p&gt;电话三面：&lt;/p&gt;
&lt;p&gt;其实到这里就是&lt;code&gt;HR&lt;/code&gt;面了，简单问一下什么时候能过来实习，如果不能过来的话，将在校招时不需要参加笔试，而是直接进入最后一面，仅此而已&lt;/p&gt;
&lt;p&gt;校招最后一面:&lt;/p&gt;
&lt;p&gt;校招最后一面，很悲剧，在阿里实习了两个月了，而自已所在的部门，个人感觉不利于自已的发展，就是网站的日常维护，实在是了无兴趣，因此最后一面，强烈要求换部门，而且还换到北京去，而且还很坚决，估计是自已对那个部门，真的是太失望了吧，面试官说，此次来沈阳招的都是去杭州的，最后给我实习的部门老大打完电话，我就被拒了，可能自已当时也有点犯二吧，阿里虽然把我拒了，但是阿里确实是一个不错的企业~~~&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="阿里面经"></category></entry><entry><title>百度校招2014年软研面经</title><link href="http://www.yanyulin.info/pages/2014/01/baidu_1.html" rel="alternate"></link><updated>2014-01-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-18:pages/2014/01/baidu_1.html</id><summary type="html">&lt;p&gt;面试地点:&lt;strong&gt;沈阳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;软件研发工程师(北京)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;百度&lt;/strong&gt;面试总结来说，还是非常正规的，而且具有挑战性的，百度面试一般都是有&lt;code&gt;四面&lt;/code&gt;的，前&lt;code&gt;三面&lt;/code&gt;是技术面，后一面是&lt;code&gt;HR&lt;/code&gt;面，&lt;code&gt;百度&lt;/code&gt;与&lt;code&gt;阿里&lt;/code&gt;的面试是我面过这么多公司最正规的，由于面的是软研，面软研的人比较多，因此一二三面都是一般隔一到两天进行，如果你非常想进&lt;code&gt;百度&lt;/code&gt;的话，可以选择报的人数比较少的部门，如&lt;code&gt;运维&lt;/code&gt;，&lt;code&gt;移动开发&lt;/code&gt;等，一般都是三面在一天内进行。&lt;/p&gt;
&lt;p&gt;在此&lt;strong&gt;提醒一下&lt;/strong&gt;,笔试成绩是非常重要的，百度的面试一般是按照笔试成绩来排的，成绩越高，面试时越靠前，当然面的也就越认真，&lt;code&gt;据说，一般录取的就是笔试成绩靠前的人&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;百度一面：百度一面在&lt;code&gt;算法&lt;/code&gt;方面，可以好好看看&lt;code&gt;剑指offer&lt;/code&gt;以及&lt;code&gt;编程之美&lt;/code&gt;这两本书，考我的算法就是来自于这两本书里的&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/03/offer.html" target="_blank"&gt;剑指offer下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/prgbeautiful.html" target="_blank"&gt;编程之美下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;百度一面：&lt;/p&gt;
&lt;p&gt;时问我的问题，大概有以下几个&lt;/p&gt;
&lt;p&gt;1、自我介绍一下&lt;/p&gt;
&lt;p&gt;2、让我画一下对象的内存布局图，即有虚函数，虚析构函数时的对象内存布局图，这个看过&amp;lt;&amp;lt;深入理解C++对象模型&amp;gt;&amp;gt;这本书的人应该不成问题&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/objectModel.html" target="_blank" &gt;深入理解C++对象模型下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、线程之间通信的机制？进程之间通信的机制?&lt;/p&gt;
&lt;p&gt;4、Socket中的阻塞与非阻塞模型?以及如何提高效率?&lt;/p&gt;
&lt;p&gt;5、算法：给定一个序列，如何快速的查找出这个序列中第一次出现一次的字符?(&lt;strong&gt;提示&lt;/strong&gt;采用hash,面试官还会让你尽一步缩小时间复杂度，这里可以考虑采用两次&lt;code&gt;hash&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;百度二面：&lt;/p&gt;
&lt;p&gt;时问的比较深(个人感觉答的不是很好)：&lt;/p&gt;
&lt;p&gt;1、看我的简历上写了数据库，上来就搞了个可复杂的关系图，让我设计数据库，我当场头晕了~~&lt;/p&gt;
&lt;p&gt;2、问我网络，数据库，操作系统哪个方面比较熟悉，然后就捉死的问那个你熟悉的方面&lt;/p&gt;
&lt;p&gt;3、各种锁的设计，例如让你设计非阻塞锁，阻塞锁&lt;/p&gt;
&lt;p&gt;4、如给给一个类型进行加锁，如果是这个类型的话，都加锁&lt;/p&gt;
&lt;p&gt;5、STL源码中的一些基本问题，如HashMap的实现(&lt;code&gt;这个是SGI STL对STL的扩展&lt;/code&gt;)等?推荐大家看一下&amp;lt;&lt;STL源码剖析&gt;&amp;gt;这本书，&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/stlOrigin.html" target="_blank"&gt; STL源码剖析下载地址 &lt;/a&gt;&lt;/p&gt;
&lt;p&gt;6、还有一些问题，具体的忘了&lt;/p&gt;
&lt;p&gt;百度三面时：&lt;/p&gt;
&lt;p&gt;1、自我介绍&lt;/p&gt;
&lt;p&gt;2、项目介绍，如果让你设计一个项目时，你的流程?&lt;/p&gt;
&lt;p&gt;3、在项目介绍的过程中，会问你这个项目的设计的过程中，你都考虑了哪些问题?&lt;/p&gt;
&lt;p&gt;4、让你设计一个微博系统&lt;/p&gt;
&lt;p&gt;百度四面时：&lt;/p&gt;
&lt;p&gt;第四面，就不用说了，是&lt;code&gt;HR&lt;/code&gt;面，你有啥说啥，有啥问啥，没什么好拘谨的~~&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="百度面经"></category></entry><entry><title>免费获取ripple币的方法汇总</title><link href="http://www.yanyulin.info/pages/2014/01/freexrp.html" rel="alternate"></link><updated>2014-01-09T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-09:pages/2014/01/freexrp.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to get free ripples?&lt;/strong&gt;
**
&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html" title="烟雨林"&gt;本文&lt;/a&gt;旨在汇集获取免费&lt;code&gt;Ripple&lt;/code&gt;币的方法途径，与ripple币的爱好者共享，如果觉的不错的，可以&lt;a href="http://yanyulin.duoshuo.com/share-proxy/?service=weibo&amp;thread_id=1163430636745130206"&gt;点击此处&lt;/a&gt;，将此条微博转发出去，让更多的人知道ripple,让ripple涨的更猛烈些&lt;/p&gt;
&lt;p&gt;1、以下是一个网站，每天可以领取一次，一次领取量是0-1个ripple币，操作方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.点击&lt;a href="http://www.ripplegiveaway.com/index.php" target="_blank"&gt;网站链接&lt;/a&gt;进入网站首页&lt;/p&gt;
&lt;p&gt;2.在下图所示的图片输入框中输入你的ripple钱包地址，点击Drip即可获取ripple啦&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/freexrp.html"&gt;&lt;img src="http://www.yanyulin.info/pics/zatan/freexrp_1.jpg" alt="烟雨林博客" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.以上方法获取ripple币要求钱包必须处于激活状态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、最大的比特币和山寨币讨论平台&lt;a href="https://bitcointalk.org/" target="_blank" &gt;bitconitalk&lt;/a&gt;。可以去这个网站领取些其它的货币，然后去&lt;a href="http://www.cryptsy.com" target="_blank"&gt;cryptsy&lt;/a&gt;转换成你想要的的货币，一些山寨币的在线钱包大家可以注册&lt;code&gt;cryptsy&lt;/code&gt;，这样不用下在钱包客户端更新数据块了。&lt;code&gt;cryptsy&lt;/code&gt;含有120种电子货币，几乎都是些常见，如果也没有的你需要的钱包，你可以&lt;code&gt;去coinedup.com，&lt;/code&gt;这个网站上的都是些最新的比较火的电子货币，像QQC、DIME、MEOW等，此外也可以申请bter和比特时代的在线钱包。然后大家通过转换将货币赚到比特时代某个货币的在线钱包上，这样就可以转换成&lt;code&gt;ripple&lt;/code&gt;了。实在闲的人可以玩玩...&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;备注bitcoin中文版论坛&lt;a href="https://bitcointalk.org/index.php?board=118.0" target="_blank"&gt;点此处&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、官方赠送，官方赠送一般会通过其官方的论坛公布，官方论坛主要有两个，一个是&lt;a href="https://ripple.com/forum/" target="_blank"&gt;ripple froum&lt;/a&gt;,另一个是&lt;a href="https://xrptalk.org/" target="_blank"&gt;xrp talk&lt;/a&gt;，大家可以每天花费一到两分钟浏览下&lt;/p&gt;
&lt;p&gt;4、注册&lt;code&gt;ripple&lt;/code&gt;网关赠送，如&lt;code&gt;SnapSwap&lt;/code&gt;网关会赠送2000 ripple,网关地址&lt;a href="https://www.snapswap.us/#/bonus/2000/xrp/how/to" target="_blank"&gt;点这里&lt;/a&gt;,不过这个赠送是有条件的，要向这个网关存10美元，不过网关还是挺正正规的，所以大家还是可以放心，只不过对于大部分国人来说，估计都不会去选择这个方法&lt;/p&gt;
&lt;p&gt;5、OpenCoin.in论坛，当用户每次在论坛上发一个帖子时，会奖励一个xrp,并且每周会给发贴最多的用户奖励100 XRP,论坛地址&lt;a href="http://www.opencoin.in/" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;How to get free ripples?&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;a href="http://www.ripplegiveaway.com/index.php" target="_blank"&gt;ripplegiveaway&lt;/a&gt; is giving away 0-1 XRP, It's so easy, you just need to enter your ripple address&lt;/p&gt;
&lt;p&gt;2、&lt;a href="https://bitcointalk.org/" target="_blank" &gt;bitconitalk&lt;/a&gt; is the largest Bitcoin currency platform for discussion, new coins offen issue in the website,You can go to this site to receive some other coins, then you can exchange with the currency by the &lt;a href="http://www.cryptsy.com" target="_blank"&gt;cryptsy&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、You should always pay attention to this two forums &lt;a href="https://ripple.com/forum/" target="_blank"&gt;ripple froum&lt;/a&gt; 、&lt;a href="https://xrptalk.org/" target="_blank"&gt;xrp talk&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;4、&lt;a href="https://www.snapswap.us/#/bonus/2000/xrp/how/to" target="_blank"&gt;SnapSwap.us&lt;/a&gt; is giving away 2,000 XRPs when you open up an account and link it to Dwolla! Also, receive 500 XRP with your first deposit of $10.00 or more from your bank account to your Ripple Wallet, and 3 XRP with every subsequent $1.00 deposited, up to 300 XRP per transaction and up to 2,000 XRP total.&lt;/p&gt;
&lt;p&gt;5、The &lt;a href="http://www.opencoin.in/" target="_blank"&gt;OpenCoin.in&lt;/a&gt; forum is giving away 1 XRP for every forum post and awarding 100 XRP every week to the member who posts the most that week!&lt;/p&gt;
&lt;p&gt;参考文章&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2014/01/whyRipple.html" target="_blank"&gt;为什么大家都转向了ripple&lt;/a&gt;&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>pelican创建博客常见问题汇总</title><link href="http://www.yanyulin.info/pages/2014/01/pelican_question.html" rel="alternate"></link><updated>2014-01-08T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-08:pages/2014/01/pelican_question.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;1、No valid files found in content errors&lt;/p&gt;
&lt;p&gt;当用&lt;code&gt;pelican&lt;/code&gt;创建博客时出现此问题的原因是因为&lt;code&gt;pelican&lt;/code&gt;创建博客时读取到&lt;code&gt;contents&lt;/code&gt;目录下的md文件，而md文件需要&lt;code&gt;markdown&lt;/code&gt;的相库库解析，&lt;code&gt;pelican&lt;/code&gt;此时缺少该库，因此可以通过以下命令安装&lt;code&gt;markdown&lt;/code&gt;的相应库&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;markdown&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果你还没有安装&lt;code&gt;pip&lt;/code&gt;工具，可以参考下面一篇文章安装&lt;code&gt;pip&lt;/code&gt;工具&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" title="pelican搭建属于自已的博客"&gt;pelican搭建属于自已的博客&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;安装完问题大概即可解决&lt;/p&gt;
&lt;p&gt;2、markdown即md文件中可不可以包含其他元数据?pelican要求md文件必须包含&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;title&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;XXX&lt;/span&gt;
&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;XXX&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用户也可以创建自定义的元数据，例如给每一篇文章增加一个修改日期&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Modified&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2012&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在后绪的模板页中可以直接访问该元数据，例如在&lt;code&gt;article.html&lt;/code&gt;中可以使用以下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;article.modified&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="x"&gt;Last modified: &lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;article.modified&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;&lt;span class="x"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;如果需要在&lt;code&gt;article.html&lt;/code&gt;以外的地方使用该元数据，需要在使用的地方加上如下语句&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="n"&gt;and&lt;/span&gt; &lt;span class="n"&gt;article&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;modified&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、如何禁用feed&lt;/p&gt;
&lt;p&gt;pelican中禁用feed的产生是非常容易的，只需要在配置文件&lt;code&gt;pelicanconf.py&lt;/code&gt;中加入如下几条语句即可完成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;FEED_ALL_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;span class="n"&gt;TRANSLATION_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;None&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、warning about feeds generated without SITEURL being set properly&lt;/p&gt;
&lt;p&gt;RSS and Atom feeds要求URL必须是绝对链接，而不是相对链接，因此为了产生正确的链接，pelican要求在配置文件中必须设置SITEURL选项，否则产生的RSS与Feeds可能不正确&lt;/p&gt;
&lt;p&gt;5、如何给一篇文章指定URL&lt;/p&gt;
&lt;p&gt;在需要指定URL的文章或者页面中包括两个元数据&lt;code&gt;url&lt;/code&gt;与&lt;code&gt;save_as&lt;/code&gt;,例如以下代码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;override&lt;/span&gt;&lt;span class="sr"&gt;/url/&lt;/span&gt;
&lt;span class="n"&gt;save_as&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="kd"&gt;override&lt;/span&gt;&lt;span class="sr"&gt;/url/i&lt;/span&gt;&lt;span class="n"&gt;ndex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;这个代码指定了本篇文章的url为override/url/index.html&lt;/p&gt;
&lt;p&gt;6、如何将一篇文章设置为主页&lt;/p&gt;
&lt;p&gt;根据上面的第5条很容易将一篇文章设置为网站的主页，如下代码即可实现将 content/pages/home.md设为主页&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nl"&gt;Title:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;yanyulin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;](&lt;/span&gt;&lt;span class="n"&gt;http&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//www.yanyulin.info)&lt;/span&gt;
&lt;span class="nl"&gt;Date:&lt;/span&gt; &lt;span class="mi"&gt;2014&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mo"&gt;01&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;08&lt;/span&gt;
&lt;span class="nl"&gt;URL:&lt;/span&gt;
&lt;span class="nl"&gt;save_as:&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;
&lt;span class="err"&gt;文章正文内容&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7、如何给一篇文章指定一个特定模板&lt;/p&gt;
&lt;p&gt;给一篇文章指定一个特定的模板也很简单，只需要在文章中添加如下元数据，并且确保该模板文件在模板中存在即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Template&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8、如果还不知道怎么使用pelican创建博客，看如下教程&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html" title="pelican搭建属于自已的博客"&gt;pelican搭建属于自已的博客&lt;/a&gt;&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>为什么大家都转向了Ripple</title><link href="http://www.yanyulin.info/pages/2014/01/whyRipple.html" rel="alternate"></link><updated>2014-01-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2014-01-07:pages/2014/01/whyRipple.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;简介&lt;/strong&gt;
&lt;code&gt;Ripple&lt;/code&gt;是世界上第一个开放的支付网络，通过这个支付网络可以转账任意一种货币，包括美元、欧元、人民币、日元或者比特币，简便易行快捷，交易确认在几秒以内完成，交易费用几乎是零，没有所谓的跨行异地以及跨国支付费用,&lt;code&gt;Ripple&lt;/code&gt;是开放源码的点到点支付网络，它可以使你轻松、廉价并安全的把你的金钱转账到互联网上的任何一个人，无论他在世界的哪个地方。因为Ripple是p2p软件，没有任何个人、公司，或政府操控，任何人可以创建一个ripple账户。&lt;/p&gt;
&lt;p&gt;突然间发现周围很多人都玩起了&lt;code&gt;Ripple&lt;/code&gt;币，为什么玩&lt;code&gt;Ripple&lt;/code&gt;币，我想了想原因大概有以下几点：&lt;/p&gt;
&lt;p&gt;1、 &lt;code&gt;Ripple&lt;/code&gt;与其他的虚拟币相比，更加&lt;code&gt;好挖&lt;/code&gt;，加入&lt;code&gt;WCG&lt;/code&gt;,一台双核不具备&lt;code&gt;GPU&lt;/code&gt;处理器的电脑一天都可以挖到15个左右&lt;/p&gt;
&lt;p&gt;2、 其他币太难挖了，也不好挖了，如&lt;code&gt;BTC&lt;/code&gt;,&lt;code&gt;LTC&lt;/code&gt;等，而且需要电脑有较好的配置，如&lt;code&gt;GPU&lt;/code&gt;,因此得买一台配置上还看得过去的电脑才能挖，而且也不一定挖得到，&lt;code&gt;收入&lt;/code&gt;远远小于&lt;code&gt;付出&lt;/code&gt;,还有损自已的电脑，于是弃之&lt;/p&gt;
&lt;p&gt;3、与其他山寨币相比(例如什么&lt;code&gt;KDS&lt;/code&gt;、&lt;code&gt;FST&lt;/code&gt;相比)，&lt;code&gt;ripple&lt;/code&gt;显得更加高端大气，它由&lt;code&gt;Google&lt;/code&gt;以及&lt;code&gt;Core Innovation Capital&lt;/code&gt;，&lt;code&gt;Venture 51&lt;/code&gt;, &lt;code&gt;Camp One Ventures&lt;/code&gt;, &lt;code&gt;IDG Capital&lt;/code&gt; &lt;code&gt;Partners&lt;/code&gt;等投资&lt;/p&gt;
&lt;p&gt;4、&lt;code&gt;ripple&lt;/code&gt;币不是由挖矿软件来挖的，&lt;code&gt;挖矿软件&lt;/code&gt;好多都是啥命令行界面，对于普通的未接触过计算机的人来说显得还是比较难，比较难理解，因此现在的LTC/BTC基本上都集中在知识分子手里，因此大部分的人还是没有的，而&lt;code&gt;ripple&lt;/code&gt;采用的是赠送的方式或者参与WCG项目直接获取，因此相比而言还公平点。&lt;/p&gt;
&lt;p&gt;5、&lt;code&gt;ripple&lt;/code&gt;币的价格随其他虚拟币的价格波动，其本上都是线性关系，当你发现其他币的价格翻倍时，基本上&lt;code&gt;ripple&lt;/code&gt;币的价格也在翻倍，例如BTC涨到8000时，&lt;code&gt;ripple&lt;/code&gt;币的价格也从5分多涨到了6毛，因此符合投次者的口味，相比而言也比较好控制风险。&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;ripple&lt;/code&gt;币的发行总量是1000亿，不会再发行新的，其中开发者预留了25%的币，用于稳定币的价值，也就是说对外只发行了750亿，如果将这些币分给全球的每一个人，每个人大概可以分到750/63,但是这种分发过程也是个渐近过程，因此相对而言币还是具有一定的稀缺性&lt;/p&gt;
&lt;p&gt;7、&lt;code&gt;ripple&lt;/code&gt;币的运行公司是&lt;code&gt;OpenCoin&lt;/code&gt;,公司的规模与技术团队还是挺强大的，不像某些山寨币只是将其开发出来，然后就投放市场，运行中途就再没有技术团队或者公司去维护了，这些人只是在变相的骗钱&lt;/p&gt;
&lt;p&gt;8、山寨币什么是山寨币？大部份的山寨币都是看到&lt;code&gt;BTC/LTC&lt;/code&gt;疯涨，羡慕不已，于是就把别人的软件调整一下参数，例如总共可以产生多少量，挖矿的难度等，就将其投入运行，没有任何保障，这就是山寨币，而&lt;code&gt;ripple&lt;/code&gt;币不是&lt;/p&gt;
&lt;p&gt;9、&lt;code&gt;ripple&lt;/code&gt;币通过WCG挖，还是挺有良心的，WCG是由IBM创建的，用于全人类的公益事业，因此在挖的过程中还是多少在做点有意义的事，不是吗:)&lt;/p&gt;
&lt;p&gt;10、&lt;code&gt;Ripple&lt;/code&gt;网络自动进行汇率换算。也就是说，用户可以用任何一种类型的货币向他人支付另外任何一种类型的货币，从而实现所有货币的全网流通&lt;/p&gt;
&lt;p&gt;11、&lt;code&gt;Ripple&lt;/code&gt;的交易确认过程可在几秒钟之内完成&lt;/p&gt;
&lt;p&gt;12、&lt;code&gt;Ripple&lt;/code&gt;币无需下载客户端软件，不用进行同步等一系统麻烦的事，玩过LTC/BTC的人一定知道同步要发费一整天，有时还得翻墙下载，而&lt;code&gt;Ripple&lt;/code&gt;所有的这一切都是在网页上完成的，因此更方便，更快捷，当然也是安全的，因为内部的通信采用了各种加密机制&lt;/p&gt;
&lt;p&gt;就总结到此吧，过几天再更新，觉的不错的欢迎订阅本站，&lt;strong&gt;订阅借口看右侧&lt;/strong&gt;&lt;/p&gt;</summary><category term="瑞波币"></category></entry><entry><title>人人网校招2014年研发面经</title><link href="http://www.yanyulin.info/pages/2013/12/renren_1.html" rel="alternate"></link><updated>2013-12-24T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-24:pages/2013/12/renren_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;面试地点:&lt;strong&gt;沈阳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;软件研发工程师(北京)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;人人网&lt;/strong&gt;总体来说面试还是比较轻松的，2013.9.23在东北大学参加了人人网的笔试(说起来那一天还是比较忙碌的，参加完网易的面试，紧接着又参加了商泰这个小公司的面试，这一天总共进行了五面，所有的面完后就已经是下午五点了，又急着乘车去了东大，6点的时候参加了人人的笔试)，人人的笔试允许霸笔(不过霸笔是有条件的，据说是因为试卷份数有限，研究生且是985的才有资格参加霸笔，所以最好还是网申一下)，人人的笔试我是霸笔的&lt;/p&gt;
&lt;p&gt;考完试后，每二天下午收到面试通知(据说面试是按分数排的，所以笔试分数高是很重要的，百度也是)&lt;/p&gt;
&lt;p&gt;一面：记得面人人的那天，我刚参加完百度的三面，因此人人网通知我下午四点面试，而我面完百度估计要到四点半了，因此推迟到了下午五点，五点时来到了XXX洒店，好多人呀，6点多的时候我才进行了一面，一面是技术面，面试我的是一位GG,因为面试的时候串题比较严重，因此面我的GG,就当场想了一个题目，让我做，就是怎么判断两个矩形是否相交，我看了看，真的很简单，我就给他定义了一个结构体表示矩形的顶点，然后通过矩形的中心点来判断两个矩形是否相交，随后看了看我的简历，就写了一个&lt;code&gt;type_trait&lt;/code&gt;，让我说说他的用法，我就给他答了个&lt;code&gt;POD&lt;/code&gt;,然后他就不让我说了，最后跟我谈了谈我在淘宝实习时用的淘宝的&lt;code&gt;WEBX&lt;/code&gt;架构，面完后面试官对我的印象非常好，以为这是我的最后一面，让我直接去找HR,我给他说我才面了一面，他笑了笑，然后就给了我一个等级，反正比较高，正因为这个等级，我直接进入了三面，没有二面，一面时问过其他同学的问题大概有&lt;/p&gt;
&lt;p&gt;1：求一个序列的最大子序列&lt;/p&gt;
&lt;p&gt;2：笔试卷子上的算法题(&lt;strong&gt;笔试卷子&lt;/strong&gt;还是得好好看)&lt;/p&gt;
&lt;p&gt;3:快速排序，归并排序的写&lt;/p&gt;
&lt;p&gt;4：记不清了还有一些&lt;/p&gt;
&lt;p&gt;三面：三面是一个头头面的，三面问了我HashMap是怎么实现的，CurrentHashMap是怎么实现的，以及一致性Hash算法，淘宝的TDDL,消息中间件...,以及让我写了一个算法，一个棋盘，只能向左走或者下走，每次只能走一步，从最左角走到最右角，总共有多少种走法，其实也很简单，是个递归算法，我当时给他用数学公式算出来了结果，并告诉他，然后他让我写程序实现他，最后我也给他实现了，最后等级当然也挺高的&lt;/p&gt;
&lt;p&gt;HR面，面完后，第二天让我去签约，要求我带三方，对面试结果前三名好像要求带三方，其他的则没要求，三方我们还没发，当然就没给，最后给了我一个意向OFFER,让我三方发了后寄过去&lt;/p&gt;
&lt;p&gt;最后：总结一下人人的面试还是比较轻松的，而且面试的GG都比较好&lt;/p&gt;</summary><category term="人人面经"></category></entry><entry><title>.htaccess简明教程(SEO优化)</title><link href="http://www.yanyulin.info/pages/2013/12/htaccess.html" rel="alternate"></link><updated>2013-12-23T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-23:pages/2013/12/htaccess.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;.htaccess文件可以用来优化网站，尽管.htaccess只是一个文件，但它可以更改服务器的设置，允许你做许多不同的事情，最流行的功能是可以创建自定义的“404 error”页面，.htaccess并不难，你可以给它想像成就是一个文本文件再加几条服务器的配置命令&lt;/p&gt;
&lt;p&gt;确定服务器是否支持.htaccess&lt;/p&gt;
&lt;p&gt;如果主机是&lt;code&gt;unix&lt;/code&gt;或&lt;code&gt;Linux&lt;/code&gt;系统，或任何版本的&lt;code&gt;Apache&lt;/code&gt;网络服务器，理论上都是支持&lt;code&gt;.htaccess&lt;/code&gt;的,除非你的服务器提供商禁用了&lt;code&gt;.htacess&lt;/code&gt;文件&lt;/p&gt;
&lt;p&gt;.htaccess的主要功能:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1:文件夹密码保护&lt;/p&gt;
&lt;p&gt;2:用户自动重定向&lt;/p&gt;
&lt;p&gt;3:自定义错误页面&lt;/p&gt;
&lt;p&gt;4:改变你的文件扩展名&lt;/p&gt;
&lt;p&gt;5:封禁特定IP地址的用户&lt;/p&gt;
&lt;p&gt;6:只允许特定IP地址的用户&lt;/p&gt;
&lt;p&gt;7:禁止目录列表&lt;/p&gt;
&lt;p&gt;8:使用其他文件作为index文件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;创建&lt;code&gt;.htaccess&lt;/code&gt;文件&lt;/p&gt;
&lt;p&gt;Linux/unix以及一些其他类unix系统中可以直接单击右键进行创建，然后将文件命名为.htaccess，或者使用命令行工具&lt;code&gt;touch .htaccess&lt;/code&gt;命令创建&lt;/p&gt;
&lt;p&gt;Window系统下就有些麻烦啦，Windows会把.htaccess当作文件扩展名，一个文件没有名称只有扩展名是不允许被创建的，因此你可以先创建一个普通文件，上传到服务器上，如果服务器提供了在线更改，可以直接在线更改文件名，如果没有提供，可以通过FTP软件来进行更改，还有一种方式，可以在Windows下，下载一些能运行Linux/Unix命令的工具，如&lt;code&gt;git bash&lt;/code&gt;,在&lt;code&gt;git bash&lt;/code&gt;上输入&lt;code&gt;touch .htaccess&lt;/code&gt;同样可以创建&lt;/p&gt;
&lt;p&gt;.htaccess文件编写&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;自定义错误页：通过自定义错误页将使你可以拥有个性化的错误处理页面，而不是你的主机提供商给你提供的错误页或没有任何页面&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;什么时候会出现错误页,最简单的例子就是当用户访问你网站上并不存在的页面时，出现的那个页面就是错误页&lt;/p&gt;
&lt;p&gt;例子，将所有的404 error错误处理页转变成网站的首页(最通俗的理解就是当用户访问了网站上并不存在的页面时直接跳到首页上去)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ErrorDocument 404 /index.html&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;从上面的命令可以推出其他命令的处理方式，代码如下&lt;/p&gt;
&lt;p&gt;&lt;code&gt;rrorDocument 错误处理代号 错误处理页面&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;例如对服务器返回的500指定错误处理页面&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ErrorDocument 500 /500.html&lt;/code&gt; 如果文件不在根目录下可以写成/目录名/文件名&lt;/p&gt;
&lt;p&gt;401 - Authorization Required 需要验证&lt;/p&gt;
&lt;p&gt;400 - Bad request 错误请求&lt;/p&gt;
&lt;p&gt;403 - Forbidden 禁止&lt;/p&gt;
&lt;p&gt;500 - Internal Server Error 内部服务器错误&lt;/p&gt;
&lt;p&gt;404 - Wrong page 找不到页面&lt;/p&gt;
&lt;p&gt;命令写法同上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;禁止显示网站的目录列表，当网站根目录下没有index.html，用户通过域名访问网站时会将整个网站的目录显示给用户,禁止方法如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Options -Indexes&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;禁止或者允许特定IP地址访问网站&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;禁止特定的IP地址访问，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deny from 000.000.000.000&lt;/code&gt;  其中&lt;code&gt;000.000.000.000&lt;/code&gt;代表的是特定的IP地址，如果只指明其中的几个，则可以封禁整个网段的地址。如你输入&lt;code&gt;112.27.38.&lt;/code&gt;，则将封禁&lt;code&gt;112.27.38.0～112.27.38.255&lt;/code&gt;的所有IP地址&lt;/p&gt;
&lt;p&gt;禁止所有人访问，用以下命令&lt;/p&gt;
&lt;p&gt;&lt;code&gt;deny from all&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;允许特定的IP地址访问，命令如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;allow from 000.000.000.000&lt;/code&gt; 如果只指明其中的几个，则可以允许某个网段的地址。如你输入&lt;code&gt;112.27.38.&lt;/code&gt;，则将允许&lt;code&gt;112.27.38.0～112.27.38.255&lt;/code&gt;的所有IP地址访问网站&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;index的替换文件,默认情况下，如果网站下没有index.&lt;code&gt;*&lt;/code&gt;(&lt;code&gt;*&lt;/code&gt;可以代表&lt;code&gt;php&lt;/code&gt;,&lt;code&gt;html&lt;/code&gt;,&lt;code&gt;htm&lt;/code&gt;,&lt;code&gt;jsp&lt;/code&gt;)
在.htaccess中也没有禁止将目录显示出来，当用户通过域名访问网址时，会将整个网址的目录列出来，通过指定&lt;code&gt;index.*&lt;/code&gt;替换文件，可以在服务器不存在&lt;code&gt;index.*&lt;/code&gt;文件的情况下，使用该文件代替。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;DirectoryIndex index.php index.php3 messagebrd.pl index.html index.htm&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;重定向相关的命令(&lt;strong&gt;最重要的&lt;/strong&gt;),重定向就是将请求重定向到同站内或站外的不同文档，这在你改变了一个文件名称，但仍然想让用户用旧地址访问到它时，变的极为有用，同时也可以通过重定向，将长url变成短url&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;重定向的相关例子&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Redirect /loc/file/dir/file.html http://www.othersite.com/sample.html&lt;/code&gt; 将网址上访问特定的url重定向到其他网址&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Redirect /oldDir http://www.newsite.com/newDir&lt;/code&gt;目录重定向，任何指向站点/oldDir目录的请求都将被重新指向新的站点,例如当用户访问&lt;code&gt;http://www.youroldsite.com/oldDir/index.html&lt;/code&gt;将会被重定向到&lt;code&gt;http://www.newsite.com/newDir/index.html&lt;/code&gt;（这里的www.youroldsite.com就是网站的域名，如&lt;a href="http://www.yanyulin.info"&gt;www.yanyulin.info&lt;/a&gt;）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;密码保护&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;.htaccess用于网站目录的密码保护具有完美的安全性（即访问者必须知晓密码才可以访问目录，并且绝无“后门”可走）&lt;/p&gt;
&lt;p&gt;相关命令，利用.htaccess将一个目录加上密码保护分两步，一：是在你的.htaccess文档里加上适当的几行代码，二是将.htaccess文档放进你要保护的目录下，代码如下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;AuthName&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Section Name&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;AuthType&lt;/span&gt; &lt;span class="n"&gt;Basic&lt;/span&gt;
&lt;span class="n"&gt;AuthUserFile&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;full&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;htpasswd&lt;/span&gt;
&lt;span class="n"&gt;Require&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;/full/parth/to/.htpasswd&lt;/code&gt;则应该替换为指向&lt;code&gt;.htpasswd&lt;/code&gt;文件,.htpasswd也是一个没有文件名文档，可以放置在你网站里的任何地方（此时&lt;code&gt;密码应加密&lt;/code&gt;），但建议你将其保存在网站Web根目录外，这样通过网络就无法访问到它了,文件里的内容是username:password(用户名:密码)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary><category term="工具使用"></category></entry><entry><title>编程珠玑(作者:John Bently)</title><link href="http://www.yanyulin.info/pages/2013/12/perl.html" rel="alternate"></link><updated>2013-12-23T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-23:pages/2013/12/perl.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;作者简介：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Jon Bentley&lt;/code&gt;世界著名计算机科学家，被誉为影响算法发展的十位大师之一。他先后任职于卡内基-梅隆大学（1976~1982）、贝尔实验室（1982~2001）和Avaya实验室（2001年至今）。在卡内基-梅隆大学担任教授期间，他培养了包括Tcl语言设计者John Ousterhout、Java语言设计者James Gosling、《算法导论》作者之一Charles Leiserson在内的许多计算机科学大家。2004年荣获Dr.Dobb's程序设计卓越奖。&lt;/p&gt;
&lt;p&gt;电子书下载地址:&lt;a href="http://pan.baidu.com/s/1pJEZU7D" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;觉的好的，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编程珠玑&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第一部分　基础&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第1章　开篇&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1　一次友好的对话&lt;/p&gt;
&lt;p&gt;1.2　准确的问题描述&lt;/p&gt;
&lt;p&gt;1.3　程序设计&lt;/p&gt;
&lt;p&gt;1.4　实现概要&lt;/p&gt;
&lt;p&gt;1.5　原理&lt;/p&gt;
&lt;p&gt;1.6　习题&lt;/p&gt;
&lt;p&gt;1.7　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第2章　啊哈！算法&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1　三个问题&lt;/p&gt;
&lt;p&gt;2.2　无处不在的二分搜索&lt;/p&gt;
&lt;p&gt;2.3　基本操作的威力&lt;/p&gt;
&lt;p&gt;2.4　排序&lt;/p&gt;
&lt;p&gt;2.5　原理&lt;/p&gt;
&lt;p&gt;2.6　习题&lt;/p&gt;
&lt;p&gt;2.7　深入阅读&lt;/p&gt;
&lt;p&gt;2.8　变位词程序的实现（边栏）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第3章　数据决定程序结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1　一个调查程序&lt;/p&gt;
&lt;p&gt;3.2　格式信函编程&lt;/p&gt;
&lt;p&gt;3.3　一组示例&lt;/p&gt;
&lt;p&gt;3.4　结构化数据&lt;/p&gt;
&lt;p&gt;3.5　用于特殊数据的强大工具&lt;/p&gt;
&lt;p&gt;3.6　原理&lt;/p&gt;
&lt;p&gt;3.7　习题&lt;/p&gt;
&lt;p&gt;3.8　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4章　编写正确的程序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.1　二分搜索的挑战&lt;/p&gt;
&lt;p&gt;4.2　编写程序&lt;/p&gt;
&lt;p&gt;4.3　理解程序&lt;/p&gt;
&lt;p&gt;4.4　原理&lt;/p&gt;
&lt;p&gt;4.5　程序验证的角色&lt;/p&gt;
&lt;p&gt;4.6　习题&lt;/p&gt;
&lt;p&gt;4.7　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第5章　编程小事&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5.1　从伪代码到c程序&lt;/p&gt;
&lt;p&gt;5.2　测试工具&lt;/p&gt;
&lt;p&gt;5.3　断言的艺术&lt;/p&gt;
&lt;p&gt;5.4　自动测试&lt;/p&gt;
&lt;p&gt;5.5　计时&lt;/p&gt;
&lt;p&gt;5.6　完整的程序&lt;/p&gt;
&lt;p&gt;5.7　原理&lt;/p&gt;
&lt;p&gt;5.8　习题&lt;/p&gt;
&lt;p&gt;5.9　深入阅读&lt;/p&gt;
&lt;p&gt;5.10　调试（边栏）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二部分　性能&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第6章　程序性能分析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.1　实例研究&lt;/p&gt;
&lt;p&gt;6.2　设计层面&lt;/p&gt;
&lt;p&gt;6.3　原理&lt;/p&gt;
&lt;p&gt;6.4　习题&lt;/p&gt;
&lt;p&gt;6.5　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第7章　粗略估算&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7.1　基本技巧&lt;/p&gt;
&lt;p&gt;7.2　性能估计&lt;/p&gt;
&lt;p&gt;7.3　安全系数&lt;/p&gt;
&lt;p&gt;7.4　little定律&lt;/p&gt;
&lt;p&gt;7.5　原理&lt;/p&gt;
&lt;p&gt;7.6　习题&lt;/p&gt;
&lt;p&gt;7.7　深入阅读&lt;/p&gt;
&lt;p&gt;7.8　日常生活中的速算（边栏）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第8章　算法设计技术&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;8.1　问题及简单算法&lt;/p&gt;
&lt;p&gt;8.2　两个平方算法&lt;/p&gt;
&lt;p&gt;8.3　分治算法&lt;/p&gt;
&lt;p&gt;8.4　扫描算法&lt;/p&gt;
&lt;p&gt;8.5　实际运行时间&lt;/p&gt;
&lt;p&gt;8.6　原理&lt;/p&gt;
&lt;p&gt;8.7　习题&lt;/p&gt;
&lt;p&gt;8.8　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第9章　代码调优&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;9.1　典型的故事&lt;/p&gt;
&lt;p&gt;9.2　急救方案集锦&lt;/p&gt;
&lt;p&gt;9.3　大手术——二分搜索&lt;/p&gt;
&lt;p&gt;9.4　原理&lt;/p&gt;
&lt;p&gt;9.5　习题&lt;/p&gt;
&lt;p&gt;9.6　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第10章　节省空间&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;10.1　关键在于简单&lt;/p&gt;
&lt;p&gt;10.2　示例问题&lt;/p&gt;
&lt;p&gt;10.3　数据空间技术&lt;/p&gt;
&lt;p&gt;10.4　代码空间技术&lt;/p&gt;
&lt;p&gt;10.5　原理&lt;/p&gt;
&lt;p&gt;10.6　习题&lt;/p&gt;
&lt;p&gt;10.7　深入阅读&lt;/p&gt;
&lt;p&gt;10.8　巨大的节省（边栏）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;第三部分　应用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第11章　排序&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;11.1　插入排序&lt;/p&gt;
&lt;p&gt;11.2　一种简单的快速排序&lt;/p&gt;
&lt;p&gt;11.3　更好的几种快速排序&lt;/p&gt;
&lt;p&gt;11.4　原理&lt;/p&gt;
&lt;p&gt;11.5　习题&lt;/p&gt;
&lt;p&gt;11.6　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第12章　取样问题&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;12.1　问题&lt;/p&gt;
&lt;p&gt;12.2　一种解决方案&lt;/p&gt;
&lt;p&gt;12.3　设计空间&lt;/p&gt;
&lt;p&gt;12.4　原理&lt;/p&gt;
&lt;p&gt;12.5　习题&lt;/p&gt;
&lt;p&gt;12.6　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第13章　搜索&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;13.1　接口&lt;/p&gt;
&lt;p&gt;13.2　线性结构&lt;/p&gt;
&lt;p&gt;13.3　二分搜索树&lt;/p&gt;
&lt;p&gt;13.4　用于整数的结构&lt;/p&gt;
&lt;p&gt;13.5　原理&lt;/p&gt;
&lt;p&gt;13.6　习题&lt;/p&gt;
&lt;p&gt;13.7　深入阅读&lt;/p&gt;
&lt;p&gt;13.8　一个实际搜索问题（边栏）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第14章　堆&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;14.1　数据结构&lt;/p&gt;
&lt;p&gt;14.2　两个关键函数&lt;/p&gt;
&lt;p&gt;14.3　优先级队列&lt;/p&gt;
&lt;p&gt;14.4　一种排序算法&lt;/p&gt;
&lt;p&gt;14.5　原理&lt;/p&gt;
&lt;p&gt;14.6　习题&lt;/p&gt;
&lt;p&gt;14.7　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第15章　字符串&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;15.1　单词&lt;/p&gt;
&lt;p&gt;15.2　短语&lt;/p&gt;
&lt;p&gt;15.3　生成文本&lt;/p&gt;
&lt;p&gt;15.4　原理&lt;/p&gt;
&lt;p&gt;15.5　习题&lt;/p&gt;
&lt;p&gt;15.6　深入阅读&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第1版跋&lt;/p&gt;
&lt;p&gt;第2版跋&lt;/p&gt;
&lt;p&gt;附录a　算法分类&lt;/p&gt;
&lt;p&gt;附录b　估算测试&lt;/p&gt;
&lt;p&gt;附录c　时空开销模型&lt;/p&gt;
&lt;p&gt;附录d　代码调优法则&lt;/p&gt;
&lt;p&gt;附录e　用于搜索的c++类&lt;/p&gt;
&lt;p&gt;部分习题提示&lt;/p&gt;
&lt;p&gt;部分习题答案&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="算法之美"></category></entry><entry><title>网易校招2014年电商面经</title><link href="http://www.yanyulin.info/pages/2013/12/neteasyM_1.html" rel="alternate"></link><updated>2013-12-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-11:pages/2013/12/neteasyM_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;面试地点:&lt;strong&gt;沈阳&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;软件研发工程师(北京)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;网易&lt;/strong&gt;一直以来都是一个我很向往的公司，无奈，我却没有去成，当然不是被拒，而是我把它拒了，我很向往它，但是却很无奈。人生往往就是这样，有时候最想去的公司，却不一定能去成.&lt;/p&gt;
&lt;p&gt;笔试时间，&lt;code&gt;2013/9/23&lt;/code&gt;,卷子，电子商务Java卷，网易的笔试，我能说的就是一种严肃感，一种正气，不允许霸笔，不输于中考，考试时中间要隔一排，这也是我找工作以来参加的所有笔试中唯一一个公司要求这么做的，这是一个公司的威严，是一种公平，我一直很向住网易，特别是网易的游戏，网易的游戏很难进，被刷是很正常的，我也不例外，简历被网易游戏刷了，参加了网易互联&lt;/p&gt;
&lt;p&gt;笔试卷子：难度一般，选择题给我印象最深的两题就是有限自动机，以及一道判断NP问题，基础部分是必做的，后面有ABC三部份，可以选做，我那天精力比较保满，把ABC三部份都做了&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/neteasyM_1.html" title="烟雨林"&gt;面试&lt;/a&gt;，网易HR当天夜晚01：00打电话告诉我通知我明天去XXX大洒店面试，没怎么听清楚，让他发短信告诉我地点，一觉睡到天亮，7点多时候，看了看Nokia手机，短信竟然没显示全，这里不得不说一句,&lt;strong&gt;一个好的手机也是非常重要的&lt;/strong&gt;，至于为什么重要，下次再告诉你，没收到信息，我就打电话，没人接，最后发了信息让他重发一遍，换了一部手机，大概8点半时收到了他重发的短信，这里我不得不说的一句是，网易的HR真的很负责，很热心&lt;/p&gt;
&lt;p&gt;一面：&lt;/p&gt;
&lt;p&gt;我大概提前了半个小时来到了酒店，给HR打了电话，最后被领到了一个地方等，在和那个负责接待我们的人的交谈中，了解到网易电商在沈阳总共有11个人参加了面试，其他人你可以YY了，从这里也可以看出网易通过笔试刷掉了大大批的人，大概这也是为什么笔试如此正规吧&lt;/p&gt;
&lt;p&gt;11点时参加了一面，一面是部门负责人面的，面试时问的都是技术性的问题，因为是电商，所以肯定是问&lt;strong&gt;Java&lt;/strong&gt;,我对&lt;strong&gt;Java&lt;/strong&gt;以前搞过两年，研究生期间不搞这个，但这两年的功底还在，问题大概就是如下&lt;/p&gt;
&lt;p&gt;1、实现set接口的有哪些类?&lt;/p&gt;
&lt;p&gt;2、你是如何理解Java里面的垃圾收集机制(最好分析到对象在堆中的分配上)&lt;/p&gt;
&lt;p&gt;3、你对Spring的理解，Spring里面的代理是怎么实现的，如果让你设计，你怎么设计&lt;/p&gt;
&lt;p&gt;4、让我画了下淘宝的webx架构&lt;/p&gt;
&lt;p&gt;5、HashMap的实现机制&lt;/p&gt;
&lt;p&gt;6、一致性Hash算法&lt;/p&gt;
&lt;p&gt;等等&lt;/p&gt;
&lt;p&gt;二面：&lt;/p&gt;
&lt;p&gt;网易的面试过程好像很简单，二面就是HR面了，HR面你懂的，纯粹扯谈，不过HR很好，基本上问的就是未来你的职业规划，你对工资的要求，你对加班的要求，你对户口的要求，等等，面完后感觉还行，HR好像对我很满意，最后我问了下结果什么时候出来，他说要等北京那边的考完后，也就是&lt;strong&gt;10.8&lt;/strong&gt;北京考后，两边笔试面试结果汇总择优录取&lt;/p&gt;
&lt;p&gt;等待：&lt;/p&gt;
&lt;p&gt;等待就像栀子花开，漫长却很期待，9.23后,我一直在等待着网易，等了一个多月，他都没给我回音，10.25号我将三方寄到了百度，10.28号一觉睡醒，收到了网易的offer,当然待遇比百度要高那么几万，那时我在北京，网易HR让我去找他面谈一下，他告诉我，我是第一批被录取的，让我再考虑一下，一个星期给答复，我也不想拒百度，结果就这样悲剧吧，事后还给我打了个电话，让我再考虑下~~&lt;/p&gt;</summary><category term="网易面经"></category></entry><entry><title>亚马逊2014年校招笔试题(研发)</title><link href="http://www.yanyulin.info/pages/2013/12/amzon_2014_A.html" rel="alternate"></link><updated>2013-12-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-07:pages/2013/12/amzon_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、Given a set of open intervals, check whether there exists an interval which is completely inside another interval. If exists, print “1”, otherwise print “0”. You just need to consider the case that all the end points are integers and there are no exactly the same open intervals.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;n  --- number of open intervals&lt;/p&gt;
&lt;p&gt;a_1 b_1 a_2 b_2 ... a_n b_n   ------ n open intervals   (a_1, b_1) ... (a_n, b_n), in which a_i &amp;lt; b_i for all i&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;1 (meaning that there exists an interval which is completely inside another interval) or 0 (otherwise)&lt;/p&gt;
&lt;p&gt;Sample Input 1&lt;/p&gt;
&lt;p&gt;3&lt;/p&gt;
&lt;p&gt;1 2 3 4 5 6&lt;/p&gt;
&lt;p&gt;Sample Output 1&lt;/p&gt;
&lt;p&gt;0&lt;/p&gt;
&lt;p&gt;Sample Input 2&lt;/p&gt;
&lt;p&gt;2&lt;/p&gt;
&lt;p&gt;1 4 2 3&lt;/p&gt;
&lt;p&gt;Sample Output 2&lt;/p&gt;
&lt;p&gt;1&lt;/p&gt;
&lt;p&gt;return value: 1 (meaning that there exists an int erval which is completely inside another interval)or 0 (otherwise)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、There is an interesting game called MM-Chess. The size of the board is 1*N, every grid has a score (non-negative).  The first grid is the start and the Nth grid is the end. The game requires players to control the chess starting from the starting point to the end.&lt;/p&gt;
&lt;p&gt;There're four types of cards in the game and the total number is M. Each type of card are labeled one integer number in [1,4]. After using a card with number x on it, the chess will move x steps forward. Each time, player will choose one unused card to move the chess forward, and each card can only be used once. In the game, the chess gains the score at the starting point automatically.  When the chess arrives at a new grid, it also gets the score on that point. The goal of the game is to get the most score.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Input:&lt;/p&gt;
&lt;p&gt;The first line contains two integers N (the size of board) and M (the number of the cards).
The second line contains N integers, meaning the scores on the the board (the i-th integer corresponds to the score on the i-th grid).&lt;/p&gt;
&lt;p&gt;The third line contains M integers, meaning the numbers on the M cards.
The sum of the number of M cards equals to N-1.&lt;/p&gt;
&lt;p&gt;You can assume that 1 &amp;lt;= N &amp;lt;= 350, 1 &amp;lt;= M &amp;lt;= 120, and that the number of cards are less than 40 for each kind.&lt;/p&gt;
&lt;p&gt;Output:&lt;/p&gt;
&lt;p&gt;One integer. The most score that player can get.&lt;/p&gt;
&lt;p&gt;Sample Input 1&lt;/p&gt;
&lt;p&gt;4 2&lt;/p&gt;
&lt;p&gt;1 2 1 2&lt;/p&gt;
&lt;p&gt;1 2&lt;/p&gt;
&lt;p&gt;Sample Output 1&lt;/p&gt;
&lt;p&gt;5&lt;/p&gt;
&lt;p&gt;Given two cards with number 1 and number 2 each, we have two choices: path one is 1 -&amp;gt; 2 -&amp;gt; 2, path two is 1 -&amp;gt; 1 -&amp;gt; 2. The maximum score is 5, which is the output.&lt;/p&gt;
&lt;p&gt;Sample Input 2&lt;/p&gt;
&lt;p&gt;5 3&lt;/p&gt;
&lt;p&gt;1 2 1 2 1&lt;/p&gt;
&lt;p&gt;1 2 1&lt;/p&gt;
&lt;p&gt;Sample Output 2&lt;/p&gt;
&lt;p&gt;6&lt;/p&gt;
&lt;p&gt;Given three cards (one can move 2 steps, two can move 1 steps), we have three choices: path one is 1 -&amp;gt; 2 -&amp;gt; 1 -&amp;gt; 1, path two is 1 -&amp;gt; 2 -&amp;gt; 2 -&amp;gt; 1, path three is 1 -&amp;gt; 1 -&amp;gt; 2 -&amp;gt; 1. The maximum score is 6, which is the output.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="亚马逊笔试题"></category></entry><entry><title>微软2014年校招笔试题</title><link href="http://www.yanyulin.info/pages/2013/12/microsoft_2014_A.html" rel="alternate"></link><updated>2013-12-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-07:pages/2013/12/microsoft_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、Which statement(s) is(are) correct about thread and process？Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;A、Threads share the same address space of the parent process;Processes share the same address space of the parent process.&lt;/p&gt;
&lt;p&gt;B、Changes to the main thread(cancellation，priority change，etc.) may affect the behavior of the other threads of the process; Changes to the parent process does not affect child processes.&lt;/p&gt;
&lt;p&gt;C、Multiple threads mar cause deadlock,while multiple processes won't cause deadlock.&lt;/p&gt;
&lt;p&gt;D、Threads can directly communicate with other threads of its process; Processes must use inter-process communication to communicate with sibling processes.
E、None of the above.&lt;/p&gt;
&lt;p&gt;2、Which statement(s) below regarding TCP(Transmission Control Protocol) is(are) correct? Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;A、TCP provides a way for applications to send encapsulated IP datagrams and send them without having to establish a connection.&lt;/p&gt;
&lt;p&gt;B、TCP supports multicasting.&lt;/p&gt;
&lt;p&gt;C、Port numbers below 1024 are called well-known ports and are reserved for standard services. For example,port 21 is reserved for FTP protocol, and port 25 is for SMTP protocol.&lt;/p&gt;
&lt;p&gt;D、TCP handles package loss reliably.&lt;/p&gt;
&lt;p&gt;E、None of the above.&lt;/p&gt;
&lt;p&gt;3、Initialize integer i as 0, what's the value of i after the following operation?(5 Points)i += i &amp;gt; 0 ? i++ : i --&lt;/p&gt;
&lt;p&gt;A、-2&lt;/p&gt;
&lt;p&gt;B、-1&lt;/p&gt;
&lt;p&gt;C、0&lt;/p&gt;
&lt;p&gt;D、1&lt;/p&gt;
&lt;p&gt;E、2&lt;/p&gt;
&lt;p&gt;4、Which of the follwing sequence(s) could not be a postorder tree walk result of a binary search tree?(5 Points)
A、1,2,3,4,5
B、3,5,1,4,2
C、1,2,5,4,3
D、5,4,3,2,1&lt;/p&gt;
&lt;p&gt;5、When a dll is loaded into memory, which part(s) can be shared between processes?(5 Points)&lt;/p&gt;
&lt;p&gt;A、code segment&lt;/p&gt;
&lt;p&gt;B、static variable&lt;/p&gt;
&lt;p&gt;C、global variable&lt;/p&gt;
&lt;p&gt;D、external difinitions and references for linking&lt;/p&gt;
&lt;p&gt;E、BSS segment&lt;/p&gt;
&lt;p&gt;6、How many times is f() called when calculating f(10)?(5 Points)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、14&lt;/p&gt;
&lt;p&gt;B、18&lt;/p&gt;
&lt;p&gt;C、20&lt;/p&gt;
&lt;p&gt;D、24&lt;/p&gt;
&lt;p&gt;E、None of the above.&lt;/p&gt;
&lt;p&gt;7、Asume you have an object to describe customer data:(5 Points)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;ID&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt; &lt;span class="n"&gt;digit&lt;/span&gt; &lt;span class="n"&gt;numeric&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
  &lt;span class="n"&gt;Family&lt;/span&gt; &lt;span class="n"&gt;Name&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
  &lt;span class="n"&gt;Account&lt;/span&gt; &lt;span class="n"&gt;Balance&lt;/span&gt;&lt;span class="err"&gt;（&lt;/span&gt;&lt;span class="n"&gt;currency&lt;/span&gt;&lt;span class="err"&gt;）&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you have 500,000 Chinese customers records represented by instances of this object type , what set of data structures is best to get fast retrieval of customers (1) get IDs from Name and (2) get Name from ID?&lt;/p&gt;
&lt;p&gt;A、(1) Tree with Hash(100 bucket) at leaves(2) Tree with linked list at leaves.&lt;/p&gt;
&lt;p&gt;B、(1) Tree with linked list at leaves(2) Array.&lt;/p&gt;
&lt;p&gt;C、(1) Tree with linked list at leaves(2) Hash(10,000 buckets)&lt;/p&gt;
&lt;p&gt;D、(1) Sort linked list(2) Array.&lt;/p&gt;
&lt;p&gt;8、Let's assume one type of cancer may be mis-diagnosed in the examination. 5 out of 100 people with this cancer will be diagnosed as not having it , and 1 out of 100 people without this cancer will be diagnosed as having it. We know the chance of getting this cancer is around 0.1%. One person was examined and diagnosed of having this cancer, which of the following value if the closest to the chance of is really having it?(5 Points)&lt;/p&gt;
&lt;p&gt;A、90%&lt;/p&gt;
&lt;p&gt;B、50%&lt;/p&gt;
&lt;p&gt;C、30%&lt;/p&gt;
&lt;p&gt;D、10%&lt;/p&gt;
&lt;p&gt;9、In which case(s) would you use an outer join?(5 Points)&lt;/p&gt;
&lt;p&gt;A、The table being joined have NOT NULL columns.&lt;/p&gt;
&lt;p&gt;B、The table being joined have only matched data.&lt;/p&gt;
&lt;p&gt;C、The columns being joined have NULL values.&lt;/p&gt;
&lt;p&gt;D、The table being joined have only unmatched data.&lt;/p&gt;
&lt;p&gt;E、The table being joined have both matched and unmatched data.&lt;/p&gt;
&lt;p&gt;10、As shown in the graph , start from node B , traverse the nodes on a Depth-First Search(DFS) algorithm , which is(are) the possible traversa sequence(s)? Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/"&gt;
&lt;img src="http://www.yanyulin.info/pics/microsoft_2014_1.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;A、BADECF&lt;/p&gt;
&lt;p&gt;B、BADEFC&lt;/p&gt;
&lt;p&gt;C、BCAFDE&lt;/p&gt;
&lt;p&gt;D、BCFDEA&lt;/p&gt;
&lt;p&gt;E、BFDECA&lt;/p&gt;
&lt;p&gt;11、The best time complexity of quick sort algorithm is:(5 Points)&lt;/p&gt;
&lt;p&gt;A、O(lgn)&lt;/p&gt;
&lt;p&gt;B、O(n)&lt;/p&gt;
&lt;p&gt;C、O(nlgn)&lt;/p&gt;
&lt;p&gt;D、O(n*n)&lt;/p&gt;
&lt;p&gt;12、Which of the following method(s) CANNOT be used for Text-encryption:(5 Points)&lt;/p&gt;
&lt;p&gt;A、MD5&lt;/p&gt;
&lt;p&gt;B、RSA&lt;/p&gt;
&lt;p&gt;C、RC4&lt;/p&gt;
&lt;p&gt;D、DES&lt;/p&gt;
&lt;p&gt;13、To speed up data access , we build cache system. In one system , The L1 cache access time is 5 ns , the L2 cache access time is 50 ns and the memory access time is 400 ns. The L1 cache miss rate is 50% , the L2 cache miss rate is 10%. The average data access time of this system is:(5 Points)&lt;/p&gt;
&lt;p&gt;A、5&lt;/p&gt;
&lt;p&gt;B、30&lt;/p&gt;
&lt;p&gt;C、45&lt;/p&gt;
&lt;p&gt;D、50&lt;/p&gt;
&lt;p&gt;E、55&lt;/p&gt;
&lt;p&gt;14、Which is(are) valid function pointer declaration(s) below ? Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;A、void* f(int);&lt;/p&gt;
&lt;p&gt;B、int (*f)();&lt;/p&gt;
&lt;p&gt;C、void (&lt;em&gt;f(int , void(&lt;/em&gt;)(int)))(int);&lt;/p&gt;
&lt;p&gt;D、void (&lt;em&gt;(&lt;/em&gt;f)(int))();&lt;/p&gt;
&lt;p&gt;15、Which of the following method(s) could be used to optimize the speed of a program ? (5 Points)&lt;/p&gt;
&lt;p&gt;A、Improve memory access pattern to decrease cache misses.&lt;/p&gt;
&lt;p&gt;B、Use special instructions(e.g. vector instructions) to replace compiler generated assembly code.&lt;/p&gt;
&lt;p&gt;C、Change an algorithm from recursive implementation to iterative implementation.&lt;/p&gt;
&lt;p&gt;D、Loop unwinding.&lt;/p&gt;
&lt;p&gt;16、Which regular expression(s) matches the sentence "www.microsoft.com" ? (5 Points)&lt;/p&gt;
&lt;p&gt;A、^\w+.\w+.\w+$&lt;/p&gt;
&lt;p&gt;B、[w]{0,3}.[a-z]*.[a-z]+&lt;/p&gt;
&lt;p&gt;C、.[c-w.]{3,10}[.][c-w.][.][a]|.+&lt;/p&gt;
&lt;p&gt;D、[w][w][w][microsoft]+[com]+&lt;/p&gt;
&lt;p&gt;E、\w*&lt;/p&gt;
&lt;p&gt;17、In the image below , if the function is designed to multiply two positive numbers which line number in the image contains the biggest functional bug(assume no overflow)? (5 Points)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;Fun&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;C&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、Line 1&lt;/p&gt;
&lt;p&gt;B、Line 2&lt;/p&gt;
&lt;p&gt;C、Line 3&lt;/p&gt;
&lt;p&gt;D、Line 4&lt;/p&gt;
&lt;p&gt;E、Line 5&lt;/p&gt;
&lt;p&gt;18、Which of the following can be referred to as attack method(s)? Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;A、Vulnerability scan&lt;/p&gt;
&lt;p&gt;B、SQL Injection&lt;/p&gt;
&lt;p&gt;C、Drive-by downloading&lt;/p&gt;
&lt;p&gt;D、Brute force&lt;/p&gt;
&lt;p&gt;19、A table CANNOT have one or more of the following index configurations.(5 Points)&lt;/p&gt;
&lt;p&gt;A、No indexes&lt;/p&gt;
&lt;p&gt;B、A clustered index&lt;/p&gt;
&lt;p&gt;C、clustered index and many non-clustered indexes&lt;/p&gt;
&lt;p&gt;D、Many clustered index&lt;/p&gt;
&lt;p&gt;20、Which of the following is(are) true about providing security to database servers ? Select all that apply.(5 Points)&lt;/p&gt;
&lt;p&gt;A、Do not host a database server on the same server as your web server&lt;/p&gt;
&lt;p&gt;B、Do not host a database server on a server based system&lt;/p&gt;
&lt;p&gt;C、Do not use blank password for SA account&lt;/p&gt;
&lt;p&gt;D、Employ a centralized administration model&lt;/p&gt;
&lt;p&gt;第二部分测试时间为60分钟，满分50分。请务必在回答问题前仔细阅读变成题目。您可以选用C、C++、C#或者Java 其中任何一种编程语言，并且保证您的代码可以正确编译和有正确的结果。另外，请一定要注意您的代码的质量。&lt;/p&gt;
&lt;p&gt;21、Given a singly linked list L: (L0 , L1 , L2...Ln-1 , Ln). Write a program to reorder it so that it becomes(L0 , Ln , L1 , Ln-1 , L2 , Ln-2...).&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;Node&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;val_&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;Node&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;next&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Notes:&lt;/p&gt;
&lt;p&gt;1、Space Complexity should be O(1) &lt;/p&gt;
&lt;p&gt;2、Only the ".next" field of a node is modifiable.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="微软笔试题"></category></entry><entry><title>雅虎2014年校招笔试题</title><link href="http://www.yanyulin.info/pages/2013/12/yahoo_2014_A.html" rel="alternate"></link><updated>2013-12-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-07:pages/2013/12/yahoo_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、Which protocol is used to query the destination MAC address with the destination IP address?()&lt;/p&gt;
&lt;p&gt;A UDP   B ARP C RARP  D ICMP&lt;/p&gt;
&lt;p&gt;2、After execution the following C code,what is the possible location that ptr pointing at?()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A memory    B  Cache  C register  D hard disk&lt;/p&gt;
&lt;p&gt;3、When two processes load a same DLL(or,so file on linux),What resource of the DLL can be shared between the two process?()&lt;/p&gt;
&lt;p&gt;A text section  B stack section  D heap section  D file descripter&lt;/p&gt;
&lt;p&gt;4、Which scenarios will lead to false cache sharing on modern CPU architecture?&lt;/p&gt;
&lt;p&gt;A write cache line unaligned memory block&lt;/p&gt;
&lt;p&gt;B concurrently write two different fields of a small struct in C programming language&lt;/p&gt;
&lt;p&gt;C concurrently access two memory blocks that are adjacent but mapped to different cache lines&lt;/p&gt;
&lt;p&gt;D loop over a memory block bigger than cache line, byte by byte but from beginning and  end at the same time&lt;/p&gt;
&lt;p&gt;5、Given the following C++ code, what's the output of the program?()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;init base&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;SuperClass&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;BaseClass&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nl"&gt;public:&lt;/span&gt;
        &lt;span class="n"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;virtual&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
            &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;init super&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
    &lt;span class="n"&gt;BaseClass&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;SuperClass&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;B&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;D&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;
&lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="n"&gt;super&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、What's the average time complexity of building a binary search tree from an array of size N?()&lt;/p&gt;
&lt;p&gt;A O(logN)  B O(N)  C O(NlogN)  D O(N^2)&lt;/p&gt;
&lt;p&gt;7、What is the time complexity of the following function?()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;N&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A O(N)  B O(NlogN)  C O(N^1.5)  D O(N^2)&lt;/p&gt;
&lt;p&gt;8、if we use a stack data structure to reorder a sequence{1,2,3,4,5},which of the following sequences are NOT a possible result?()&lt;/p&gt;
&lt;p&gt;A {1,3,,2,5,4}&lt;/p&gt;
&lt;p&gt;B {1,3,4,2,5}&lt;/p&gt;
&lt;p&gt;C {3,1,4,2,5}&lt;/p&gt;
&lt;p&gt;D {2,1,5,4,3}&lt;/p&gt;
&lt;p&gt;9、A and B decide to meet at a place, each of them will arrive randomly during 13:00 PM and 14:00 PM in the same day,and only wait 15 mins for the other guy, what is the probability that they will meet?___&lt;/p&gt;
&lt;p&gt;10、Given 2 balls with same type,and 10 cups with the same type,now put the 2 balls randomly to the 10 cups,then what is the probablity that any one of cup contains 2 balls?__&lt;/p&gt;
&lt;p&gt;1A What is going to happen if we try to compile and run the following C code? if any error occurs,please correct the code.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&amp;lt;string.h&amp;gt;&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;memset&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;0123456789&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;str4&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
  &lt;span class="n"&gt;Malloc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%d&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="p"&gt;}&lt;/span&gt;
  &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str1=%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str2=%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str3=%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str3&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;str4=%s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;str4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
  &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="雅虎笔试题"></category></entry><entry><title>中兴2014年校招笔试题</title><link href="http://www.yanyulin.info/pages/2013/12/zte_2014_A.html" rel="alternate"></link><updated>2013-12-07T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-07:pages/2013/12/zte_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一：单选题&lt;/p&gt;
&lt;p&gt;1、下列的设备数据传输方式中,哪种方式的效率最差()&lt;/p&gt;
&lt;p&gt;A  程序直接控制  B 中断控制  C DMA方式  D 通道控制方式&lt;/p&gt;
&lt;p&gt;2、一个可以独立运行的Java应用程序( )&lt;/p&gt;
&lt;p&gt;A、可以有一个或多个main方法  &lt;/p&gt;
&lt;p&gt;B、最多只能有两个main方法  &lt;/p&gt;
&lt;p&gt;C、可以有一个或零个main方法  &lt;/p&gt;
&lt;p&gt;D、只能有一个main方法 &lt;/p&gt;
&lt;p&gt;3、面向对象设计中,对高层设计描述不正确的一项是（）&lt;/p&gt;
&lt;p&gt;A 高层设计可以表征为标识和定义模块的过程&lt;/p&gt;
&lt;p&gt;B 模块可以是一个单个的类，也可以是由一些类组成合的子系统&lt;/p&gt;
&lt;p&gt;C 定义过程是事件驱动的&lt;/p&gt;
&lt;p&gt;D 类接口的协议如同合同，需方提出的请求必须列在协议表中，供方则必须提供所有协议的服务&lt;/p&gt;
&lt;p&gt;4、实现运行时的多态性采用()&lt;/p&gt;
&lt;p&gt;A 重载函数  B 构造函数  C 析构函数  D 虚函数&lt;/p&gt;
&lt;p&gt;5、下列牌异常测试范畴的是()
A 边界性测试  B 关键路径测试  C 关健内部数据测试  D 内在泄露测试&lt;/p&gt;
&lt;p&gt;6、为实现多线程之间的通信，需要使用下列哪种流才合适&lt;/p&gt;
&lt;p&gt;A Filter stream  B  File stream  C  Random access stream  D Piped stream &lt;/p&gt;
&lt;p&gt;7、为减少测试用例的数量，不恰当的做法()&lt;/p&gt;
&lt;p&gt;A 采用合适的测试用例设计方法，如等价类，基本路径测试&lt;/p&gt;
&lt;p&gt;B 改进设计，使得架构清晰，减少多缺陷假设&lt;/p&gt;
&lt;p&gt;C 改进设计和实现，紧内聚松耦合，减少多缺陷假设&lt;/p&gt;
&lt;p&gt;D 使用经验测试方法，设计出有可能出现缺陷的测试用例即可&lt;/p&gt;
&lt;p&gt;8、下面关于索引，描述不正的一项是:&lt;/p&gt;
&lt;p&gt;A 对极多的不同数值的列索引效率会比较高&lt;/p&gt;
&lt;p&gt;B 索引会使更新数据变量&lt;/p&gt;
&lt;p&gt;C 不要对大字段进行索引&lt;/p&gt;
&lt;p&gt;D 可以对经常修改的字段索引&lt;/p&gt;
&lt;p&gt;9、Java程序经常用到的递归，递归的基本思想是&lt;/p&gt;
&lt;p&gt;A 让别人反复调用自己   B 自己反复调用别人&lt;/p&gt;
&lt;p&gt;C 自己反复调用自己     D 以上说法都不对&lt;/p&gt;
&lt;p&gt;10、以下关于DataGridItem的说明不正确的是&lt;/p&gt;
&lt;p&gt;A Header DataGrid 的控制标题 部分&lt;/p&gt;
&lt;p&gt;B Item DataGrid控件中的列&lt;/p&gt;
&lt;p&gt;C Footer DataGrid 控件中的页选择节&lt;/p&gt;
&lt;p&gt;D Pager DataGrid 控制中的页选择节&lt;/p&gt;
&lt;p&gt;11、开发测试平台不需要支持&lt;/p&gt;
&lt;p&gt;A 自动化测试&lt;/p&gt;
&lt;p&gt;B 测试用例统一管理&lt;/p&gt;
&lt;p&gt;C 自动化排除缺陷&lt;/p&gt;
&lt;p&gt;D 支持系统级测试&lt;/p&gt;
&lt;p&gt;E 支持代码级测试&lt;/p&gt;
&lt;p&gt;12、用哪个技术，可以有效的对页面布局、字体、着色、背景和其他效果实现更加精确的控制&lt;/p&gt;
&lt;p&gt;A jsp  B xml  C javascript  D css&lt;/p&gt;
&lt;p&gt;13、不属于自底向上的集成方法模块是&lt;/p&gt;
&lt;p&gt;A 模块群 B 驱动模块  C 桩模块&lt;/p&gt;
&lt;p&gt;14、关于运行时静态初始化顺序的描述正确的是&lt;/p&gt;
&lt;p&gt;A 运行时的静态初始化在编译单元里有严格的顺序&lt;/p&gt;
&lt;p&gt;B 减少静态和全局变量、对像、避免运行时的静态初始化&lt;/p&gt;
&lt;p&gt;C 运行时的静态初始化和普通变量的初始化一致&lt;/p&gt;
&lt;p&gt;D 运行时的静态初始化在编译单元内部与普通全局变量一致&lt;/p&gt;
&lt;p&gt;15、对于重建索引，描述不正的一项是:&lt;/p&gt;
&lt;p&gt;A 删除选择性不高的索引来提高DML的速度&lt;/p&gt;
&lt;p&gt;B 对常用的选择性高的字段进行索引&lt;/p&gt;
&lt;p&gt;C 建立更多的索引来提高效率&lt;/p&gt;
&lt;p&gt;D 添加列来提高选择性&lt;/p&gt;
&lt;p&gt;16、哪个不是C#中的变量&lt;/p&gt;
&lt;p&gt;A 局部变量 B 全局变量 D 静态变量 D 非静态变量&lt;/p&gt;
&lt;p&gt;17、下面哪条语句定义了5个元素的数组&lt;/p&gt;
&lt;p&gt;A int [] a={22,23,24,25,12};      B int a []=new int(5);
C int [5] array;                  D int [] arr;&lt;/p&gt;
&lt;p&gt;18、以下声明的变量中，只有()是不合法的&lt;/p&gt;
&lt;p&gt;A internet_network  B *number C Hello D _sys_path&lt;/p&gt;
&lt;p&gt;19、物理架构设计中，下面()哪个不是物理架构设计主要方面&lt;/p&gt;
&lt;p&gt;A 硬件选择与物理拓扑&lt;/p&gt;
&lt;p&gt;B 软件到硬件的映射关系 &lt;/p&gt;
&lt;p&gt;C 物理架构方面的优化&lt;/p&gt;
&lt;p&gt;D 硬件配置&lt;/p&gt;
&lt;p&gt;20、着眼于程序外部接口要求，不考虑内部逻辑结构测试用例方法属于&lt;/p&gt;
&lt;p&gt;A 单元测试&lt;/p&gt;
&lt;p&gt;B 白盒测试&lt;/p&gt;
&lt;p&gt;C 墨盒测试&lt;/p&gt;
&lt;p&gt;D 集成测试&lt;/p&gt;
&lt;p&gt;二、多选题&lt;/p&gt;
&lt;p&gt;1、常见的边界值有()
A 数值边界  B 字符串边界   C 指标边界   D 内存边界&lt;/p&gt;
&lt;p&gt;2、#pragma pack的描述正确的有()&lt;/p&gt;
&lt;p&gt;A #pragma pack实现，也可以直接修改/Zp编译开关&lt;/p&gt;
&lt;p&gt;B #pragma pack(n),n为字节对齐数，其取值为1、2 、4、8、16，默认是8&lt;/p&gt;
&lt;p&gt;C #pragma pack(pop)功能是恢复先前的pack设置&lt;/p&gt;
&lt;p&gt;D #pragma pack()是用来实现字节序转换功能的&lt;/p&gt;
&lt;p&gt;3、在n个结点的顺序表中，算法的时间复杂度是O(1) 的操作是()&lt;/p&gt;
&lt;p&gt;A 访问第i个结点和求第i个结点的直接前驱&lt;/p&gt;
&lt;p&gt;B 在第i个结点后插入一个新结点&lt;/p&gt;
&lt;p&gt;C 删除第i个结点&lt;/p&gt;
&lt;p&gt;D 将n个结点从小到大排序&lt;/p&gt;
&lt;p&gt;4、哪些可以属于管道-过滤器的实际应用()&lt;/p&gt;
&lt;p&gt;A Shell  B 编译器 C 语音识别软件  D 协议处理软件&lt;/p&gt;
&lt;p&gt;5、产品非功能需求包括()&lt;/p&gt;
&lt;p&gt;A 质量属性  B设计或实现约束  C 性能需求  D 产品要遵守的标准规约&lt;/p&gt;
&lt;p&gt;6、下列属于McCabe基本路径方法的基本步骤的是()&lt;/p&gt;
&lt;p&gt;A 根据过程设计结果画出相应的流图&lt;/p&gt;
&lt;p&gt;B 计算控制流图的圈复杂度&lt;/p&gt;
&lt;p&gt;C 确定线性独立路径的基本集合&lt;/p&gt;
&lt;p&gt;D 设计可强制执行基本集合中的每条路径测试用例&lt;/p&gt;
&lt;p&gt;7、下列说法错误的有()&lt;/p&gt;
&lt;p&gt;A Java面向对像语言容许许多单独的过程与函数存在&lt;/p&gt;
&lt;p&gt;B Java面向对象语言容许单独的方法存在&lt;/p&gt;
&lt;p&gt;C Java语言中的方法属于类中的成员&lt;/p&gt;
&lt;p&gt;D Java语言中的方法必定属于某一类(对象),调用方法与过程或函数相同&lt;/p&gt;
&lt;p&gt;8、Asp.Net的WebApplication有哪些?()&lt;/p&gt;
&lt;p&gt;A Asp.Net web Application&lt;/p&gt;
&lt;p&gt;B Asp.NET Web Service Application&lt;/p&gt;
&lt;p&gt;C Windows Application&lt;/p&gt;
&lt;p&gt;D Web Control Library&lt;/p&gt;
&lt;p&gt;E Crystal Reports Application&lt;/p&gt;
&lt;p&gt;9、自动化功能测试的优势包括()&lt;/p&gt;
&lt;p&gt;A 快速  B 可靠  C 可重复  D 可重用&lt;/p&gt;
&lt;p&gt;10、下列说法错误的有()&lt;/p&gt;
&lt;p&gt;A 在类的方法中可用this来调用本类的类方法 &lt;/p&gt;
&lt;p&gt;B 在类方法中调用本类的类方法 时可直接调用&lt;/p&gt;
&lt;p&gt;C 在类方法中只能调用本类的类方法 &lt;/p&gt;
&lt;p&gt;D 在类方法 中绝对不能调用实例方法 &lt;/p&gt;
&lt;p&gt;11、文件安全保护常用的方法有()&lt;/p&gt;
&lt;p&gt;A 口令方式  B 加密方式 C存取控制矩阵 D 存取控制表&lt;/p&gt;
&lt;p&gt;12、关于查询语句编写，下列说法正确的是：&lt;/p&gt;
&lt;p&gt;A、SQL关键字和列名可以忽略大小写，但是数据在部份数据库中大小写是敏感的&lt;/p&gt;
&lt;p&gt;B 分号标识一个语句的结束&lt;/p&gt;
&lt;p&gt;C SQL中列名顺序与结果列名顺序一致&lt;/p&gt;
&lt;p&gt;D SQL中语句格式的变更不会对结果产生影响&lt;/p&gt;
&lt;p&gt;13、下列标识符不合法有有&lt;/p&gt;
&lt;p&gt;A NEW B$Usdollars C1234 Dcar.taxi&lt;/p&gt;
&lt;p&gt;14、下列属于面向对像的特征是&lt;/p&gt;
&lt;p&gt;A 封装  B 继承  C 多态  D 过程&lt;/p&gt;
&lt;p&gt;15、需求收集的主要方法包括 &lt;/p&gt;
&lt;p&gt;A 阅读标准、协议、规范&lt;/p&gt;
&lt;p&gt;B 我司产品分析&lt;/p&gt;
&lt;p&gt;D 竞争对手产品分析&lt;/p&gt;
&lt;p&gt;D 需求专题讨论会&lt;/p&gt;
&lt;p&gt;16、边界值分析，可以针对以下哪些进行&lt;/p&gt;
&lt;p&gt;A 输入参数&lt;/p&gt;
&lt;p&gt;B 输出参数&lt;/p&gt;
&lt;p&gt;C 返回值&lt;/p&gt;
&lt;p&gt;D 桩的输出值与返回值&lt;/p&gt;
&lt;p&gt;17、J2EE和.NET相比，以下说法正确的有()&lt;/p&gt;
&lt;p&gt;A J2EE在异构环境的支持上更好&lt;/p&gt;
&lt;p&gt;B J2EE的开放性优于.NET&lt;/p&gt;
&lt;p&gt;C J2EE更多以Java语言为基础，而.NET可以采用C#以及其他多种语言实现&lt;/p&gt;
&lt;p&gt;D 以上都不对&lt;/p&gt;
&lt;p&gt;18、下列说法错误的有()&lt;/p&gt;
&lt;p&gt;A 数组是一种对象&lt;/p&gt;
&lt;p&gt;B数组属于一种原生类&lt;/p&gt;
&lt;p&gt;C int number[]={31,23,33,43,35,63}&lt;/p&gt;
&lt;p&gt;D 数组的大小可以任意改变&lt;/p&gt;
&lt;p&gt;19、页面置换算法有&lt;/p&gt;
&lt;p&gt;A 最佳适应算法  B先进先出算法 C LRU方法 D最佳转换算法&lt;/p&gt;
&lt;p&gt;20、设有二维数组int b[5][6];下面五种表达式相等的是&lt;/p&gt;
&lt;p&gt;A &amp;amp;b[1][1] B  &lt;em&gt;b  C &lt;/em&gt;b+1  D b[1]+1 E b[1]&lt;/p&gt;
&lt;p&gt;三判断题&lt;/p&gt;
&lt;p&gt;1、ASP.NET是统一的Web应用程序平台，它提供了为建立和部署企业web应用程序所需的服务&lt;/p&gt;
&lt;p&gt;2、装箱与拆箱是一对完全独立的操作&lt;/p&gt;
&lt;p&gt;3、Java文件中第一行一定是package语句，必须放在第一行&lt;/p&gt;
&lt;p&gt;4、Java语言的源程序不是编译型的，而是编译解释型的&lt;/p&gt;
&lt;p&gt;5、使用DeriveParameters可以节省代码量，最大提高开发效率&lt;/p&gt;
&lt;p&gt;6、串(string)可以看成是每个结点仅由一个字符组成的线性表，串也称为字符串&lt;/p&gt;
&lt;p&gt;7、所有的异常都可以捕捉到并且进行处理&lt;/p&gt;
&lt;p&gt;8、Treemap的速度通常 比Hashmap快，只有在需要排放的功能的时候才用到Hashmap&lt;/p&gt;
&lt;p&gt;9、需求驱动软件架构设计，在PA/CA阶段，需要整理所有需求，抱括所有功能、质量需求&lt;/p&gt;
&lt;p&gt;10、设计模型是说明用例实现的对象模型，是实施模型及其源代码的抽像，设计模型用作实施和测试活动的基本输入&lt;/p&gt;
&lt;p&gt;四：简答题：&lt;/p&gt;
&lt;p&gt;1、说明IP地址与硬件地址的驱动，为什么要使用这两种不同的地址&lt;/p&gt;
&lt;p&gt;2、C/C++关键字static的作用是什么&lt;/p&gt;
&lt;p&gt;3、代码段与数据段有什么区别&lt;/p&gt;
&lt;p&gt;4、请概述下视频播放的主要过程，仅限于本机视频，不包括网络视频&lt;/p&gt;
&lt;p&gt;五、应用题&lt;/p&gt;
&lt;p&gt;1、编写一个单例模式(Singleton）的实例&lt;/p&gt;
&lt;p&gt;2、编写一个队列操作用链表实现&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="中兴笔试题"></category></entry><entry><title>阿里巴巴2014年校招笔试题(研发)</title><link href="http://www.yanyulin.info/pages/2013/12/alibaba_2014_A.html" rel="alternate"></link><updated>2013-12-06T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-06:pages/2013/12/alibaba_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第一部分 单选题&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;1 一次内存访、SSD硬盘访问和SATA硬盘随机访问的时间分别约是（）。&lt;/p&gt;
&lt;p&gt;A、几微秒，几毫秒，几十毫秒        B、几微秒，几十微秒，几十毫秒 &lt;/p&gt;
&lt;p&gt;C、几十纳秒，几十微秒，几十毫秒  D、几十纳秒，几十微秒，十几毫秒    &lt;/p&gt;
&lt;p&gt;2 8进制数256，转换成7进制数是（）&lt;/p&gt;
&lt;p&gt;A、356     B、346   C、338    D、336    &lt;/p&gt;
&lt;p&gt;3 某网络的IP地址空间为&lt;code&gt;192.168.5.0/24&lt;/code&gt;。采用定长子网划分，子网掩码为&lt;code&gt;255.255.255.248&lt;/code&gt;，则该网络的最大子网个数、每个子网内的最大可分配地址个数各为()&lt;/p&gt;
&lt;p&gt;A、32，6    B、32，8  C、8，32  D、8，30    &lt;/p&gt;
&lt;p&gt;4 以下关于链式存储结构说法错误的是()&lt;/p&gt;
&lt;p&gt;A、比顺序存储结构的存储密度小     B、每个节点是由数据域和指针域组成 &lt;/p&gt;
&lt;p&gt;C、查找节点时链式存储比顺序存储块  D、逻辑上不相邻的节点物理上可能相邻   &lt;/p&gt;
&lt;p&gt;5 假定一个二维数组的定义语句为&lt;code&gt;int a[3][4]={{3,4},{2,8,6}}&lt;/code&gt;;，则元 素&lt;code&gt;a[1][2]&lt;/code&gt;的值为()&lt;/p&gt;
&lt;p&gt;A、2   B、4     C、6     D、8    &lt;/p&gt;
&lt;p&gt;6 下面函数的功能是()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;func&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
 &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;Char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="n"&gt;While&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
 &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、求字符串的长度     B、复制一个字符串   C、计算字符串的位(bit)数   D、求字符串存放的位置    &lt;/p&gt;
&lt;p&gt;7 判断有向图是否存在回路，利用()方法最佳&lt;/p&gt;
&lt;p&gt;A、求关键路径   B、求最短路径     C、拓扑排序  D、广度优先遍历    &lt;/p&gt;
&lt;p&gt;8 依次读入数据元素序列&lt;code&gt;{a,b,c,d,e,f,g}&lt;/code&gt;进栈，元素进栈或出栈顺序是未知的，下列序列中，不可能成为栈空时弹出的元素构成序列的有()&lt;/p&gt;
&lt;p&gt;A 、{d,e,c,f,b,g,a}    B、{f,e,g,d,a,c,b}   C、{e,f,d,g,c,b,a}   D、{c,d,b,e,f,a,g}   &lt;/p&gt;
&lt;p&gt;9 下列有关图的遍历说法中，不正确的是()
 
  A、图的遍历必须用递归实现     B、基本遍历算法有两种：深度遍历和广度遍历 &lt;/p&gt;
&lt;p&gt;C、有向图和无向图都可以进行遍历操作  D、图的遍历算法可以执行在有回路的图上  &lt;/p&gt;
&lt;p&gt;10 在16位机器上跑下列foo函数的结果是()&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;foo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65536&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;I&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;65535&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A、-1，65535  B、0，65535  C、-1，-1     D、0，-1&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以下每题3分&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;11 有一段年代久远的C++代码，内部逻辑复杂。现在需要利用其实现一个新的需求，假定有以下可行的方案，应当优先选择()&lt;/p&gt;
&lt;p&gt;A、修改老代码接口，满足新的需求   &lt;/p&gt;
&lt;p&gt;B、在这段代码之外写一段代码，调用该代码的一些模块，完成新功能需求      &lt;/p&gt;
&lt;p&gt;C、修改老代码的内部逻辑，满足新的需求    &lt;/p&gt;
&lt;p&gt;D、将老代码抛弃，自己重新实现类似的逻辑  &lt;/p&gt;
&lt;p&gt;12 在5个页框上使用LRU页面替换算法。当页框初始为空时，引用序列为0、1、7、8、6、2、3、7、2、9、8、1、0、2，系统将发生()次缺页。 &lt;/p&gt;
&lt;p&gt;A、11 B、12 C、13 D、8 &lt;/p&gt;
&lt;p&gt;13 阿里巴巴有相距1500km的两机房A和B。现在有100GB数据需要通过一条FTP连接在100s的时间内从A传输到B。已知FTP连接建立在TCP协议之上，而TCP协议通过ACK来确认每个数据包是否正确传送。网络信号传输速度为
2*108m/s，假设机房间带宽足够高，那么A节点的发送缓冲区可以设置为最小()&lt;/p&gt;
&lt;p&gt;A、6MB  B、12 MB  C、18 MB  D、24 MB  &lt;/p&gt;
&lt;p&gt;14 有3个节点的二叉树可能有()种 &lt;/p&gt;
&lt;p&gt;A、12 B、13 C、5  D、15 &lt;/p&gt;
&lt;p&gt;15 设某文件经内排序后得到100个初始归并段（初始顺串），若使用多路归并排序算法，且要求三趟归并完成排序，问归并路数最少为()&lt;/p&gt;
&lt;p&gt;A、5 B、6 C、7 D、8&lt;/p&gt;
&lt;p&gt;16 一个优化的程序可以生成一n个元素集合的所有子集，那么该程序的时间复
杂度是() &lt;/p&gt;
&lt;p&gt;A、O(n!) B、O(nlogn) C、O(n2) D、O(2n) &lt;/p&gt;
&lt;p&gt;17 快速排序在已经有序的情况下效率最差，复杂度为()
 
A、O(nlogn) B、O(n2logn) C、O(n1.5) D、O(n2)&lt;/p&gt;
&lt;p&gt;18 从一副牌（52张，不含大小怪）里抽出两张牌，其中一红一黑的概率是()
 
A、25/51 B、26/51 C、1/2 D、1/3 &lt;/p&gt;
&lt;p&gt;19 有一堆石子共100枚，甲乙轮流从该堆中取石子，每次可取2、4或6枚，取得最后的石子的玩家为赢家，若甲先取，则()&lt;/p&gt;
&lt;p&gt;A、甲必胜 B、乙必胜 C、谁都无法必胜 D、不确定 &lt;/p&gt;
&lt;p&gt;20. 现有一完全的P2P共享协议。每次两个节点通讯后都能获取对方已经获取的
全部信息。现在使得系统中每个节点都知道所有节点的文件信息，共17个节点，假设只能通过多次两个对等节点之间通讯的方式，则最少需要()次通讯 &lt;/p&gt;
&lt;p&gt;A、29    B、30    C、31    D、32&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第二部分  不定项选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;21 2-3树是一种特殊的树，它满足两个条件：(1). 每个内部结点有两个或三个子结点；(2). 所有的叶结点到根的长度相同； 如果一棵2-3树有9个叶结点，下列数量个非叶结点的2-3树可能存在的有()&lt;/p&gt;
&lt;p&gt;A、4     B、5     C、6     D、7     E、8 &lt;/p&gt;
&lt;p&gt;22 下列有关进程的说法中，()是错误的&lt;/p&gt;
&lt;p&gt;A、进程是静态的 B、进程是动态的过程  C、进程与程序是一一对应的  D、进程与作业是一一对应的 &lt;/p&gt;
&lt;p&gt;23 下列函数定义中，有语法错误的是() &lt;/p&gt;
&lt;p&gt;A、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;B、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;*=&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;C、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;D、&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;fun&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;24 有朋自远方来。他乘火车，轮船，汽车，飞机来的概率分别是0.3，0.2，0.1，0.4。坐各交通工具迟到的概率分别是1/4，1/3，1/12，0。下列语句中正确的是()&lt;/p&gt;
&lt;p&gt;A、如果他迟到，坐火车来的概率是0.5&lt;/p&gt;
&lt;p&gt;B、如果他准点，坐轮船或汽车的概率等于坐火车的概率&lt;/p&gt;
&lt;p&gt;C、如果他准点，那么乘飞机的概率大于等于0.5&lt;/p&gt;
&lt;p&gt;D、坐陆路（火车、汽车）交通工具准点机会比坐水路（轮船）要低&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第三部分  填空与问答&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;25 文件分配表FAT是管理磁盘空间的一种数据结构，用在以连接方式存储文件的系统中记录磁盘分配和跟踪空白磁盘块。整个磁盘仅设一张FAT表，其结构如下图所示。如果文件块号为2，查找FAT序号为2的内容得知物理块2的后继物理块是5；再查FAT序号为5的内容得知物理块5的后继物理块是7；接着继续查FAT序号为7的内容为”^”，即该文件结束标志，所以该文件由物理块2、5、7组成&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/alibaba_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/daan/alibaba_0.png"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设磁盘物理块大小为1KB，并且FAT序号以4bits为单位向上扩充空间。 请计算下列两块磁盘的FAT最少需要占用多大的存储空间？ 1) 一块540MB的硬盘 2) 一块1.2GB的硬盘&lt;/p&gt;
&lt;p&gt;26 已知如下代码，并在两个线程中同时执行f1和f2，待两个函数都返回后，a的所有可能值是哪些？ &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f1&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f2&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="n"&gt;c&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;11&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
 &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;27 设计一个最优算法来查找一n个元素数组中的最大值和最小值。已知一种需要比较2n次的方法，请给一个更优的算法。请特别注意优化时间复杂度的常数。 给出该算法最坏情况下的比较次数和该算法的步骤描述。 （不用写代码，不给出比较次数的不得分）  &lt;/p&gt;
&lt;p&gt;28 已知三个升序整数数组 a[l]、b[m]和c[n]。请在三个数组中各找一个元素，使得组成的三元组距离最小。三元组的距离定义是：假设a[i]、b[j]和c[k]是一个三元组，那么距离为:distance = max (|a[i]- b[j]|, | a[i] -c[k]|, | b[j] -c[k]|)&lt;/p&gt;
&lt;p&gt;请设计一求最小三元组距离的最优算法，并分析时间复杂度（不用写代码，不分析时间复杂度的不得分）&lt;/p&gt;
&lt;p&gt;29在黑板上写下50个数字：1至50。在接下来的49轮操作中，每次做如下动作：选取两个黑板上的数字a和b，擦去，在黑板上写|b-a|。请问最有一次动作之后剩下数字可能是什么？为什么？ （不用写代码，不写原因不得分）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;第四部分  JAVA选做题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1请给出下面代码的输出 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt; &lt;span class="n"&gt;t2&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;t2&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;99&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“构造快”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  
    &lt;span class="k"&gt;static&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt; 
        &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“静态块”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; &lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;   &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;   &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt; 
    &lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;   &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="err"&gt;“&lt;/span&gt;   &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;     &lt;span class="err"&gt;】&lt;/span&gt;
    &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;  
&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt;&lt;span class="err"&gt;…&lt;/span&gt;&lt;span class="n"&gt;strings&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;     
&lt;span class="n"&gt;Test1&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Test1&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2 已知：为了保持请求的并行度，一台web应用服务器目前需要10个到一台&lt;code&gt;oracle&lt;/code&gt;的数据库连接，目前oracle数据库能够稳定承载的连接数是7000个。目前已经拥有的web应用服务器数是400台，并且web服务器以每年以300的规模在增长。 &lt;/p&gt;
&lt;p&gt;问题：目前能够才去的策略有哪些？请从原理上对这些策略为什么能够起作用进行一下分析。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="阿里巴巴笔试题"></category></entry><entry><title>创新工场2014年校招笔试题(研发)</title><link href="http://www.yanyulin.info/pages/2013/12/cxgc_2014_A.html" rel="alternate"></link><updated>2013-12-06T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-06:pages/2013/12/cxgc_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;选择题&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1 若进栈序列为&lt;code&gt;a、b、c、d&lt;/code&gt;，进栈过程中可以出栈，那么（）不可能是一个出栈序列。&lt;/p&gt;
&lt;p&gt;A cbad     B bdca     &lt;code&gt;C adbc&lt;/code&gt;   D cdba&lt;/p&gt;
&lt;p&gt;2 完全二叉树中编号为i的结点存在右孩子，右孩子结点的编号为（）设根结点编号为1。&lt;/p&gt;
&lt;p&gt;A.2i-1      B.2i      &lt;code&gt;C.2i+1&lt;/code&gt;     D.2i+2&lt;/p&gt;
&lt;p&gt;3 下面哪种排序算法的平均时间复杂度和其他不一样：&lt;/p&gt;
&lt;p&gt;A.堆排序    B.快排     &lt;code&gt;C.插入排序&lt;/code&gt;   D.归并排序&lt;/p&gt;
&lt;p&gt;4 以下情况发生时，对程序运行速度影响最小的是：&lt;/p&gt;
&lt;p&gt;A.分支预测失败    &lt;code&gt;B.L1 Cache 失效&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;C.IO等待          D.虚拟内存page miss&lt;/p&gt;
&lt;p&gt;5 Inter-processs communication(IPC) is the transfer of data among processes. 
Which is not a typical programming technique for IPC:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A.mutex&lt;/code&gt;    B.pipe     C.socket     D.message queue&lt;/p&gt;
&lt;p&gt;6 给出这样一个函数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;calc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;计算&lt;code&gt;calc(2,7&lt;/code&gt;)的值&lt;/p&gt;
&lt;p&gt;A.25    &lt;code&gt;B.24&lt;/code&gt;   C.22    D.16&lt;/p&gt;
&lt;p&gt;7 如果我们的程序需要经常在多种算法中相互替换，我们应该选择哪种设计模式（）&lt;/p&gt;
&lt;p&gt;A 工厂方法模式     &lt;code&gt;B 策略模式&lt;/code&gt;     C 适配器模式    D 责任链模式&lt;/p&gt;
&lt;p&gt;8 关于数据库的描述错误的是：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A 创建索引一定能提升查询时间&lt;/code&gt;    B 主键的数据列要简历索引&lt;/p&gt;
&lt;p&gt;C 外键的数据列要建立索引        D 常见的数据库索引有Hash索引，B-tree索引&lt;/p&gt;
&lt;p&gt;9 以下TCP原语中，哪一个是用于客户端的：&lt;/p&gt;
&lt;p&gt;A bind  B listen C &lt;code&gt;connect&lt;/code&gt;  D accept&lt;/p&gt;
&lt;p&gt;10 小冯和小崔都去参加一个workshop,这个workshop从晚上6点到8点，但是他们都只参加了一部分会议。小冯参会一小时，小崔参会半小时，那么他俩相遇的可能性有多大（）&lt;/p&gt;
&lt;p&gt;A &lt;code&gt;5/6&lt;/code&gt;   B   5/8   C 1/2   D 1/4&lt;/p&gt;
&lt;p&gt;编程题&lt;/p&gt;
&lt;p&gt;1 输入一个整数无序数组，用堆排序的方法使数组有序&lt;/p&gt;
&lt;p&gt;2 求一个正整数N的开方，要求不能用库函数&lt;code&gt;sqrt()&lt;/code&gt;，结果的精度在&lt;code&gt;0.001&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3 给定一个矩阵&lt;code&gt;int maxtrixA[m][n]&lt;/code&gt;,每行和每列都是增序的，实现一个算法去找矩阵中的某个元素&lt;code&gt;element&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="创新工场笔试题"></category></entry><entry><title>美团网2014年校招笔试题(研发)</title><link href="http://www.yanyulin.info/pages/2013/12/meituan_2014_A.html" rel="alternate"></link><updated>2013-12-06T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-06:pages/2013/12/meituan_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;strong&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、某二叉树中序序列为A,B,C,D,E,F,G。后序序列为B,D,C,A,F,G,E,则该二叉树节点的前序序列是?请写出分析&lt;code&gt;过程及结果&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2、定义一个二进制数字串的“长度”为从最右侧开始算起连续1的个数（说明，如果最右侧为0，则长度为0，如果最右侧为1，则开始数连续的1的个数作为长度）。例如&lt;code&gt;length(100011)=2,length(100000)=0,&lt;/code&gt;请分析一个随机的N位字串的“长度”的期望值是多少，注意这个长度是从最右侧算起的，比如&lt;code&gt;length(111011)=2&lt;/code&gt;,即使，字符串左边出现更长的长度&lt;/p&gt;
&lt;p&gt;3、某公司的销售专家需要拜访商家，假设本市总共有M家商家，美团派了N位销售专家来拜访本市的商家。假设专家之间互不通信，每位专家随机选择&lt;code&gt;K&lt;/code&gt;个商家。如果有多位专家拜访了一个商家，我们称之为拜访碰撞。问发生拜访碰撞的概率是多少?&lt;/p&gt;
&lt;p&gt;4、请编写一个函数，实现将一棵二叉树每一个节点的左右子节点&lt;code&gt;相互调换&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;5、美团把城市比较繁华,人流大的区域用多边形圈起来，就构成了一个商业圈，如果知道一个门店的坐标，就可以知道这个店属于哪个商业圈，坐标用以下结构体表示：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;point&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="kt"&gt;double&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请判断一个门店是否处在一个商业圈内&lt;code&gt;boolean isInner(Point *poly,int len ,point pit)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;其中poly表示商圈顶点多边形坐标数组，len表示顶点数量，pit表示要判断的门店坐标&lt;/p&gt;
&lt;p&gt;1、请先说明算法思路&lt;/p&gt;
&lt;p&gt;2、请编写代码实现&lt;/p&gt;
&lt;p&gt;6、给一个浮点数序列,请实现函数计算任意连续子序列最大乘积的值&lt;/p&gt;
&lt;p&gt;例如序列：-2.5 4 0 3 0.5 8 -1 &lt;/p&gt;
&lt;p&gt;则取出的连续序列为3 0.5 8&lt;/p&gt;
&lt;p&gt;最大乘积为3&lt;em&gt;0.5&lt;/em&gt;8&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;各位如果有更好的答案，请留言评价，方便更多的人&lt;/strong&gt;&lt;/p&gt;</summary><category term="美团网笔试题"></category></entry><entry><title>编程之美—微软技术面试心得</title><link href="http://www.yanyulin.info/pages/2013/12/prgbeautiful.html" rel="alternate"></link><updated>2013-12-05T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-05:pages/2013/12/prgbeautiful.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;编程之美&lt;/code&gt;收集了约&lt;code&gt;60&lt;/code&gt;道算法和程序设计题目，这些题目大部分在近年的笔试，面试中出现过，或者是被微软员工热烈讨论过。作者试图从书中各种有趣的问题出发，引导读者发现问题，&lt;code&gt;分析问题&lt;/code&gt;，解决问题，寻找更优的解法&lt;/p&gt;
&lt;p&gt;电子书下载地址:&lt;a href="http://yunpan.cn/QU98W2IsqzW8m" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;觉的好的，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;编程之美&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;第1章游戏之乐——游戏中碰到的题目 1&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1让CPU占用率曲线听你指挥 3&lt;/p&gt;
&lt;p&gt;1.2中国象棋将帅问题 13&lt;/p&gt;
&lt;p&gt;1.3一摞烙饼的排序 20&lt;/p&gt;
&lt;p&gt;1.4买书问题 30&lt;/p&gt;
&lt;p&gt;1.5快速找出故障机器 35&lt;/p&gt;
&lt;p&gt;1.6饮料供货 40&lt;/p&gt;
&lt;p&gt;1.7光影切割问题 45&lt;/p&gt;
&lt;p&gt;1.8小飞的电梯调度算法50&lt;/p&gt;
&lt;p&gt;1.9高效率地安排见面会 54&lt;/p&gt;
&lt;p&gt;1.10双线程高效下载 59&lt;/p&gt;
&lt;p&gt;1.11NIM（1）一排石头的游戏 64&lt;/p&gt;
&lt;p&gt;1.12NIM（2）“拈”游戏分析 67&lt;/p&gt;
&lt;p&gt;1.13NIM（3）两堆石头的游戏 72&lt;/p&gt;
&lt;p&gt;1.14连连看游戏设计 86&lt;/p&gt;
&lt;p&gt;1.15构造数独 91&lt;/p&gt;
&lt;p&gt;1.1624点游戏 99&lt;/p&gt;
&lt;p&gt;1.17俄罗斯方块游戏 108&lt;/p&gt;
&lt;p&gt;1.18挖雷游戏 116&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第2章数字之魅——数字中的技巧 117&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1求二进制数中1的个数 119&lt;/p&gt;
&lt;p&gt;2.2不要被阶乘吓倒 125&lt;/p&gt;
&lt;p&gt;2.3寻找发帖“水王” 129&lt;/p&gt;
&lt;p&gt;2.41的数目 132&lt;/p&gt;
&lt;p&gt;2.5寻找最大的K个数 139&lt;/p&gt;
&lt;p&gt;2.6精确表达浮点数 147&lt;/p&gt;
&lt;p&gt;2.7最大公约数问题 150&lt;/p&gt;
&lt;p&gt;2.8找符合条件的整数 155&lt;/p&gt;
&lt;p&gt;2.9斐波那契（Fibonacci）数列 160&lt;/p&gt;
&lt;p&gt;2.10寻找数组中的最大值和最小值 166&lt;/p&gt;
&lt;p&gt;2.11寻找最近de点对 171&lt;/p&gt;
&lt;p&gt;2.12快速寻找满足条件的两个数 178&lt;/p&gt;
&lt;p&gt;2.13子数组的最大乘积 182&lt;/p&gt;
&lt;p&gt;2.14求数组的子数组之和的最大值 185&lt;/p&gt;
&lt;p&gt;2.15子数组之和的最大值（二维） 192&lt;/p&gt;
&lt;p&gt;2.16求数组中最长递增子序列 198&lt;/p&gt;
&lt;p&gt;2.17数组循环移位 204&lt;/p&gt;
&lt;p&gt;2.18数组分割 207&lt;/p&gt;
&lt;p&gt;2.19区间重合判断 211&lt;/p&gt;
&lt;p&gt;2.20程序理解和时间分析 215&lt;/p&gt;
&lt;p&gt;2.21只考加法的面试题 217&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第3章结构之法——字符串及链表的探索 219&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1字符串移位包含的问题 221&lt;/p&gt;
&lt;p&gt;3.2电话号码对应英语单词 224&lt;/p&gt;
&lt;p&gt;3.3计算字符串的相似度 230&lt;/p&gt;
&lt;p&gt;3.4从无头单链表中删除节点 234&lt;/p&gt;
&lt;p&gt;3.5最短摘要的生成 237&lt;/p&gt;
&lt;p&gt;3.6编程判断两个链表是否相交 241&lt;/p&gt;
&lt;p&gt;3.7队列中取最大值操作问题 244&lt;/p&gt;
&lt;p&gt;3.8求二叉树中节点的最大距离 250&lt;/p&gt;
&lt;p&gt;3.9重建二叉树 256&lt;/p&gt;
&lt;p&gt;3.10分层遍历二叉树 262&lt;/p&gt;
&lt;p&gt;3.11程序改错 268&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4章数学之趣——数学游戏的乐趣 273&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.1金刚坐飞机问题 275&lt;/p&gt;
&lt;p&gt;4.2瓷砖覆盖地板 279&lt;/p&gt;
&lt;p&gt;4.3买票找零 282&lt;/p&gt;
&lt;p&gt;4.4点是否在三角形内 286&lt;/p&gt;
&lt;p&gt;4.5磁带文件存放优化 291&lt;/p&gt;
&lt;p&gt;4.6桶中取黑白球 294&lt;/p&gt;
&lt;p&gt;4.7蚂蚁爬杆 299&lt;/p&gt;
&lt;p&gt;4.8三角形测试用例303&lt;/p&gt;
&lt;p&gt;4.9数独知多少 307&lt;/p&gt;
&lt;p&gt;4.10数字哑谜和回文 315&lt;/p&gt;
&lt;p&gt;4.11挖雷游戏的概率 322&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="算法之美"></category></entry><entry><title>Photoshop CS视频教程(下)</title><link href="http://www.yanyulin.info/pages/2013/12/psbase2.html" rel="alternate"></link><updated>2013-12-05T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-05:pages/2013/12/psbase2.html</id><summary type="html">&lt;p&gt;,画笔面板7,画笔面板8,画笔面板9,画笔面板10,图像的剪切复制与粘贴,图像的缩放旋转与斜切。&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;视频教程下载地址:&lt;a href="http://yunpan.cn/QUGwJ8GLNDNW7" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;觉的好的，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Photoshop CS视频教程(下)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;建立、复制与删除层&lt;/p&gt;
&lt;p&gt;通道基础知识&lt;/p&gt;
&lt;p&gt;路径面板1&lt;/p&gt;
&lt;p&gt;路径面板2&lt;/p&gt;
&lt;p&gt;路径面板3&lt;/p&gt;
&lt;p&gt;路径面板4&lt;/p&gt;
&lt;p&gt;历史记录面板&lt;/p&gt;
&lt;p&gt;颜色面板&lt;/p&gt;
&lt;p&gt;色板面板&lt;/p&gt;
&lt;p&gt;样式面板&lt;/p&gt;
&lt;p&gt;导航器面板&lt;/p&gt;
&lt;p&gt;信息面板&lt;/p&gt;
&lt;p&gt;直方图面板&lt;/p&gt;
&lt;p&gt;字符面板&lt;/p&gt;
&lt;p&gt;段落面板&lt;/p&gt;
&lt;p&gt;画笔面板1&lt;/p&gt;
&lt;p&gt;画笔面板2&lt;/p&gt;
&lt;p&gt;画笔面板3&lt;/p&gt;
&lt;p&gt;画笔面板3&lt;/p&gt;
&lt;p&gt;画笔面板5&lt;/p&gt;
&lt;p&gt;画笔面板6&lt;/p&gt;
&lt;p&gt;直方图面板&lt;/p&gt;
&lt;p&gt;画笔面板7&lt;/p&gt;
&lt;p&gt;画笔面板8&lt;/p&gt;
&lt;p&gt;画笔面板9&lt;/p&gt;
&lt;p&gt;画笔面板10&lt;/p&gt;
&lt;p&gt;图像的剪切复制与粘贴&lt;/p&gt;
&lt;p&gt;图像的缩放旋转与斜切&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="PhotoShop视频"></category></entry><entry><title>VC视频教程(主要讲述`MFC`)</title><link href="http://www.yanyulin.info/pages/2013/12/vc_1.html" rel="alternate"></link><updated>2013-12-05T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-05:pages/2013/12/vc_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;视频教程下载地址:&lt;a href="http://yunpan.cn/QUGwZ275t5VQK" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;觉的好的，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VC视频教程(主要讲述&lt;code&gt;MFC&lt;/code&gt;)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;孙鑫C++教程01&lt;/p&gt;
&lt;p&gt;孙鑫C++教程02&lt;/p&gt;
&lt;p&gt;孙鑫C++教程03&lt;/p&gt;
&lt;p&gt;孙鑫C++教程04&lt;/p&gt;
&lt;p&gt;孙鑫C++教程05&lt;/p&gt;
&lt;p&gt;孙鑫C++教程06&lt;/p&gt;
&lt;p&gt;孙鑫C++教程07&lt;/p&gt;
&lt;p&gt;孙鑫C++教程08&lt;/p&gt;
&lt;p&gt;孙鑫C++教程09&lt;/p&gt;
&lt;p&gt;孙鑫C++教程10&lt;/p&gt;
&lt;p&gt;孙鑫C++教程11&lt;/p&gt;
&lt;p&gt;孙鑫C++教程12&lt;/p&gt;
&lt;p&gt;孙鑫C++教程13&lt;/p&gt;
&lt;p&gt;孙鑫C++教程14&lt;/p&gt;
&lt;p&gt;孙鑫C++教程15&lt;/p&gt;
&lt;p&gt;孙鑫C++教程16&lt;/p&gt;
&lt;p&gt;孙鑫C++教程17&lt;/p&gt;
&lt;p&gt;孙鑫C++教程18&lt;/p&gt;
&lt;p&gt;孙鑫C++教程19&lt;/p&gt;
&lt;p&gt;孙鑫C++教程20&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="VC视频"></category></entry><entry><title>PhotoShop CS入门版视频教程(基础上)</title><link href="http://www.yanyulin.info/pages/2013/12/psbase_1.html" rel="alternate"></link><updated>2013-12-04T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-04:pages/2013/12/psbase_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;视频教程下载地址:&lt;a href="http://yunpan.cn/QUGwKCTFL3cLC" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;觉的好的，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;PhotoShop CS入门版视频教程(基础上)&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;界面简介&lt;/p&gt;
&lt;p&gt;怎样打开图像文件&lt;/p&gt;
&lt;p&gt;怎样新建一个文件&lt;/p&gt;
&lt;p&gt;图像的表达点阵图&lt;/p&gt;
&lt;p&gt;规则选择工具组&lt;/p&gt;
&lt;p&gt;不规则选择工具组&lt;/p&gt;
&lt;p&gt;魔棒工具&lt;/p&gt;
&lt;p&gt;选择工具的其他设置&lt;/p&gt;
&lt;p&gt;移动工具及图层对齐&lt;/p&gt;
&lt;p&gt;裁切工具&lt;/p&gt;
&lt;p&gt;切片工具1&lt;/p&gt;
&lt;p&gt;切片工具2&lt;/p&gt;
&lt;p&gt;修复画笔工具1&lt;/p&gt;
&lt;p&gt;修复画笔工具2&lt;/p&gt;
&lt;p&gt;颜色替换工具&lt;/p&gt;
&lt;p&gt;画笔工具与铅笔工具&lt;/p&gt;
&lt;p&gt;仿制图章工具&lt;/p&gt;
&lt;p&gt;图案图章工具&lt;/p&gt;
&lt;p&gt;历史记录画笔工具&lt;/p&gt;
&lt;p&gt;历史记录艺术画笔工具&lt;/p&gt;
&lt;p&gt;普通、背景与魔术橡皮擦&lt;/p&gt;
&lt;p&gt;渐变工具1&lt;/p&gt;
&lt;p&gt;渐变工具2&lt;/p&gt;
&lt;p&gt;渐变工具3&lt;/p&gt;
&lt;p&gt;渐变工具4&lt;/p&gt;
&lt;p&gt;渐变工具5&lt;/p&gt;
&lt;p&gt;油漆桶工具&lt;/p&gt;
&lt;p&gt;模糊、锐化与涂抹工具&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="PhotoShop视频"></category></entry><entry><title>2014年百度校招笔试试卷A</title><link href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html" rel="alternate"></link><updated>2013-12-03T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-03:pages/2013/12/baidu_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人&lt;/p&gt;
&lt;p&gt;一、简答题&lt;/p&gt;
&lt;p&gt;1、当前计算机系统一般会采用层次结构存储数据，请介绍下典型计算机存储系统一般分为哪几个层次，为什么采用分层存储数据能有效提高程序的执行效率?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;目前，在计算机系统中通常采用三级层次结构来构成存储系统，主要由高速缓冲存储器Cache、主存储器和辅助存储器组成,存储系统多级层次结构中，由上向下分三级，其容量逐渐增大，速度逐级降低，成本则逐次减少,整个结构又可以看成两个层次：它们分别是主存一辅存层次和cache一主存层次,一个较大的存储系统是由各种不同类型的存储设备构成，是一个具有多级层次结构的存储系统。该系统既有与CPU相近的速度，又有极大的容量，而成本又是较低的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、Unix/Linux系统中僵尸进程是如何产生的？有什么危害？如何避免？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个进程在调用exit命令结束自己的生命的时候，其实它并没有真正的被销毁，而是留下一个称为僵尸进程
的数据结构,在Linux进程的状态中，僵尸进程是非常特殊的一种，它已经放弃了几乎所有内存空间，没有任何可执行代码，也不能被调度，仅仅在进程列表中保留一个位置，记载该进程的退出状态等信息供其他进程收集，除此之外，僵尸进程不再占有任何内存空间。它需要它的父进程来为它收尸，如果他的父进程没安装SIGCHLD信号处理函数调用wait或waitpid()等待子进程结束，又没有显式忽略该信号，那么它就一直保持僵尸状态，如果这时父进程结束了，那么init进程自动会接手这个子进程，为它收尸，它还是能被清除的。但是如果如果父进程是一个循环，不会结束，那么子进程就会一直保持僵尸状态，这就是为什么系统中有时会有很多的僵尸进程。&lt;/p&gt;
&lt;p&gt;避免方法：&lt;/p&gt;
&lt;p&gt;在SVR4中，如果调用signal或sigset将SIGCHLD的配置设置为忽略,则不会产生僵死子进程&lt;/p&gt;
&lt;p&gt;调用fork两次。&lt;/p&gt;
&lt;p&gt;用waitpid等待子进程返回. &lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、简述Unix/Linux系统中使用socket库编写服务器端程序的流程，请分别用对应的socket通信函数表示？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;服务器端流程如下：&lt;/p&gt;
&lt;p&gt;1.创建serverSocket&lt;/p&gt;
&lt;p&gt;2.初始化 serverAddr（服务器地址）&lt;/p&gt;
&lt;p&gt;3.将socket和serverAddr 绑定 bind&lt;/p&gt;
&lt;p&gt;4.开始监听 listen&lt;/p&gt;
&lt;p&gt;5.进入while循环，不断的accept接入的客户端socket，进行读写操作write和read&lt;/p&gt;
&lt;p&gt;6.关闭serverSocket&lt;/p&gt;
&lt;p&gt;客户端流程：&lt;/p&gt;
&lt;p&gt;1.创建&lt;code&gt;clientSocket&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;2.初始化&lt;code&gt;serverAddr&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3.链接到服务器 &lt;code&gt;connect&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;4.利用write和read 进行读写操作&lt;/p&gt;
&lt;p&gt;5.关闭clientSocke&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;二、算法与程序设计题&lt;/p&gt;
&lt;p&gt;1、使用C/C++编写函数，实现字符串反转，要求不使用任何系统函数，且时间复杂度最小，函数原型：&lt;code&gt;char* reverse_str(char* str)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;获取首尾指针，然后将首尾指针指向的元素交换，将首指针指向下一个，将尾指针指向前一个，交换指针指向的元素，然后重复执行，直到首尾指针相遇。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、给定一个如下格式的字符串&lt;code&gt;(1,(2,3),(4,(5,6),7))&lt;/code&gt;括号内的元素可以是数字，也可以是另一个括号，请实现一个算法消除嵌套的括号，比如把上面的表达式变成：&lt;code&gt;(1,2,3,4,5,6,7)&lt;/code&gt;，如果表达式有误请报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;使用栈和队列实现&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、题如下图所示&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/job/baidu2014_1.jpg" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;三、系统设计题&lt;/p&gt;
&lt;p&gt;在企业中，对生产数据进行分析具有很重要的意义，但是生产数据通常不能直接用于数据分析，通常需要进行抽取、转换和加载，也就是通常说的ETL。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/job/baidu2014_2.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了便于开发和维护，并提高数据实时性，通常将一个完整的ETL过程分为多个任务，组成流水线，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/job/baidu2014_3.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;假设任务定义和任务之间的依赖关系都保存在文件中，文件格式分别如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/job/baidu2014_4.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;问题：&lt;/p&gt;
&lt;p&gt;1、下面是ETL调度系统的模块图，请描述各个模块呃主要职责，以及各个线条的 含义。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/baidu_2014_A.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/job/baidu2014_4.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、 添加依赖关系时要避免出现环，假设系统同一个时刻只允许一个人添加任务依赖，请实现一个函数来检查新的依赖是否导致环，依赖的上游存在环会导致非正常的调度，因此也希望能避免。（10分）&lt;/p&gt;
&lt;p&gt;函数名：checkCycle&lt;/p&gt;
&lt;p&gt;输入：pairs，已存在的依赖关系&lt;code&gt;((pre,post)……)&lt;/code&gt;, &lt;code&gt;newPair&lt;/code&gt;新的依赖关系&lt;code&gt;(pre,post)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出：True: 不存在环，False: 存在环&lt;/p&gt;
&lt;p&gt;3、 如果调度时，某个任务在其依赖的任务之前执行，必然导致错误，请实现调度算法，确保任务按照依赖顺序执行?&lt;/p&gt;
&lt;p&gt;函数名：&lt;code&gt;schedule&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入1：tasks，整数数组；&lt;/p&gt;
&lt;p&gt;输入2：&lt;code&gt;task-relation&lt;/code&gt;，二元组数组，每个二元组表示一组关系&lt;/p&gt;
&lt;p&gt;输出：&lt;code&gt;task id&lt;/code&gt;序列，并行执行的用","分隔，其他的用";"分隔&lt;/p&gt;
&lt;p&gt;4、 给定一个任务，如何计算出他的最晚完成时间?&lt;/p&gt;
&lt;p&gt;函数名：&lt;code&gt;calMaxEndTime&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入1：&lt;code&gt;tasks&lt;/code&gt;，3元组数组，&lt;code&gt;（task_id, start_time, max_run_time）&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入2：&lt;code&gt;task-relations&lt;/code&gt;，二元组数组，每个二元组表示一组关系&lt;/p&gt;
&lt;p&gt;输入3：&lt;code&gt;task-id&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输出：最晚完成时间&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;本篇答案不全，希望有时间的同学补全&lt;/strong&gt;&lt;/p&gt;</summary><category term="百度笔试题"></category></entry><entry><title>界面编程模仿篇(QQ登录界面逼真篇)</title><link href="http://www.yanyulin.info/pages/2013/12/qqLogin_1.html" rel="alternate"></link><updated>2013-12-01T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-12-01:pages/2013/12/qqLogin_1.html</id><summary type="html">&lt;p&gt;写了好多天的爬虫，偷空前前后后用了两天的时间(排除吃饭睡觉)写完了这个QQ登录界面，看起来还凑和着吧，如果是的大神的，莫见笑，纯属业余作品，废话先不多说，截图如下,其中第二幅图片中的红色方框部份有待完善，明天开始继续搞爬虫，等有时间时再完善，先凑和着吧：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/qqLogin_1.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/qq_5.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/12/qqLogin_1.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/qq_6.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本篇博文就分析一下这个界面设计中的几个关键点，在阅读本博文之前请先阅读我&lt;a href="http://www.yanyulin.info"&gt;个人博客&lt;/a&gt;上关于模仿QQ界面先行篇&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html" target="_blank"&gt;&lt;strong&gt;界面编程模仿篇(模仿腾讯QQ登录界面先行篇)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本程序开源，上传至Github,下载地址：&lt;a href="https://github.com/zwjlpeng/PQQ" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;对于还不会使用github的同学，以下是我的个人博客上的两篇教程&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/github.html" target="_blank"&gt;&lt;strong&gt;Github简明教程(入门篇)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;&lt;strong&gt;Github上如何给别人贡献代码&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;程序采用&lt;code&gt;Java&lt;/code&gt;语言实现，本人只懂&lt;code&gt;C++&lt;/code&gt;/&lt;code&gt;Java&lt;/code&gt;/&lt;code&gt;Python&lt;/code&gt;/&lt;code&gt;Shell&lt;/code&gt;,其他程序语言一概不懂，等有时间再写其他两种语言的登录版本，可以订阅我的&lt;a href="http://www.yanyulin.info"&gt;&lt;strong&gt;个人博客&lt;/strong&gt;&lt;/a&gt;,获取后绪相关文章与资料&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;QQ界面登录程序最显著的地方就是界面无标题栏&lt;/strong&gt;，所以第一步就是去掉标题栏，Java中给&lt;code&gt;JFrame&lt;/code&gt;去标题栏的方法很&lt;code&gt;easy&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setUndecorated&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;的确很easy是吧，但问题又出来了，是去掉了，连窗口的边框都去掉了，这肯定不是想要的结果，在这里可以采用&lt;code&gt;JInternalFrame&lt;/code&gt;实现去标题栏同时保留窗口的边框，核心代码如下(代码中&lt;code&gt;jif&lt;/code&gt;是&lt;code&gt;JInternalFrame&lt;/code&gt;类型):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;javax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plaf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;InternalFrameUI&lt;/span&gt; &lt;span class="n"&gt;jf&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;jif&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getUI&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;javax&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;swing&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;plaf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;basic&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;BasicInternalFrameUI&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;jf&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;setNorthPane&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt; 
&lt;span class="n"&gt;jif&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BorderFactory&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;createLineBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Color&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;LIGHT_GRAY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、&lt;strong&gt;QQ界面窗口居中&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultToolkit&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getScreenSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Toolkit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getDefaultToolkit&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getScreenSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、由于去掉了标题栏，结果最小化，最大化，关闭均被去掉了，更重要的一个功能是窗口随鼠标拖动也被去掉了，因此这些功能都需要自已再重新实现，实现的代码也是很easy的，给JInternalFrame增加监听器，此时得注意的是监听器里操作的对象应该是JFrame,因为最终的目的是对JFrame操作，&lt;strong&gt;窗口移动&lt;/strong&gt;的核心代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//给窗体增加拖动功能&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;setWindowDray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;JComponent&lt;/span&gt; &lt;span class="n"&gt;jc&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
    &lt;span class="n"&gt;jc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMouseListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MouseAdapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;mousePressed&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MouseEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;isDragged&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Point&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getX&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getY&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
            &lt;span class="n"&gt;jif&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="no"&gt;MOVE_CURSOR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;mouseReleased&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MouseEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;isDragged&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;jif&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setCursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cursor&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="no"&gt;DEFAULT_CURSOR&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;           
    &lt;span class="p"&gt;});&lt;/span&gt;
    &lt;span class="n"&gt;jc&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMouseMotionListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;MouseMotionAdapter&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="n"&gt;Override&lt;/span&gt;
        &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;mouseDragged&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;MouseEvent&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;isDragged&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;mainLogin&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLocation&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getXOnScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getYOnScreen&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;axis&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;});&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、&lt;strong&gt;重写JPanel&lt;/strong&gt;，给&lt;code&gt;JPanel&lt;/code&gt;增加背景图片，核心代码如下:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;imgUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pics/afternoon.jpg&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;URL&lt;/span&gt; &lt;span class="n"&gt;textureUrl&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;getClass&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;getResource&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pics/texture.png&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ImageIcon&lt;/span&gt; &lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImageIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;imgUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;ImageIcon&lt;/span&gt; &lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ImageIcon&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;textureUrl&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;drawImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getImage&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;width&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getSize&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;height&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5、&lt;strong&gt;按钮的相关设置&lt;/strong&gt;，对JButton的设置主要是设置背景的透明化，大小，内边框等，对JLabel以及JCheckbox作类似处理，相关代码例子如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setOpaque&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setMargin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;Insets&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setContentAreaFilled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFocusPainted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBorderPainted&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setBorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;null&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;jbtn&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addMouseListener&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;ButtonListener&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、&lt;strong&gt;对JPasswordField的处理&lt;/strong&gt;，QQ密码限制了长度，而且禁止了copy,paste,cut,以及对文本的选择操作，在这里就要自已实现一个类继承JPasswordFiled,在这个类里面重写copy,paste,cut,同时还得重写&lt;code&gt;JPasswordField&lt;/code&gt;的Document模型对像，只有重写了它，才能限制密码的输入长度，以下是限制密码长度的代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;insertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;offs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;AttributeSet&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;throws&lt;/span&gt; &lt;span class="n"&gt;BadLocationException&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;this&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLength&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;MAX_LENGTH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;insertString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;offs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;7、最重要的一点，就是如何缩减代码的长度，增加代码复用，这个得自已考虑去&lt;/p&gt;
&lt;p&gt;8、程序中不采用任何界面布局，Java中的界面布局不太适合，将布局设置成&lt;code&gt;null&lt;/code&gt;,自已控制控件的位置&lt;/p&gt;
&lt;p&gt;备注：本程序开发过程中需要用到的软件请参考
&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html" target="_blank"&gt;&lt;strong&gt;界面编程模仿篇(模仿腾讯QQ登录界面先行篇)&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;</summary><category term="界面编程"></category></entry><entry><title>界面编程模仿篇(模仿腾讯QQ登录界面)</title><link href="http://www.yanyulin.info/pages/2013/11/qqLogin.html" rel="alternate"></link><updated>2013-11-29T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-29:pages/2013/11/qqLogin.html</id><summary type="html">&lt;p&gt;写了几天的爬虫，过几天再继续写，今天偷会懒，写了个仿QQ登录界面，截图如下，怎么样，还凑和吧，如果是大神的，请不要见笑，截图如下，明天争取完成，完成后，将附上文档与代码上传到本人的github上，进行开源,如果大家愿意，后绪一块更改，注意，我强调的只是&lt;strong&gt;界面&lt;/strong&gt;,QQ?你想吧内部的各种通信协议，分布式数据库，大数据的处理，各种缓存...&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/tech/qq_1.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;上面程序运行界面中的所有图片都来自QQ2013，本篇文章就介绍如何从&lt;code&gt;QQ2013&lt;/code&gt;中获取图片，了解了这个过程后，你也可以自已Diy图片，然后将图片替换，设计自已的&lt;code&gt;非主流QQ&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;1、与本程序相关的图片保存在两个地方，&lt;code&gt;%appdata%\Tencent\QQ\Temp&lt;/code&gt;以及QQ安装目录下的Resource文件夹下&lt;code&gt;D:\Program Files\Tencent\QQ\Resource.1.97.8200&lt;/code&gt;,从这些文件夹下选取你自已需要的图片，&lt;code&gt;备注Resource.1.97.8200文件夹Resource后面的数字可能会不同&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html"&gt;
&lt;img alt="烟雨林博客" src="http://www.yanyulin.info/pics/tech/qq_2.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、QQ的部份图片保存在rdb文件里，而且图片的格式是gft,下载两款软件，对rdb进行解压，以及对gft格式的文件进行格式转换，转换时最好转成png格式的，软件下载地址：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="http://yunpan.cn/QUMdYmtPW3tsP" target="_blank"&gt;rdb文件解压缩&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yunpan.cn/QUMdBFZeLrSRa" target="_blank"&gt;gft格式转换器&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、对于QQ登录界面，部份图片保存的位置如下图中红色方框如示，在LoginPanel以及LoginUI里&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html"&gt;
&lt;img alt="烟雨林博客"  width="100%" src="http://www.yanyulin.info/pics/tech/qq_3.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、gft格式图片的转换，如下图所示，先导出当前项，然后将导出的文件拖到&lt;code&gt;GFT转换.exe&lt;/code&gt;里，即可完成转换&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/qqLogin.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/tech/qq_4.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、从上面的过程中，可以看出QQ图片保存在哪了吧，你完全可以用自已的图片替换掉rdb文件里的图片，这样QQ运行的时候，就变成了你的图片了，在替换之前，最好先备份下&lt;/p&gt;</summary><category term="界面编程"></category></entry><entry><title>爬虫的自我解剖(抓取网页HtmlUnit)</title><link href="http://www.yanyulin.info/pages/2013/11/fetchPage.html" rel="alternate"></link><updated>2013-11-28T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-28:pages/2013/11/fetchPage.html</id><summary type="html">&lt;p&gt;网络爬虫第一个要面临的问题，就是如何抓取网页，抓取其实很容易，没你想的那么复杂，一个开源&lt;code&gt;HtmlUnit&lt;/code&gt;包，4行代码就OK啦，例子如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.yanyulin.info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asText&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closeAllWindows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在程序中写上上面的4行代码，运行，就可以得到&lt;a href="http://www.yanyulin.info" title="烟雨林"&gt;烟雨林博客&lt;/a&gt;首页的全部内容，上面代码在运行的过程中会出现很多警告，出现这些警告的主要原因是由于以下两点:&lt;/p&gt;
&lt;p&gt;1、&lt;code&gt;HtmlUnit&lt;/code&gt;对&lt;code&gt;Javascript&lt;/code&gt;的支持不是很好&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;HtmlUnit&lt;/code&gt;对&lt;code&gt;CSS&lt;/code&gt;的支持不是很好&lt;/p&gt;
&lt;p&gt;明白了上面的两点后，将代码重新改写一下，该禁用的就禁用，同时禁用一些不必要的功能，也有利于提高程序的运行效率,再者说网络爬虫也不需要CSS的支持滴&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setCssEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getOptions&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="n"&gt;setJavaScriptEnabled&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.yanyulin.info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asText&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;closeAllWindows&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;HtmlUnit&lt;/code&gt;的使用:
简介:&lt;code&gt;HtmlUnit&lt;/code&gt;说白了就是一个浏览器，这个浏览器是用Java写的无界面的浏览器，正因为其没有界面,因此执行的速度还是可以滴，&lt;code&gt;HtmlUnit&lt;/code&gt;提供了一系列的API,这些API可以干的功能比较多，如表单的填充，表单的提交，模仿点击链接，由于内置了&lt;code&gt;Rhinojs&lt;/code&gt;引擎，因此可以执行&lt;code&gt;Javascript&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;作用:web的自动化测试(最初的目的),浏览器，网络爬虫&lt;/p&gt;
&lt;p&gt;重要API的使用
在介绍API的使用之前要先明白的一个问题是，WebClient,WebWindow,Page三者之间的关系，所有的页面最终都是在一个WebWindow对象里面，WebClient在创建时会自动的创建一个WebWindow对象，当调用getPage时会将新页面加载到WebWindow里，你可以理解成WebClient就是IE内核，WebWindow就是呈现页面的浏览器窗口，三者之间的关系图如下图所示：&lt;/p&gt;
&lt;p&gt;1、模拟特定浏览器，也可以指定浏览器的相应版本(HtmlUnit最新版2.13现在可以模拟的浏览器有&lt;code&gt;Chrome&lt;/code&gt;/&lt;code&gt;FireFox&lt;/code&gt;/&lt;code&gt;IE&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//模拟chorme浏览器，其他浏览器请修改BrowserVersion.后面&lt;/span&gt;
&lt;span class="n"&gt;WebClient&lt;/span&gt;  &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BrowserVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="no"&gt;CHROME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、查找特定元素，通过get或者XPath可以从HtmlPage中获得特定的Html元素，如下例子&lt;/p&gt;
&lt;p&gt;方法一，通过get方法获取&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getPage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;http://www.yanyulin.info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//从[烟雨林博客]上获取标签hed的内容&lt;/span&gt;
&lt;span class="n"&gt;HtmlDivision&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HtmlDivision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getElementById&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;hed&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;方法二，通过XPath获取，XPath通常用于无法通过Id搜索，或者需要更为复杂的搜索时，XPath的相关教程&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.w3school.com.cn/xpath/xpath_syntax.asp" title="xpath相关教程"&gt;XPATH相关教程&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//同样可以打印出hed的内容,//div中//表示搜索整个文档中的div,并将这些div&lt;/span&gt;
&lt;span class="c1"&gt;//放入list中，然后获取第一个div&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlDivision&lt;/span&gt; &lt;span class="n"&gt;div&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HtmlDivision&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getByXPath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;//div&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;div&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;asXml&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、代理服务器的配置，代理的配置很简单，只需要配置好地址，端口，用户名与密码即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;new&lt;/span&gt; &lt;span class="n"&gt;WebClient&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BrowserVersion&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;CHROME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;http://127.0.0.1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8087&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;DefaultCredentialsProvider&lt;/span&gt; &lt;span class="n"&gt;credentialsProvider&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;DefaultCredentialsProvider&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="n"&gt;webClient&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getCredentialsProvider&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="n"&gt;credentialsProvider&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addCredentials&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;username&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;password&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、模拟表单的提交&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//获取表单  &lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlForm&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getFormByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//获取提交按扭&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlSubmitInput&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInputByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;submit&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//一会得输入的&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlTextInput&lt;/span&gt; &lt;span class="n"&gt;textField&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getInputByName&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;userid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;textField&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setValueAttribute&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//点击提交表单&lt;/span&gt;
&lt;span class="k"&gt;final&lt;/span&gt; &lt;span class="n"&gt;HtmlPage&lt;/span&gt; &lt;span class="n"&gt;page&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;button&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;API的使用就介绍到这，网络爬虫中主要目的就是获取页中所有的链接，代码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nx"&gt;java.util.List&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;HtmlAnchor&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;achList&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nx"&gt;page.getAnchors&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;HtmlAnchor&lt;/span&gt; &lt;span class="nx"&gt;ach&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nx"&gt;achList&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
&lt;span class="nx"&gt;System.out.println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;ach.getHrefAttribute&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;最后来个例子，HtmlUnit模拟浏览器登录&lt;code&gt;小米网站帐户&lt;/code&gt;，程运运行的截图如下，&lt;code&gt;红色方框&lt;/code&gt;表示登录成功跳转到下一个页面出现的帐号：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/fetchPage.html"&gt;
&lt;img alt="烟雨林博客"  src="http://www.yanyulin.info/pics/art/xiaomi.jpg" width=100%/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;本博文源代码下载:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href="https://github.com/zwjlpeng/Crawler_Self_Analysis" target="_blank"&gt;源码下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yunpan.cn/QURZedFfjFWfQ" target="_blank"&gt;Java皮肤库下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yunpan.cn/QURZ5UXwjnk6W" target="_blank"&gt;HtmlUnit源码包下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href="http://yunpan.cn/QURZ5uZLwFmM9" target="_blank"&gt;HtmlUnit的Jar包下载&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="搜索引擎"></category></entry><entry><title>Linux基础教程视频版(很详细)</title><link href="http://www.yanyulin.info/pages/2013/11/vlinux2.html" rel="alternate"></link><updated>2013-11-26T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-26:pages/2013/11/vlinux2.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Linux基础教程视频版(很详细)下载地址:&lt;a href="http://yunpan.cn/QUxBUTNhe7RF3" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如果觉的不错，请多多分享&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Linux基础教程视频版(很详细)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第1章 了解编程语言-C语言简介&lt;/p&gt;
&lt;p&gt;第2章 Linux下C程序开发环境&lt;/p&gt;
&lt;p&gt;第3章 Linux基础&lt;/p&gt;
&lt;p&gt;第3章 Linux技术实验&lt;/p&gt;
&lt;p&gt;第3章 Shell基础&lt;/p&gt;
&lt;p&gt;第3章 Shell基础实验&lt;/p&gt;
&lt;p&gt;第4章 VI编辑器的实验&lt;/p&gt;
&lt;p&gt;第4章 VI编辑器的使用&lt;/p&gt;
&lt;p&gt;第5章 基本数据类型&lt;/p&gt;
&lt;p&gt;第5章 基本数据类型实验&lt;/p&gt;
&lt;p&gt;第6章 顺序程序设计实验&lt;/p&gt;
&lt;p&gt;第7章 选择程序设计&lt;/p&gt;
&lt;p&gt;第7章 选择程序设计实验&lt;/p&gt;
&lt;p&gt;第8章 循环结构程序设计&lt;/p&gt;
&lt;p&gt;第8章 循环结构程序设计实验&lt;/p&gt;
&lt;p&gt;第9章 数组&lt;/p&gt;
&lt;p&gt;第9章 数组及字符串实验&lt;/p&gt;
&lt;p&gt;第10章 模块化设计与函数&lt;/p&gt;
&lt;p&gt;第11章 预处理命令&lt;/p&gt;
&lt;p&gt;第12章 指针的用法&lt;/p&gt;
&lt;p&gt;第12章 指针的用法实验&lt;/p&gt;
&lt;p&gt;第13章 结构体与共同体&lt;/p&gt;
&lt;p&gt;第13章 结构体与共同体实验&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="Linux视频"></category></entry><entry><title>pelican搭建属于自已的博客</title><link href="http://www.yanyulin.info/pages/2013/11/pelican.html" rel="alternate"></link><updated>2013-11-24T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-24:pages/2013/11/pelican.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;一直都想搭建一个属于自已的博客，无耐总是抽不出时间，9月份完工作，10月份却又有搞不完的事，一拖再拖，前不久才将自已的博客搭建完成&lt;/p&gt;
&lt;p&gt;搭建博客工具的选择：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;WordPress&lt;/code&gt;、&lt;code&gt;Zblog&lt;/code&gt;、各种&lt;code&gt;cms&lt;/code&gt;,功能都很强大，各种插件，各种牛X，各种方便，但在我看来，也正是因为功能的太过强大，显得太笨重，修改起来太过麻烦，更可耻的是还需要数据库的支持，我这样的叼丝学生估计还负担不起，而国外提供免费数据库的空间绝大多数都不太稳定，国内空间别提了，各种泪&lt;/p&gt;
&lt;p&gt;静态博客生成器:&lt;code&gt;Jeklly&lt;/code&gt;非常棒，基于&lt;code&gt;octopress&lt;/code&gt;也相当的不错，可惜都是基于ruby语言的，对ruby语言压根就不了解，最终选择了基于&lt;code&gt;python&lt;/code&gt;的&lt;code&gt;pelican&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pelican&lt;/code&gt;搭建博客需要了解的名词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Github&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;python&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pelican&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Jinja2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;markdown&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sitemap&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最初是在Linux下搭建博客，正在捉急的进行到一半途中，linux系统让我弄的崩溃了，最后是在Windows下搭建完成，不过linux下是类似的，因为搭建过程是在Git Bash中完成，Git Bash中的命令就是仿unix的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;前提了解github的使用，可以看看我写的Github相关文章&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1、&lt;a href="http://www.yanyulin.info/pages/2013/11/github.html"&gt;Github简明教程(入门篇)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html"&gt;Github上如何给别人贡献代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;步骤一：下载相关的软件，&lt;code&gt;pelican&lt;/code&gt;是基于&lt;code&gt;python&lt;/code&gt;的，因此&lt;code&gt;python&lt;/code&gt;是不可少的，与&lt;code&gt;github&lt;/code&gt;进行连接
&lt;code&gt;git&lt;/code&gt;工具也是不可少的，另外还得下载的三个工具是&lt;code&gt;python&lt;/code&gt;的&lt;code&gt;pip&lt;/code&gt;工具以及&lt;code&gt;markdownpad&lt;/code&gt;编辑器还有&lt;code&gt;Windows&lt;/code&gt;下的&lt;code&gt;make&lt;/code&gt;工具，如果是在linux下，此处工作相当简单，相关软件的下载链接，请查看我个人博客的原始博文&lt;/p&gt;
&lt;p&gt;1、&lt;a href="http://yunpan.cn/QUF66GnJ7WU7W" target="_blank"&gt;python3下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2、&lt;a href="http://yunpan.cn/QUF6BFpTcgeLc" target="_blank"&gt;git下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3、&lt;a href="http://yunpan.cn/QUF66RuY8ziq5" target="_blank"&gt;pip下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;4、&lt;a href="http://yunpan.cn/QUF6BpkxgdpLb" target="_blank"&gt;windows下make下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、&lt;a href="http://yunpan.cn/QUF66w7tQLcQd" target="_blank"&gt;markdown下载&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;&lt;code&gt;pip&lt;/code&gt;工具的安装&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;python3&lt;/code&gt;下安装pip&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//已安装python3&lt;/span&gt;
&lt;span class="c1"&gt;//下载easy_install的tar.gz的源码&lt;/span&gt;
&lt;span class="c1"&gt;//然后解压&lt;/span&gt;
&lt;span class="nl"&gt;C:&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;python32&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;setup&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt;
&lt;span class="nl"&gt;C:&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;python32&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;easy_install&lt;/span&gt; &lt;span class="n"&gt;pip&lt;/span&gt;
&lt;span class="c1"&gt;//把C:\python32\Scripts这个路径也加到PATH里&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;strong&gt;&lt;code&gt;window&lt;/code&gt;下make工具的安装&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//将下载的`make.exe`文件添加到path路径中&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;基他软件直接点击exe安装即可&lt;/p&gt;
&lt;p&gt;步骤二:安装&lt;code&gt;pelican&lt;/code&gt;,安装了&lt;code&gt;Git&lt;/code&gt;后，打开&lt;code&gt;Git Bash&lt;/code&gt;输入以下命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤三:创建博客，在Git Bash命令行窗口中输入如下命令&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;blog&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;quickstart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;第三条命令执行后会提示你输入博客的配置项，除了&lt;code&gt;SITENAME&lt;/code&gt;配置项外，其他均可选择默认，在后绪的开发过程中，可以在&lt;code&gt;pelicanconf.py&lt;/code&gt;中进行修改，执行完上述命令后，即可生成一个基本的博客架构，如下图所示&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;blog&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;content&lt;/span&gt;  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;存放你要写的博客&lt;/span&gt;
&lt;span class="err"&gt;│&lt;/span&gt;   &lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pages&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;  &lt;span class="err"&gt;#单纯的页面&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;生成的输出文件&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;develop_server&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;方便开启测试服务器&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;Makefile&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;方便管理博客的&lt;/span&gt;&lt;span class="n"&gt;Makefile&lt;/span&gt;
&lt;span class="err"&gt;├──&lt;/span&gt; &lt;span class="n"&gt;pelicanconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;主配置文件&lt;/span&gt;
&lt;span class="err"&gt;└──&lt;/span&gt; &lt;span class="n"&gt;publishconf&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;   &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;主发布文件，可删除&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;用&lt;code&gt;markdown&lt;/code&gt;写博文，要记住的是博文必须放在&lt;code&gt;content&lt;/code&gt;目录下，&lt;code&gt;pelican&lt;/code&gt;会将&lt;code&gt;content&lt;/code&gt;目录下的所有文章输出到&lt;code&gt;output&lt;/code&gt;目录下，然后放到服务器上，&lt;code&gt;markdown&lt;/code&gt;写博文的预览图如下：&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/pelican.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/markdown.jpg"   alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;写完后执行如下命令，即可在本机上预览博客,预览地址为&lt;code&gt;http://localhost:8000/&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;publish&lt;/span&gt;
&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;serve&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤四:将博客部署到&lt;code&gt;github&lt;/code&gt;上，博客最终是要放到互联网上供人看的，此处就是将博客上传上去，在上传之前，要确保&lt;code&gt;github&lt;/code&gt;上有一个仓库命令规是&lt;code&gt;username.github.io&lt;/code&gt;,其中&lt;code&gt;username&lt;/code&gt;为你的&lt;code&gt;github&lt;/code&gt;帐号&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//切换到输出目录&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;output&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="nl"&gt;https:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/username.github.io.git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完上面命令后即将博客上传至&lt;code&gt;github&lt;/code&gt;服务器上，打开浏览器输入&lt;code&gt;http://username.github.io&lt;/code&gt;即可访问，如果你觉的上面的命令过于复杂，你也直接可以将其添加到Makefile中&lt;/p&gt;
&lt;p&gt;步骤五:给博客挑选主题，博客的初始主题当然是不好看，你可以自已下载&lt;code&gt;pelican&lt;/code&gt;相关的主题，然后安装，当然你也可以像我一样更改主题模板，创建属于自已的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/getpelican/pelican-themes.git&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt;
&lt;span class="n"&gt;pelican&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;themes&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="n"&gt;bootstrap2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;在&lt;code&gt;pelicanconf.py&lt;/code&gt;中添加&lt;code&gt;THEME = 'bootstrap2'&lt;/code&gt;即可，然后重新&lt;code&gt;make publish&lt;/code&gt;即可&lt;/p&gt;
&lt;p&gt;步骤六：给博客加上评论系统，在Disqus上申请一个站点，记牢Shortname。 在pelicanconf.py添加如下命令，当然你也可以选择国内的多说或者其他的&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DISQUS_SITENAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Shortname&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤七：给自已的博客加上谷歌分析，可选，去去Google Analytics申请账号，记下跟踪ID。 在pelicanconf.py添加&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;GOOGLE_ANALYTICS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="err"&gt;跟踪&lt;/span&gt;&lt;span class="n"&gt;ID&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;步骤入：独立域名与DNS解析&lt;/p&gt;
&lt;p&gt;在Godaddy上用支付宝花购买为期一年的顶级域名，并去修改Nameservers为这两个地址：&lt;code&gt;f1g1ns1.dnspod.net&lt;/code&gt;、&lt;code&gt;f1g1ns2.dnspod.net&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;在Dnspod上添加新域名，并申请一条A记录指向Github Pages的ip:&lt;code&gt;207.97.227.245&lt;/code&gt;；&lt;/p&gt;
&lt;p&gt;在Pelican主目录新建CNAME文件，添上刚刚申请的域名，如我的&lt;code&gt;www.yanyulin.info&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Pelican官方文档: http://docs.getpelican.com/en/3.2&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>2014年暴风笔试试卷A</title><link href="http://www.yanyulin.info/pages/2013/11/baofeng_2014_A.html" rel="alternate"></link><updated>2013-11-23T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-23:pages/2013/11/baofeng_2014_A.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;如有错误，或更加精简的方法，请留言，我会更正，以方便更多的人
暴风影音2014年A郑，据说可以解决&lt;code&gt;户口&lt;/code&gt;
注:以下如无特殊说明，均假设计算机编程环境为&lt;code&gt;intel x86&lt;/code&gt;的&lt;code&gt;32位CPU&lt;/code&gt;,编译器为VS,编程语言首选C语言，也可以使用自已熟悉的编程语言。&lt;/p&gt;
&lt;p&gt;1、已知一个二叉树的先序遍历和中序遍历得到的序列为&lt;code&gt;ABDEGCFH&lt;/code&gt;和&lt;code&gt;DBGEAFHC&lt;/code&gt;，请:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1:根据先序遍历和中序遍历计算出该二叉树的结构图&lt;/p&gt;
&lt;p&gt;2:根据1的结果，计算该二叉树的后序遍历后序遍历结果&lt;/p&gt;
&lt;p&gt;3:完成后序遍历代码（不得使用迭代函数）&lt;/p&gt;
&lt;p&gt;答案如下&lt;/p&gt;
&lt;p&gt;1:结构图如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/baofeng_2014_A.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/daan/bd1.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2:后序遍历结果是&lt;code&gt;DGEBHFCA&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;3:代码如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;postorder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BinarySearchTree&lt;/span&gt; &lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;BinarySearchTree&lt;/span&gt; &lt;span class="n"&gt;preNode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;stack&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;BinarySearchTrees&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;preNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;T&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;empty&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;currNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;top&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;preNode&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;preNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;currNode&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;preNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pLeft&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;preNode&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_pRight&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;cout&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;m_nValue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;preNode&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;currNode&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2、将内存中一张宽为X，高为Y的RGB32格式的图片向右旋转90度。源地址BYTE &lt;em&gt;pSrc为指向图片的首地址，目标地址BYTE &lt;/em&gt;pDst为输出的目标缓冲区，备注：RGB32是一种图像格式，它用4个连续BYTE来表示一个像素，图片的存储方式为一行一样连续存：
&lt;table border="1px"&gt;
&lt;tr&gt;
&lt;td&gt;
A
&lt;/td&gt;
&lt;td&gt;
B
&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
C
&lt;/td&gt;
&lt;td&gt;
D
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
如上表为宽度为2且高度为2的图像，共4个像素，在内存中存储为&lt;code&gt;A[4]B[4]C[4]D[4]&lt;/code&gt;,&lt;code&gt;void rotate(BYTE *pSrc, BYTE *pDest, int X, int Y){ }&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解：此问题先考虑每个像素占一个字节的情况，然后再将问题扩展为占四个字节的情况。假设现在有8个像素，宽度为4高度为2，即&lt;/p&gt;
&lt;p&gt;ABCD&lt;/p&gt;
&lt;p&gt;EFGH&lt;/p&gt;
&lt;p&gt;旋转之后变为宽度为2，高度为4,即&lt;/p&gt;
&lt;p&gt;EA&lt;/p&gt;
&lt;p&gt;FB&lt;/p&gt;
&lt;p&gt;GC&lt;/p&gt;
&lt;p&gt;HD&lt;/p&gt;
&lt;p&gt;A[0][0]-&amp;gt;A[0][1]&lt;/p&gt;
&lt;p&gt;B[0][1]-&amp;gt;B[1][1]&lt;/p&gt;
&lt;p&gt;C[0][2]-&amp;gt;C[2][1]&lt;/p&gt;
&lt;p&gt;D[0][3]-&amp;gt;D[3][1]&lt;/p&gt;
&lt;p&gt;E[1][0]-&amp;gt;E[0][0]&lt;/p&gt;
&lt;p&gt;F[1][1]-&amp;gt;F[0][1]&lt;/p&gt;
&lt;p&gt;G[1][2]-&amp;gt;G[0][2]&lt;/p&gt;
&lt;p&gt;H[1][3]-&amp;gt;H[0][3]&lt;/p&gt;
&lt;p&gt;第0行的变为了第&lt;code&gt;(x-1)&lt;/code&gt;列，其中原矩阵中的列号与旋转矩阵的行号相同，第&lt;code&gt;（x-1）&lt;/code&gt;行变换为了第0行，其中原矩阵的列号与旋转矩阵的行号相同这里用i表示行，j表示列，则旋转后的&lt;code&gt;pDest[j][x-i-1] = pSrc[i][j]&lt;/code&gt;，然后将其扩展为4字节问题，即赋值时要一次性复制4字节。代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;typedef&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;BYTE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//4字节&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;rotate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;BYTE&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pDest&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;dpos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;spos&lt;/span&gt;  &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//每次复制4个字节&lt;/span&gt;
                &lt;span class="n"&gt;pDest&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;dpos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;pSrc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;spos&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3、给定字符串A和B，输出A和B中第一个最长公共子串，比如A="wepiabc"，B="pabcni"则输出“abc”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define MAXLEN 50&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;LCS&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[][&lt;/span&gt;&lt;span class="n"&gt;MAXLEN&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len_a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;len_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;len_a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;len_b&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      
    &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;len_b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;
                    &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="p"&gt;{&lt;/span&gt;
                    &lt;span class="n"&gt;max&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                    &lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;sub&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;pos&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;4、 TCP建立连接需要几次握手过程？为什么会采用这么多次握手，请简述过程。若最后一次握手失败，会怎样处理?&lt;/p&gt;
&lt;p&gt;解：TCP建立连接需要3次握手,过程如下图所示，第三次握手失败，服务器端处于SYN_RCVD状态，服务器端发送复位报文请求建立连接。&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/baofeng_2014_A.html"&gt;
&lt;img src="http://www.yanyulin.info/pics/daan/bd2.jpg"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;5、ClassA是一个类，那么语句ClassA a, *b[2], c[3], &amp;amp;d = a;执行时调用到ClassA的构造函数次数为&lt;/p&gt;
&lt;p&gt;解:4次&lt;/p&gt;
&lt;p&gt;6、32位系统中&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;&lt;span class="c1"&gt;//4字节&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//4字节&lt;/span&gt;
    &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//4字节&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="n"&gt;sT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;请问sizeof(sT)=?多少&lt;/p&gt;
&lt;p&gt;解:12&lt;/p&gt;
&lt;p&gt;7、甲和乙进行打靶比赛，各打两发子弹，中靶数量最多的人获胜，甲每发子弹中弹的概率是60%，而乙每发子弹中靶的概率是30%，则比赛中乙战胜甲的可能性(&lt;code&gt;C&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;&lt;code&gt;A&lt;/code&gt; 小于5%    &lt;code&gt;B&lt;/code&gt; 在5%~12%之间  &lt;code&gt;C&lt;/code&gt; 在10%~15%之间    &lt;code&gt;D&lt;/code&gt; 大于15%&lt;/p&gt;
&lt;p&gt;8、请回答下列程序执行后的输出结果&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;this is a string!&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解:因为B是野指针，会导致运行时错误。&lt;/p&gt;
&lt;p&gt;9、分别指出下列操作系统是哪一种类型？（单用户单任务/单用户多任务/多用户单任务/多用户多任务）&lt;/p&gt;
&lt;p&gt;DOS、Windows 7、Windows 2003、Linux、Unix&lt;/p&gt;
&lt;p&gt;&lt;code&gt;DOS&lt;/code&gt;：单用户单任务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Windows 7&lt;/code&gt;：多用户多任务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Linux、Unix&lt;/code&gt;：多用户多任务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Windows 2003(Windows Server 2003)&lt;/code&gt;：多用户多任务&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Windows XP&lt;/code&gt;及以前&lt;code&gt;Windows&lt;/code&gt;版本：单用户多任务&lt;/p&gt;</summary><category term="暴风笔试题"></category></entry><entry><title>C语言深度解剖(含金量高)</title><link href="http://www.yanyulin.info/pages/2013/11/deepc.html" rel="alternate"></link><updated>2013-11-23T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-23:pages/2013/11/deepc.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;C语言深度解剖(编程的50个细节)&lt;/code&gt;这本书不太适合C语言刚入门的初学者，书中讲解了每一个关键字背后的秘密，&lt;code&gt;"十鸟在林，不如一鸟在手"&lt;/code&gt;真正把C语言整明白了再学其他语言也很简单，如果C语言都没学明白，别的语言学的再好，也不过是花架子，因为你并不理解底层是怎么个回事，本书我个人强烈推荐。&lt;/p&gt;
&lt;p&gt;电子书PDF格式下载:&lt;a href="http://yunpan.cn/QUmRc4AqnmIBE" target="_blank" title="《Effective C++》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一章 关键字&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 最宽恒大量的关键字auto&lt;/p&gt;
&lt;p&gt;1.2 最快的关键字register&lt;/p&gt;
&lt;p&gt;1.3 最不实名的关键字static&lt;/p&gt;
&lt;p&gt;1.4 基本数据类型&lt;/p&gt;
&lt;p&gt;1.5 最冤枉的关键字sizeof&lt;/p&gt;
&lt;p&gt;1.6 if/else组合&lt;/p&gt;
&lt;p&gt;1.7 switch/case组合&lt;/p&gt;
&lt;p&gt;1.8 do/while/for关键字&lt;/p&gt;
&lt;p&gt;1.9 goto关键字&lt;/p&gt;
&lt;p&gt;1.10 void关键字&lt;/p&gt;
&lt;p&gt;1.11 const关键字也被该被替换为readonly&lt;/p&gt;
&lt;p&gt;1.12 最易变的关键字volatile&lt;/p&gt;
&lt;p&gt;1.13 最会带帽子的关键字extern&lt;/p&gt;
&lt;p&gt;1.14 struct关键字&lt;/p&gt;
&lt;p&gt;1.15 union关键字&lt;/p&gt;
&lt;p&gt;1.16 enum关键字&lt;/p&gt;
&lt;p&gt;1.17 typedef关键字&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第二章 符号&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1 注释符号&lt;/p&gt;
&lt;p&gt;2.2 连接符与转义符&lt;/p&gt;
&lt;p&gt;2.3 单引号、双引号&lt;/p&gt;
&lt;p&gt;2.4 逻辑运算符&lt;/p&gt;
&lt;p&gt;2.5 位运算符&lt;/p&gt;
&lt;p&gt;2.6 花括号&lt;/p&gt;
&lt;p&gt;2.7 ++/--操作符&lt;/p&gt;
&lt;p&gt;2.8 2/(-2)的值是多少?&lt;/p&gt;
&lt;p&gt;2.9 运算符的优化级&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第三章 预处理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1 宏定义&lt;/p&gt;
&lt;p&gt;3.2 条件编译&lt;/p&gt;
&lt;p&gt;3.3 文件包含&lt;/p&gt;
&lt;p&gt;3.4 #error的处理&lt;/p&gt;
&lt;p&gt;3.5 #line预处理&lt;/p&gt;
&lt;p&gt;3.6 #pragma预处理&lt;/p&gt;
&lt;p&gt;3.7 #运算符&lt;/p&gt;
&lt;p&gt;3.8 ##预算符&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第四章 指针与数组&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.1 指针&lt;/p&gt;
&lt;p&gt;4.2 数组&lt;/p&gt;
&lt;p&gt;4.3 指针与数组之间的恩恩怨怨&lt;/p&gt;
&lt;p&gt;4.4 指针数组与数组指针&lt;/p&gt;
&lt;p&gt;4.5 多维数组与多级指针&lt;/p&gt;
&lt;p&gt;4.6 数组参数与指针参数&lt;/p&gt;
&lt;p&gt;4.7 函数指针&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第五章 内存管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5.1 什么是野指针&lt;/p&gt;
&lt;p&gt;5.2 栈堆静态区&lt;/p&gt;
&lt;p&gt;5.3 常见内存错误与对策&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第六章 函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.1 函数的由来与好处&lt;/p&gt;
&lt;p&gt;6.2 编码风格&lt;/p&gt;
&lt;p&gt;6.3 函数设计的一般原则与技巧&lt;/p&gt;
&lt;p&gt;6.4 函数递归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第七章 文件结构&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7.1 文件内部的一般规则&lt;/p&gt;
&lt;p&gt;7.2 文件命名的规则&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="C秘籍"></category></entry><entry><title>Effective C++(编程的50个细节)</title><link href="http://www.yanyulin.info/pages/2013/11/effective.html" rel="alternate"></link><updated>2013-11-23T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-23:pages/2013/11/effective.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Effective C++(编程的50个细节)&lt;/code&gt;着重讲解了编写C++程序应该注意的50个细节问题，书中的每一条准则描述了一个编写出更好的C++的方式，每一个条款的背后都有具体范例支持，书中讲的都是C++的编程技巧和注意事项，很多都是自己平时不太注意但又很重要的内容，绝对经典，作者Scott Meyers是全世界最知名的C++软件开发专家之一。&lt;/p&gt;
&lt;p&gt;电子书PDF格式下载:&lt;a href="http://yunpan.cn/QUdi9Cq7G6RAZ" target="_blank" title="《Effective C++》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;1、从C转向C++&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款1:尽量用CONST和INLINE而不用#DEFINE&lt;/p&gt;
&lt;p&gt;条款2:尽量用&lt;IOSTREAM&gt;而不用&lt;STDIO.H&gt;&lt;/p&gt;
&lt;p&gt;条款3:尽量用NEW和DELETE而不用MALLOC和FREE&lt;/p&gt;
&lt;p&gt;条款4:尽量使用C++风格的注释&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;2、内存管理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款5:对应的NEW和DELETE要采用相同的形式&lt;/p&gt;
&lt;p&gt;条款6:析构函数里对指针成员调用DELETE&lt;/p&gt;
&lt;p&gt;条款7:预先准备好内存不够的情况&lt;/p&gt;
&lt;p&gt;条款8:写OPERATOR NEW与OPERATOR DELETE要遵循常规&lt;/p&gt;
&lt;p&gt;条款9:避免隐藏标准形式的NEW&lt;/p&gt;
&lt;p&gt;条款10:如果写了OPERATOR NEW就要同时写OPERATOR DELETE&lt;/p&gt;
&lt;p&gt;条款11:为需要动态分配内存的类声明一个拷贝构造函数和一个赋值函数&lt;/p&gt;
&lt;p&gt;条款12:尽量使用初始化而不要在构造函数里赋值&lt;/p&gt;
&lt;p&gt;条款13:初始化列表中成员列出顺序和它们在类中的声明顺序相同&lt;/p&gt;
&lt;p&gt;条款14:确定基类有虚析构函数&lt;/p&gt;
&lt;p&gt;条款15:让OPERATOR=返回*THIS的引用&lt;/p&gt;
&lt;p&gt;条款16:在OPERATOR=中对所有数据成员赋值&lt;/p&gt;
&lt;p&gt;条款17:在OPERATOR=中检查给自已赋值的情况&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3、类和函数:设计与声明&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款18:争取使类的接口完整并且最小&lt;/p&gt;
&lt;p&gt;条款19:分清成员函数，非成员函数和友元函数&lt;/p&gt;
&lt;p&gt;条款20:避免PUBLIC接口出现数据成员&lt;/p&gt;
&lt;p&gt;条款21:尽可能使用CONST&lt;/p&gt;
&lt;p&gt;条款22:尽量用传引用而不用传值&lt;/p&gt;
&lt;p&gt;条款23:必须返回一个对象时不要试图返回一个引用&lt;/p&gt;
&lt;p&gt;条款24:在函数重载与设定参数默认值间慎重选择&lt;/p&gt;
&lt;p&gt;条款25:避免对指针与数字类型的重载&lt;/p&gt;
&lt;p&gt;条款26:当心潜在的二义性&lt;/p&gt;
&lt;p&gt;条款27:如果不想使用隐式生成的函数要显示的禁止它&lt;/p&gt;
&lt;p&gt;条款28:划分全局名字空间&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4、类和函数：实现&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款29:避免返回内部数据的句柄&lt;/p&gt;
&lt;p&gt;条款30:避免这样的成员函数，其返回值是指向成员的非CONST指针或引用&lt;/p&gt;
&lt;p&gt;条款31:千万不要返回局部对象的引用，也不要返回函数内部用NEW初始化的指针&lt;/p&gt;
&lt;p&gt;条款32:尽可能推迟变量的定义&lt;/p&gt;
&lt;p&gt;条款33:明智的使用INLINE&lt;/p&gt;
&lt;p&gt;条款34:将文件间的编译依赖性阡至最低&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;5、继承与面向对象设计&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款35:使公有继承体现是一个的函义&lt;/p&gt;
&lt;p&gt;条款36:区分接口继承与实现继承&lt;/p&gt;
&lt;p&gt;条款37:绝不要重新定义继承而来的非虚函数&lt;/p&gt;
&lt;p&gt;条款38:绝不要重新定义继承而来的缺省参数值&lt;/p&gt;
&lt;p&gt;条款39:避免向下转换继承层次&lt;/p&gt;
&lt;p&gt;条款40:通过分层来体现有一个和用...来实现&lt;/p&gt;
&lt;p&gt;条款41:区分继承和模板&lt;/p&gt;
&lt;p&gt;条款42:明智的使用私有继承&lt;/p&gt;
&lt;p&gt;条款43:明智的使用多继承&lt;/p&gt;
&lt;p&gt;条款44:说你想说的，理解你说的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;6、杂项&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;条款45:弄清C++在幕后为你所写、所调用的函数&lt;/p&gt;
&lt;p&gt;条款46:宁可编译与链接时出错，也不要运行时出错&lt;/p&gt;
&lt;p&gt;条款47:确保非局部静态对象在使用前被初始化&lt;/p&gt;
&lt;p&gt;条款48:重视编译器警告&lt;/p&gt;
&lt;p&gt;条款49:熟悉标准库&lt;/p&gt;
&lt;p&gt;条款50:提高对C++的认识&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="C++书库"></category></entry><entry><title>Github上如何给别人贡献代码</title><link href="http://www.yanyulin.info/pages/2013/11/githubM.html" rel="alternate"></link><updated>2013-11-22T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-22:pages/2013/11/githubM.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;本篇博文仅随前篇博文&lt;a href="http://www.yanyulin.info/pages/2013/11/github.html" title="Github简明教程(入门篇)"&gt;&lt;code&gt;Github&lt;/code&gt;简明教程(入门篇)&lt;/a&gt;，当然我的独立博客也是采用Github搭建，我所介绍的Github正是我搭建博客过程中一点一点学习的过程，如有错误，还请指出，同样大神们可以绕过。&lt;/p&gt;
&lt;p&gt;本篇重点介绍&lt;code&gt;Github&lt;/code&gt;上如何给别人贡献代码，通过这个过程，也可以知道如果一个项目托管到Github上，团队成员之间合作的流程，给别人贡献代码，特别是一些开源组织，是件光荣的事&lt;/p&gt;
&lt;p&gt;1、搜索你要贡献的代码仓库，在这里我创建了两个帐号，一个主帐号，里面有一个代码仓库mfjc，一个是将要贡献代码的帐号howard5888,搜索代码仓库如下图：
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github1.jpg"  alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;
2、按下回车后，即会出现搜索到的库，如下图所示
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github2.jpg" width="100%"  alt="烟雨林博客"/&gt;
&lt;/a&gt;
3、点击上图中的仓库链接，进入mfjc仓库，点击右边的fork,fork的含义就是创建mfjc项目的副本作为你自已的项目
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github3.jpg"  alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;
4、fork之后的图如下图所示，从下图可以看出mfjc已经处于自已的github帐号库中，同时也可以发现github还标明了该库的来源，因为只有标明了来源，后面你修改了文件才有提交的路径
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github3.jpg" alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;
5、修改或者增加仓库里的文件，可以选择在线修改，在线修改一般适合修改量较少，这里介绍的是采用Git工具，将代码仓库下载到本地，在本地修改之后再上传上去，相关命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="err"&gt;#创建&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;目录&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt; &lt;span class="err"&gt;#切换到&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="err"&gt;目录&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt; &lt;span class="err"&gt;#创建并初始化&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;&lt;span class="err"&gt;库&lt;/span&gt;
&lt;span class="cp"&gt;#增加远程git仓库&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/howard5888/mfjc.git&lt;/span&gt;
&lt;span class="cp"&gt;#将远程git库下载到本地&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;6、命令执行完后，可以看看从mfjc下载下来的文件，如下图所示
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github5.jpg"   alt="烟雨林博客" width="100%" height="30px"/&gt;
&lt;/a&gt;
7、假设我们修改了README.md文件，在这个文件里面增加了#test#，接下来要做的就是将修改后的代码库上传上去，命令如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#会将当前目录tmp下所有文件都增加到本地库中&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;
&lt;span class="cp"&gt;#提交更改&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;
&lt;span class="cp"&gt;#将库上传到github上&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;8、上传完后，再回到github网站上，可以看到README.md文件内容已更改
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github6.jpg"  alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;
9、最后就是将修改提交给主帐号的原作者，由它来决定是否合并你的修改，操作如下，点击Pull request后，跳转到下一个页面，在下一个页面上点击New pull Request
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github7.jpg"  alt="烟雨林博客"  width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;10、接下来的界面上显示了修改后的文件与原作者库里的文件有哪些地方不同
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github8.jpg"   alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;11、然后点击Click to create ....即可跳转到最后一个页面，在最后一个页面上写上自已的提交注释，点击Send Request即可
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github9.jpg"  alt="烟雨林博客"   width="100%"/&gt;
&lt;/a&gt;
12、主帐号里的源作者即可收到你的提交请求，如果觉的可以的话，就会将你的请求同主干合并&lt;/p&gt;
&lt;p&gt;13、估计还有很多人不知道如何与原作者的项目保持同步，&lt;strong&gt;如何保持与原作者同步&lt;/strong&gt;，原作者估计肯定是一个勤劳的码神，而且又有重多的贡献者，因此与原作者保持同步是很重要的，而且在同步的过程中，你会看到别人每次提交的更改，&lt;strong&gt;这也是Github最大的价值之一&lt;/strong&gt;，保持与原作者同步首先要做的就是重复第9步，之后会跳到如下页面&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github10.jpg"  alt="烟雨林博客"   width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;14、点击上图中的红色框里，跳转到下一个页面，在下一个页面中，你会看到项目中的每次更新操作，如下图所示：
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github11.jpg"  alt="烟雨林博客"    width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;15、点击绿色方框里的Create...，进入下一个页写，写上title以及comment,点击Send pull,即可跳转到下一个页面，在下一个页面中间处点击Merge request,即可进行同步
&lt;a href="http://www.yanyulin.info/pages/2013/11/githubM.html" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/2github12.jpg"  alt="烟雨林博客"    width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;下一篇将介绍如何利用Github搭建属于自已的博客&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.yanyulin.info" title="烟雨林个人博客"&gt;烟雨林个人博客&lt;/a&gt;&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>STL源码剖析(候捷译)</title><link href="http://www.yanyulin.info/pages/2013/11/stlOrigin.html" rel="alternate"></link><updated>2013-11-21T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-21:pages/2013/11/stlOrigin.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;STL源码剖析 PDF格式下载:&lt;a href="http://yunpan.cn/QUj5p6EIPZH9y" target="_blank" title="《STL源码剖析》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;STL源码剖析此书是一本不可多得的好书，大师的精典之作，大多数程序员只知道集合类非常好用，只需要向集合类中填加元素，不用担心空间的开设，以及空间的回收，也不用考虑集合类的效率，更重要的是集合类还给我们提供了各种各样的函数，但是知其所以然而不知其因为然，这样的程序员是不合格的，《STL源码剖析》很好的给我们讲解了集合类的底层实现，以及泛型算法。&lt;/p&gt;
&lt;p&gt;STL源码剖析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;第1章STL概论与版本简介&lt;/p&gt;
&lt;p&gt;第2章 空间配置器（allocator）&lt;/p&gt;
&lt;p&gt;第3章迭代器（iterators）概念与traits编程技法&lt;/p&gt;
&lt;p&gt;第4章 序列式容器（sequence containers）&lt;/p&gt;
&lt;p&gt;第5章 关联式容器（associattive containers）&lt;/p&gt;
&lt;p&gt;第6章 算法（algorithms）&lt;/p&gt;
&lt;p&gt;第7章 仿函数（functors，另名 函数对象function objects）&lt;/p&gt;
&lt;p&gt;第8章 配接器（adapters）&lt;/p&gt;
&lt;p&gt;附录A 参考书籍与推荐读物&lt;/p&gt;
&lt;p&gt;附录B 候捷网站（本书支持站点简介）&lt;/p&gt;
&lt;p&gt;附录C STLPort 的移植经验（by孟岩&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="C++书库"></category></entry><entry><title>Github简明教程(入门篇)</title><link href="http://www.yanyulin.info/pages/2013/11/github.html" rel="alternate"></link><updated>2013-11-20T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-20:pages/2013/11/github.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;Github作为一项目托管仓库，里面有着各种各样的高质量代码，本篇博客针对Git入门或者初学者，各位大神可以绕过，关于GitHub的强大之处可以自已百度谷歌去，在继续阅读本篇博客之前，如果还没有帐号的同学，先到github官网上申请一个帐号http://www.github.com&lt;/p&gt;
&lt;p&gt;1、首先登录自已的帐号，创建属于自已的代码库
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github1.jpg"  alt="烟雨林博客"  width="100%"/&gt;
&lt;/a&gt;
2、然后跳转下一个页面，填写&lt;code&gt;repository name&lt;/code&gt;,如：TEST，在&lt;code&gt;Add .gitgore&lt;/code&gt;一项根据你所使用语言选择，其他的默认，然后&lt;code&gt;creat repository&lt;/code&gt;
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github2.jpg"  alt="烟雨林博客"  width="100%"/&gt;
&lt;/a&gt;
做完上面的后，GitHub就生成了一个代码仓库，目前仓库中仅有三个文件，.gitingore/LICENSE/README.md,以及相应的远程仓库地址，这个地址可以使用git工具进行代码的下载与上传
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github3.jpg"   alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;3.你可以点击上图中Test后面的&lt;code&gt;+&lt;/code&gt;号新创建一个文件，或者直接选中页面中的一个文件对其进行修改以及删除，但是一般不采用这种方式，这种方式修改的效率太低，一般采用的方式均是通过git工具，将代码下载到
本地，在本地修改后，然后再上传到github托管的代码库中，例如如下（前提是已安装了git工具)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;init&lt;/span&gt;
&lt;span class="n"&gt;touch&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;md&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;commit&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt; 
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;remote&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="c1"&gt;//github.com/howard5888/TEST.git&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;pull&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;u&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;执行完上述命令后，再看看github里TEST仓库，就可以发现自已新增的文件test.md了
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github4.jpg"  alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;执行完上面的代码后，打开github的TEST仓库，可以看到TEST仓库里多了一个test.md文件，上面命令中howard5888实际输入时要替换成自已的帐户号，在执行上面的命令上传文件时，会要求用户输入自已的用户名与秘密，在输入的过程中，是不回显的&lt;/p&gt;
&lt;p&gt;相关命令解释如下:&lt;/p&gt;
&lt;p&gt;1、mkdir tmp 在当前目录下创建一个新的目录 tmp&lt;/p&gt;
&lt;p&gt;2、cd tmp 切换到tmp目录下&lt;/p&gt;
&lt;p&gt;3、git init tmp目录作为一个本地仓库，初始库git库&lt;/p&gt;
&lt;p&gt;4、touch test.md 在当前目录下创建了文件 test.md&lt;/p&gt;
&lt;p&gt;5、git add test.md 将test.md文件增加到本地git库中&lt;/p&gt;
&lt;p&gt;6、git commit -am 'commit' 提交，让上条增加文件命令生效&lt;/p&gt;
&lt;p&gt;7、git remote add 向本地仓库中填加远程仓库地址，远程仓库地址别名是origin&lt;/p&gt;
&lt;p&gt;8、git pull origin master 将orgin所代表的远程仓库地址里的master主干下载到本地仓库，即上传之 前先进行一次同步&lt;/p&gt;
&lt;p&gt;9、git push -u origin master将本地仓库上传到origin所代表的远程仓库的master分支上&lt;/p&gt;
&lt;p&gt;知道了在Github上如何创建仓库，可能还有很多人不知道如何去删除一个仓库，Github上删除仓库也是很容易的，就是有点难找，以删除TEST仓库为例，点击仓库右边的setting
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github5.jpg"  alt="烟雨林博客"   width="100%"/&gt;
&lt;/a&gt;
跳转进入下一个页面，在页面最下方，就有如下图所示的删除铵钮
&lt;a href="http://www.yanyulin.info" target="_blank"&gt;
&lt;img src="http://www.yanyulin.info/pics/tools/github6.jpg"  alt="烟雨林博客" width="100%"/&gt;
&lt;/a&gt;&lt;/p&gt;</summary><category term="工具使用"></category></entry><entry><title>Linux中0号进程的创建分析</title><link href="http://www.yanyulin.info/pages/2013/11/linux0.html" rel="alternate"></link><updated>2013-11-19T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-19:pages/2013/11/linux0.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;&lt;code&gt;Linux&lt;/code&gt;中1号进程是由0号进程来创建的，因此必须要知道的是如何创建0号进程，由于在创建进程时，程序一直运行在内核态，而进程运行在用户态，因此创建0号进程涉及到特权级的变化，即从特权级0变到特权级3，&lt;code&gt;Linux&lt;/code&gt;是通过模拟中断返回来实现特权级的变化以及创建0号进程，通过将0号进程的代码段选择子以及程序计数器&lt;code&gt;EIP&lt;/code&gt;直接压入内核态堆栈，然后利用iret汇编指令中断返回跳转到0号进程运行。&lt;/p&gt;
&lt;p&gt;代码如下&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;move_to_user_mode&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="c1"&gt;//创建0号进程，开始进入0号进程，切换到特权级3运行&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;fork&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;init&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;&lt;span class="err"&gt;｝&lt;/span&gt;&lt;span class="c1"&gt;//创建1号进程&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;跟踪代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define move_to_user_mode() \&lt;/span&gt;
&lt;span class="cp"&gt;__asm__ (&amp;quot;movl %%esp,%%eax\n\t&amp;quot; \&lt;/span&gt;&lt;span class="c1"&gt;//将esp寄存器的内容存入eax中&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pushl $0x17&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//压入0号任务的数据段选择符&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pushl %%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//压入堆栈指针&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pushfl&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//压入标志寄存器&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pushl $0x0f&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//压入0号任务的代码段选择符&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;pushl $1f&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//压入EIP，即切换到0号任务后CPU运行的位置&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;iret&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//中断返回指令&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;1:&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;movl $0x17,%%eax&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//由于发生了切换，需要更改各段寄存器&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;movw %%ax,%%ds&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//更改段寄存器ds&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;movw %%ax,%%es&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//更改段寄存器es&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;movw %%ax,%%fs&lt;/span&gt;&lt;span class="se"&gt;\n\t&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//更改段寄存器fs&lt;/span&gt;
    &lt;span class="s"&gt;&amp;quot;movw %%ax,%%gs&amp;quot;&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//更改段寄存器gs&lt;/span&gt;
    &lt;span class="o"&gt;:::&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;ax&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;分析如下,注释已经很清楚：&lt;/p&gt;
&lt;p&gt;代码为嵌入汇编语句的C程序，&lt;code&gt;::”ax”&lt;/code&gt;表示的是输出为空，输入为空，在这个宏定义的执行过程中可以发生改变的是&lt;code&gt;ax&lt;/code&gt;寄存器，这属于GNU的gas语法，不作解释&lt;/p&gt;
&lt;p&gt;&lt;code&gt;0x17&lt;/code&gt;与&lt;code&gt;0x0f&lt;/code&gt;的真实意义，跟踪查看前先写成二进制形式&lt;code&gt;0x17=0000 0000 0001 0111&lt;/code&gt;,&lt;code&gt;0x0f=0000 0000 0000 1111&lt;/code&gt;;&lt;code&gt;0x17&lt;/code&gt;与&lt;code&gt;0x0f&lt;/code&gt;的后三们均是111，段选择子的后三位分别表示RPL以及TI,因此后三位即表示请示特权级为3，描述符在LDT中，故0x17与0x0f分别表示LDT中的第二项与第一项，即然是LDT表，在使用之前肯定要进行初始化，帮初始化代码肯定在move_to_user_mode之前，跟踪分析可以发现在&lt;code&gt;sched_init&lt;/code&gt;中，源码如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sched_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//desc_struct表示是描述符表类型typedef struct desc_struct{a,b}desc_table[256];&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;desc_struct&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;sigaction&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;panic&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Struct sigaction MUST be 16 bytes&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//这里开始是关键部分，gdt是全局描述符表的基地址&lt;/span&gt;
&lt;span class="c1"&gt;//FIRST_TSS_ENTRY与FIRST_LDT_ENTRY分别是4，5即全局描述符表中的第4项&lt;/span&gt;
&lt;span class="c1"&gt;//与第五项代表的是第一个任务，对其进行设置&lt;/span&gt;
&lt;span class="c1"&gt;//查看static union task_union init_task = {INIT_TASK,};可以看到INIT_TASK可以看到//INIT_TASK是个宏定义，即下面的注释&lt;/span&gt;
    &lt;span class="n"&gt;set_tss_desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FIRST_TSS_ENTRY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;tss&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
    &lt;span class="n"&gt;set_ldt_desc&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;gdt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FIRST_LDT_ENTRY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;init_task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ldt&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
&lt;span class="c1"&gt;//p指向GDT表中0号任务的下一个位置，即GDT表中第6项&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;gdt&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;FIRST_TSS_ENTRY&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//NR_TASKS是Linux 0.11中最多支持的进程数64个&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;NR_TASKS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//重复两次是因为每个进程对应一个LDT与一个TSS&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;-&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="c1"&gt;//将标志寄存器的NT位禁止&lt;/span&gt;
    &lt;span class="n"&gt;__asm__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pushfl ; andl $0xffffbfff,(%esp) ; popfl&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//#define ltr(n) __asm__(&amp;quot;ltr %%ax&amp;quot;::&amp;quot;a&amp;quot; (_TSS(n)))这是宏定义，很显然吧&lt;/span&gt;
&lt;span class="c1"&gt;//加载当前的任务寄存器与ldtr寄存器&lt;/span&gt;
    &lt;span class="n"&gt;ltr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//#define lldt(n) __asm__(&amp;quot;lldt %%ax&amp;quot;::&amp;quot;a&amp;quot; (_LDT(n)))&lt;/span&gt;
    &lt;span class="n"&gt;lldt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//定时器8253的初始化&lt;/span&gt;
    &lt;span class="n"&gt;outb_p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x36&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x43&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;      &lt;span class="cm"&gt;/* binary, mode 3, LSB/MSB, ch 0 */&lt;/span&gt;
&lt;span class="c1"&gt;//#define LATCH (1193180/HZ)，用此设置后时钟中断为每10ms一次&lt;/span&gt;
    &lt;span class="n"&gt;outb_p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LATCH&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt; &lt;span class="mh"&gt;0xff&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* LSB */&lt;/span&gt;
    &lt;span class="n"&gt;outb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LATCH&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mh"&gt;0x40&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="cm"&gt;/* MSB */&lt;/span&gt;
&lt;span class="c1"&gt;//后面是设置定时器的中断以及打开定时器&lt;/span&gt;
    &lt;span class="n"&gt;set_intr_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;timer_interrupt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;outb&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inb_p&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;~&lt;/span&gt;&lt;span class="mh"&gt;0x01&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x21&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;set_system_gate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;0x80&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;system_call&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//备注：&lt;/span&gt;
&lt;span class="c1"&gt;//定时器有三个锁存器，他们各有其则，锁存器0用于维护系统时钟，地址为0x40&lt;/span&gt;
&lt;span class="c1"&gt;//锁存器1用于周期性的向DMA发送数据信号，供存储器刷新用，地址为0x41&lt;/span&gt;
&lt;span class="c1"&gt;//锁存器2用于扬声器发出声音，地址为0x42,因此这里向0x40设定值&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;INIT_TASK&lt;/code&gt;宏定义，其实就是0号任务，看起来比较混乱，其实就是初始化task_struct结构体&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define INIT_TASK \&lt;/span&gt;
&lt;span class="c1"&gt;//0表示可运行的，15表示运行时间片，15表示运行优化级&lt;/span&gt;
&lt;span class="cm"&gt;/* state etc */&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="c1"&gt;//0表示没有信号，{{}}信号处理句柄设为0，0表示不屏蔽信号&lt;/span&gt;
&lt;span class="cm"&gt;/* signals */&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,{{},},&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="c1"&gt;//初始化信号设置&lt;/span&gt;
&lt;span class="c1"&gt;//将exit_code以及start_code,end_code,end_data,brk,start_stack均设为0&lt;/span&gt;
&lt;span class="cm"&gt;/* ec,brk... */&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="c1"&gt;//0表示进程号，-1表示父进程，后面三个0表示,pgrp,session,leader&lt;/span&gt;
&lt;span class="cm"&gt;/* pid etc.. */&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="c1"&gt;//设置进程的这6个成员unsigned short uid,euid,suid; unsigned short gid,egid,sgid;&lt;/span&gt;
&lt;span class="cm"&gt;/* uid etc */&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="c1"&gt;//设置进程的报警定时器以及5个时间函数&lt;/span&gt;
&lt;span class="cm"&gt;/* alarm */&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="c1"&gt;//表明该进程未使用协处理器&lt;/span&gt;
&lt;span class="cm"&gt;/* math */&lt;/span&gt;  &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="cm"&gt;/* fs info */&lt;/span&gt;   &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mo"&gt;0022&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
&lt;span class="cm"&gt;/* filp */&lt;/span&gt;  &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,},&lt;/span&gt; \
&lt;span class="c1"&gt;//这里就是很关键的一部份，表始初始化一个局部LDT表，即第一个任务的&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt; \
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; \
&lt;span class="cm"&gt;/* ldt */&lt;/span&gt;   &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;0x9f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xc0fa00&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; \
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mh"&gt;0x9f&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0xc0f200&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; \
    &lt;span class="p"&gt;},&lt;/span&gt; \
&lt;span class="c1"&gt;//第一个任务的任务状态表，跟踪struct tss_struct可以知道其详细意义&lt;/span&gt;
&lt;span class="cm"&gt;/*tss*/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;PAGE_SIZE&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;init_task&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;pg_dir&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;\
     &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
     &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;0x17&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
     &lt;span class="n"&gt;_LDT&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="mh"&gt;0x80000000&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; \
        &lt;span class="p"&gt;{}&lt;/span&gt; \
    &lt;span class="p"&gt;},&lt;/span&gt; \
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;到这了，也差不多了，额外的部份再看看第一个任务的LDT表与TSS表，由上面可知0号任务的LDT的代码段与数据段分别为{0x9f,0xc0fa00}与{0x9f,0xc0f200},根据保护模式下的定义，可以代码段的段基址为0，段限长为640KB,段属性为存在于内存中、特权级为3，代码段，同理分析得数据段的段基址为0，段限长为640KB,段属性为存在于内存中，特权级为3，数据段&lt;/p&gt;
&lt;p&gt;第一个任务的状态表，提一下吧&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;tss_struct&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;back_link&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;  &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;cr3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eip&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eflags&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;eax&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ecx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;edx&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ebx&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ebp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;esi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;edi&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;es&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;cs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ss&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ds&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;gs&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;     &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;ldt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;        &lt;span class="cm"&gt;/* 16 high bits zero */&lt;/span&gt;
    &lt;span class="kt"&gt;long&lt;/span&gt;    &lt;span class="n"&gt;trace_bitmap&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;   &lt;span class="cm"&gt;/* bits: trace 0, bitmap 16-31 */&lt;/span&gt;
    &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;i387_struct&lt;/span&gt; &lt;span class="n"&gt;i387&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;根据这个表可以看到的是任务0的内核态堆栈指针esp0=PAGE_SIZE+(long)&amp;amp;init_task,即第一个PCB块(task_struct)的顶部空间，PAGE_SIZE=4k,ss0=0x10,0x10查一下head.s你就会发现是gdt的第一个描述符，即内核代码段，后面还有几个是对数据段寄存器的定义以及ldt的定义&lt;/p&gt;</summary><category term="Linux汇总"></category></entry><entry><title>Assert(断言)实现机制剖析</title><link href="http://www.yanyulin.info/pages/2013/11/assert.html" rel="alternate"></link><updated>2013-11-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-18:pages/2013/11/assert.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;断言(assert)的作用是用来判断程序运行的正确性，确保程序运行的行为与我们理解的一致。其调用形式为assert(logic expression),如果逻辑表达式为假，则调用abort()终止程序的运行。&lt;/p&gt;
&lt;p&gt;查看MSDN帮助文档，可以得到assert的解释信息如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;ANSI&lt;/span&gt; &lt;span class="n"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;macro&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;typically&lt;/span&gt; &lt;span class="n"&gt;used&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;identify&lt;/span&gt; &lt;span class="n"&gt;logic&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt; &lt;span class="n"&gt;during&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;development&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;implementing&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;expression&lt;/span&gt; &lt;span class="n"&gt;argument&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="n"&gt;evaluate&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt; &lt;span class="nb"&gt;false&lt;/span&gt; &lt;span class="n"&gt;only&lt;/span&gt; &lt;span class="n"&gt;when&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;program&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; 
&lt;span class="n"&gt;operating&lt;/span&gt; &lt;span class="n"&gt;incorrectly&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;After&lt;/span&gt; &lt;span class="n"&gt;debugging&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;complete&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;assertion&lt;/span&gt; &lt;span class="n"&gt;checking&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;turned&lt;/span&gt; &lt;span class="n"&gt;off&lt;/span&gt; 
&lt;span class="n"&gt;without&lt;/span&gt; &lt;span class="n"&gt;modifying&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;source&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="n"&gt;by&lt;/span&gt; &lt;span class="n"&gt;defining&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt; &lt;span class="n"&gt;NDEBUG&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;NDEBUG&lt;/span&gt; &lt;span class="n"&gt;can&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; 
&lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;D&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="n"&gt;option&lt;/span&gt; &lt;span class="n"&gt;or&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt; &lt;span class="n"&gt;directive&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="n"&gt;If&lt;/span&gt; &lt;span class="n"&gt;NDEBUG&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;defined&lt;/span&gt; &lt;span class="n"&gt;with&lt;/span&gt; &lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;define&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
&lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;directive&lt;/span&gt; &lt;span class="n"&gt;must&lt;/span&gt; &lt;span class="n"&gt;appear&lt;/span&gt; &lt;span class="n"&gt;before&lt;/span&gt; &lt;span class="n"&gt;ASSERT&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;H&lt;/span&gt; &lt;span class="n"&gt;is&lt;/span&gt; &lt;span class="n"&gt;included&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;翻译过来大概意思就是assert是通过判断其参数的真假来标识程序的逻辑错误，调试结束后可以通过定义NDEBUG来关闭assert断言。&lt;/p&gt;
&lt;p&gt;查看include/assert.h头文件可以得到assert相关的宏写义如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef  NDEBUG&lt;/span&gt;
&lt;span class="cp"&gt;#define assert(exp)     ((void)0)&lt;/span&gt;
&lt;span class="cp"&gt;#else&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef  __cplusplus&lt;/span&gt;
&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;C&amp;quot;&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="n"&gt;_CRTIMP&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="kr"&gt;__cdecl&lt;/span&gt; &lt;span class="n"&gt;_assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="cp"&gt;#ifdef  __cplusplus&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="cp"&gt;#endif&lt;/span&gt;
&lt;span class="cp"&gt;#define assert(exp) (void)( (exp) || (_assert(#exp, __FILE__, __LINE__), 0) )&lt;/span&gt;
&lt;span class="cp"&gt;#endif  &lt;/span&gt;&lt;span class="cm"&gt;/* NDEBUG */&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#ifdef NDEBUG &lt;/span&gt;
&lt;span class="c1"&gt;//当调试完成后，如果定义了NDEBUG,关闭断言，优化生成的代码&lt;/span&gt;
&lt;span class="cp"&gt;#define assert(_Expression)  ((void)0)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;接下来的代码意思是定义如下函数（此函数用于打印出出错信息）：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;_wassert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_In_z_&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;wchar_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;_Message&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;_In_z_&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;wchar_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;_File&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
         &lt;span class="n"&gt;_In_&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="n"&gt;_Line&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;有兴趣的可以在assert.c中看到其实现，函数先要把错误的报告模式以及程序的类型(控制台程序还是GUI程序)决定assert是向标准错误输出打印还是以消息框形式出现，最后调用了abort（）函数来终止程序的运行。 对于extern “C” 有时间再解释，好了，到最后，终于看到了assert的宏定义了&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cp"&gt;#define assert(_Expression) &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)(&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!!&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_Expression&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_wassert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;_CRT_WIDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;#&lt;/span&gt;&lt;span class="n"&gt;_Expression&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                       &lt;span class="n"&gt;_CRT_WIDE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;__FILE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; 
                                       &lt;span class="n"&gt;__LINE__&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
                                       &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; 
      &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;asset断言后返回的结果始终是void(1)/void(0),原因就在于逗号表达式。
Assert断言在程序的作用&lt;/p&gt;
&lt;p&gt;Assert的例子：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;assert.h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;解释：因为tmp=0,tmp==1为false,故程序运行的时候传给assert宏的参数为false,因此调用的结果是先向stderr打印一条出错信息，然后通过调用 abort 来终止程序运行。如果改成tmp=1,则程序完全正常运行。 如里在程序中想关闭assert宏断言，可以如下defnie NDEBUG&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#define&lt;/span&gt; &lt;span class="nx"&gt;NDEBUG&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;assert.h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;assert&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nx"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;%d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你会发现即出tmp=0,也不会再出现断言信息，解释请看顶部&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;断言可以用来检查传给函数参数的合法性&lt;/li&gt;
&lt;li&gt;一个断言一般只用来检查一个条件，便于分析程序&lt;/li&gt;
&lt;li&gt;断言前后最好空一格[编程风格的问题，按你自已的喜好，适合自已就最好]&lt;/li&gt;
&lt;li&gt;断言只是用来检查程序的逻辑正确性，不能代替条件替换&lt;/li&gt;
&lt;li&gt;断言比printf语句这种形式的打印好使&lt;/li&gt;
&lt;li&gt;断言参数可以是函数调用,但是函数返回值要是真假,如assert(sort()),解释看上面源码分析&lt;/li&gt;
&lt;/ol&gt;</summary><category term="C++学习"></category></entry><entry><title>2014年华为校招机试(一)</title><link href="http://www.yanyulin.info/pages/2013/11/huawei_2014_1.html" rel="alternate"></link><updated>2013-11-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-18:pages/2013/11/huawei_2014_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;通过键盘输入一串小写字母(a~z)组成的字符串。请编写一个字符串过滤程序，若字符串中出现多个相同的字符，将非首次出现的字符过滤掉。
比如字符串“abacacde”过滤结果为“abcde”。
要求实现函数：&lt;code&gt;void stringFilter(const char *pInputStr, long lInputLen, char *pOutputStr)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pInputStr&lt;/code&gt;：输入字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lInputLen&lt;/code&gt;：  输入字符串长度       &lt;/p&gt;
&lt;p&gt;输出  &lt;/p&gt;
&lt;p&gt;&lt;code&gt;pOutputStr&lt;/code&gt;： 输出字符串，空间已经开辟好，与输入字符串等长；&lt;/p&gt;
&lt;p&gt;注意 只需要完成该函数功能算法，中间不需要有任何IO的输入输出&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;输入：“deefd”        输出：“def”&lt;/p&gt;
&lt;p&gt;输入：“afafafaf”     输出：“af”&lt;/p&gt;
&lt;p&gt;输入：“pppppppp”     输出：“p”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="bp"&gt;void&lt;/span&gt; &lt;span class="nx"&gt;stringFilter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;const&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;long&lt;/span&gt; &lt;span class="nx"&gt;lInputLen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nx"&gt;pOutputStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="nb"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;lInputLen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;find&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;pInputStr&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="nx"&gt;pInputStr&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;)==pInputStr+i)
            *pOutputStr++=pInputStr&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;通过键盘输入一串小写字母(a~z)组成的字符串。请编写一个字符串压缩程序，将字符串中连续出席的重复字母进行压缩，并输出压缩后的字符串。&lt;/p&gt;
&lt;p&gt;压缩规则：仅压缩连续重复出现的字符。比如字符串"abcbc"由于无连续重复字符，压缩后的字符串还是"abcbc"。&lt;/p&gt;
&lt;p&gt;压缩字段的格式为"字符重复的次数+字符"。例如：字符串"xxxyyyyyyz"压缩后就成为"3x6yz"。&lt;/p&gt;
&lt;p&gt;要求实现函数：&lt;code&gt;void stringZip(const char *pInputStr, long lInputLen, char *pOutputStr);&lt;/code&gt;
&lt;code&gt;pInputStr&lt;/code&gt;：输入字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;lInputLen&lt;/code&gt;：输入字符串长度&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pOutputStr&lt;/code&gt;： 输出字符串，空间已经开辟好，与输入字符串等长；&lt;/p&gt;
&lt;p&gt;注意只需要完成该函数功能算法，中间不需要有任何IO的输入输出&lt;/p&gt;
&lt;p&gt;示例 &lt;/p&gt;
&lt;p&gt;输入：“cccddecc”   输出：“3c2de2c”&lt;/p&gt;
&lt;p&gt;输入：“adef”     输出：“adef”&lt;/p&gt;
&lt;p&gt;输入：“pppppppp” 输出：“8p”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;stringZip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;lInputLen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOutputStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;lInputLen&lt;/span&gt;&lt;span class="p"&gt;;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;lInputLen&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOutputStr&lt;/span&gt;&lt;span class="o"&gt;++=&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;48&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOutputStr&lt;/span&gt;&lt;span class="o"&gt;++=&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pOutputStr&lt;/span&gt;&lt;span class="o"&gt;++=&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="华为笔试题"></category></entry><entry><title>深度探索C++对象模型</title><link href="http://www.yanyulin.info/pages/2013/11/objectModel.html" rel="alternate"></link><updated>2013-11-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-18:pages/2013/11/objectModel.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;电子书PDF格式下载:&lt;a href="http://yunpan.cn/QUK3HwIaW6tu2" target="_blank" title="《深度探索C++对象模型》"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第0章 导读（译者的话）&lt;/p&gt;
&lt;p&gt;第1章 关于对象（Object Lessons）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.1 C++对象模型（The C++ Object Model）&lt;/p&gt;
&lt;p&gt;1.2 关键词所带来的差异（A Keyword Distinction）&lt;/p&gt;
&lt;p&gt;1.3 对象的差异（An Object Distinction）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第2章 构造函数语意学（The Semantics of constructors）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;2.1 Default Constructor的建构操作&lt;/p&gt;
&lt;p&gt;2.2 Copy Constructor的建构操作&lt;/p&gt;
&lt;p&gt;2.3 程序转换语意学（Program Transformation Semantics）&lt;/p&gt;
&lt;p&gt;2.4 成员们的初始化队伍（Member Initialization List）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第3章 Data语意学（The Semantics of Data）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;3.1 Data Member的绑定（The Binding of a Data Member）&lt;/p&gt;
&lt;p&gt;3.2 Data Member的布局（Data Member Layout）&lt;/p&gt;
&lt;p&gt;3.3 Data Member的存取&lt;/p&gt;
&lt;p&gt;3.4 “继承”与Data Member&lt;/p&gt;
&lt;p&gt;3.5 对象成员的效率（Object Member Efficiency）&lt;/p&gt;
&lt;p&gt;3.6 指向Data Members的指针（Pointer to Data Members）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第4章 Function语意学（The Semantics of Function）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;4.1 Member的各种调用方式&lt;/p&gt;
&lt;p&gt;4.2 Virtual Member Functions（虚拟成员函数）&lt;/p&gt;
&lt;p&gt;4.3 函数的效能&lt;/p&gt;
&lt;p&gt;4.4 指向Member Functions的指针（Pointer-to-Member Functions）&lt;/p&gt;
&lt;p&gt;4.5 Inline Functions&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第5章 构造、解构、拷贝 语意学（Semantics of Construction，Destruction，and Copy）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;5.1 无继承情况下的对象构造&lt;/p&gt;
&lt;p&gt;5.2 继承体系下的对象构造&lt;/p&gt;
&lt;p&gt;5.3 对象复制语意学（Object Copy Semantics）&lt;/p&gt;
&lt;p&gt;5.4 对象的功能（Object Efficiency）&lt;/p&gt;
&lt;p&gt;5.5 解构语意学（Semantics of Destruction）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第6章 执行期语意学（Runting Semantics）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;6.1 对象的构造和解构（Object Construction and Destruction）&lt;/p&gt;
&lt;p&gt;6.2 new和delete运算符&lt;/p&gt;
&lt;p&gt;6.3 临时性对象（Temporary Objects）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第7章 站在对象模型的类端（On the Cusp of the Object Model）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;7.1 Template&lt;/p&gt;
&lt;p&gt;7.2 异常处理（Exception Handling）&lt;/p&gt;
&lt;p&gt;7.3 执行期类型识别（Runtime Type Identification，RTTI）&lt;/p&gt;
&lt;p&gt;7.4 效率有了，弹性呢？&lt;/p&gt;
&lt;/blockquote&gt;</summary><category term="C++书库"></category></entry><entry><title>被人误解的SIZEOF</title><link href="http://www.yanyulin.info/pages/2013/11/sizeof.html" rel="alternate"></link><updated>2013-11-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-18:pages/2013/11/sizeof.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;sizeof是一个函数吗?&lt;/p&gt;
&lt;p&gt;sizeof与strlen的区别?&lt;/p&gt;
&lt;p&gt;sizeof(int)(*p)的值是多少?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//是多少?&lt;/span&gt;
&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;&lt;span class="c1"&gt;//是多少？&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//值是多少&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;1:对于第一个问题，sizeof 不是一个函数，而是一个语言内置的关键字，不信你试试sizeof 4与sizeof(int),打印结果均是4，如果是函数，肯定要加上括号，即然没加括号，那么sizeof是啥呢:),如果还不信，你可以找任何一本C++/C程序语言书查查，sizeof是32个关键字中的一个，如果没有，你就换本书吧:)&lt;/p&gt;
&lt;p&gt;即然是关键字为什么又要加括号呢？你可以试一下sizeof int 与&lt;code&gt;sizeof(int)&lt;/code&gt;,第一个会编译通不过，而第二个确能编译通过，想想C/C++语言的规定，int前只能加signed.unsigned,auto,const,volative,用来修饰变量的存储方式，可没有提到前面可以加sizeof呦，如果前面加sizeof表示是什么存储方式呢:)&lt;/p&gt;
&lt;p&gt;2:sizeof是关键字，strlen是一个标准C语言库函数，用来求取字符串的长度，&lt;code&gt;char *str="abacd"&lt;/code&gt;,&lt;code&gt;sizeof str&lt;/code&gt;与&lt;code&gt;strlen（str)&lt;/code&gt;，编译一下，看看结果就知道了:),一个结果是4,一个结果是5，结果为4是因为一个指针占4字节，结果为5是因为串长abacd刚好5个字符，不作解释&lt;/p&gt;
&lt;p&gt;3:&lt;code&gt;sizeof(int)(*p)&lt;/code&gt;的值是多少?这个其借助1，已经分析的很详细了，其实就是取*p的值，对其转化成int类型的数据，再测量譔数据占的内存字节数，显然一个int型数据占4个字节&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="c1"&gt;//下面的结果是多少?&lt;/span&gt;
&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;测量结果是多少呢？这个结果是40，sizeof在此处测量的是一个数组的大小&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="err"&gt;是多少&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;细心的人会发现a[10]已经越界访问了，此处使用sizeof并不会报错，因为越界错误是运行时异常，编译器不作检查，此时a[10]编译器认为就是数组里的一个整形变量，结果当然也是4&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//值是多少?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面这个输出的值是多少呢？你可以写个程序试一下，结果是4，为什么呢，是因为C/C++语言规定函数无法以数组作为参数或者返回值，上面的函数在实际的编译过程中会被转化成&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
 &lt;span class="n"&gt;cout&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;endl&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//值是多少?&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;因为a是一个指向整形的指针，结果为4也是很显然的&lt;/p&gt;</summary><category term="C++学习"></category></entry><entry><title>Linux入门版视频教程(基础)</title><link href="http://www.yanyulin.info/pages/2013/11/vlinux1.html" rel="alternate"></link><updated>2013-11-18T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-11-18:pages/2013/11/vlinux1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;视频教程下载地址:&lt;a href="http://yunpan.cn/QUKdFfemwQhzP" target="_blank"&gt;点这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Linux基本知识以及启动&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux基本知识&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux介绍&lt;/p&gt;
&lt;p&gt;Linux安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux安装&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;图形模式安装&lt;/p&gt;
&lt;p&gt;文本模式安装&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Linux下的命令行(Shell命令)&lt;/p&gt;
&lt;p&gt;LILO介绍&lt;/p&gt;
&lt;p&gt;GNOME桌面环境介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;VI+RPM+DNS使用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;VI使用介绍&lt;/p&gt;
&lt;p&gt;RPM使用介绍&lt;/p&gt;
&lt;p&gt;DNS相关介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Samba+Apache&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Linux下Samba的配置以及使用&lt;/p&gt;
&lt;p&gt;Apache的使用&lt;/p&gt;
&lt;p&gt;Linux下的网络工具&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FTP&lt;/p&gt;
&lt;p&gt;Mail&lt;/p&gt;
&lt;p&gt;X Free86&lt;/p&gt;
&lt;p&gt;Telnet&lt;/p&gt;
&lt;p&gt;等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;</summary><category term="Linux视频"></category></entry><entry><title>2013届华为校园招聘成都上机题目</title><link href="http://www.yanyulin.info/pages/2013/09/huawei_2013_2.html" rel="alternate"></link><updated>2013-09-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-09-11:pages/2013/09/huawei_2013_2.html</id><summary type="html">&lt;p&gt;1.手机号码合法性判断（20分）&lt;/p&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;我国大陆运营商的手机号码标准格式为：国家码+手机号码，例如：8613912345678。特点如下：&lt;/p&gt;
&lt;p&gt;1、 长度13位；&lt;/p&gt;
&lt;p&gt;2、 以86的国家码打头；&lt;/p&gt;
&lt;p&gt;3、 手机号码的每一位都是数字。&lt;/p&gt;
&lt;p&gt;请实现手机号码合法性判断的函数（注：考生无需关注手机号码的真实性，也就是说诸如86123123456789这
样的手机号码，我们也认为是合法的），要求：&lt;/p&gt;
&lt;p&gt;1） 如果手机号码合法，返回0；&lt;/p&gt;
&lt;p&gt;2） 如果手机号码长度不合法，返回1&lt;/p&gt;
&lt;p&gt;3） 如果手机号码中包含非数字的字符，返回2；&lt;/p&gt;
&lt;p&gt;4） 如果手机号码不是以86打头的，返回3；&lt;/p&gt;
&lt;p&gt;注除成功的情况外，以上其他合法性判断的优先级依次降低。也就是说，如果判断出长度不合法，直接返回1即可，不需要再做其他合法性判断。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;verifyMsinsdn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*此题简单，按题循环一遍即可*/&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;verifyMsinsdn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;13&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;0&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;9&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;8&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;inMsisdn&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;6&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2.将一个字符串的元音字母复制到另一个字符串，并排序（30分） &lt;/p&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;有一字符串，里面可能包含英文字母（大写、小写）、数字、特殊字符，现在需要实现一函数，将此字符串中的元音字母挑选出来，存入另一个字符串中，并对字符串中的字母进行从小到大的排序（小写的元音字母在前，大写的元音字母在后，依次有序）。&lt;/p&gt;
&lt;p&gt;说明：&lt;/p&gt;
&lt;p&gt;1:元音字母是a,e,i,o,u,A,E,I,O,U。&lt;/p&gt;
&lt;p&gt;2:筛选出来的元音字母，不需要剔重；&lt;/p&gt;
&lt;p&gt;3:最终输出的字符串，小写元音字母排在前面，大写元音字母排在后面，依次有序。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;sortVowel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    此题循环一遍将大写字母与小写字母分开存储&lt;/span&gt;
&lt;span class="cm"&gt;    调用泛型算法分别对大写字母与小写字母进行排序&lt;/span&gt;
&lt;span class="cm"&gt;    再将二者结合起来即可&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;cstring&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sortVowel&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;string&lt;/span&gt; &lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tmpUpper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;e&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;i&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;o&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;u&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="o"&gt;+=*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;A&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;E&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;I&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;O&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;U&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;==*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;tmpUpper&lt;/span&gt;&lt;span class="o"&gt;+=*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;sort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmpUpper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;begin&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;&lt;span class="n"&gt;tmpUpper&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;end&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
    &lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;tmpUpper&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;strcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;tmpLow&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;c_str&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;3.身份证号码合法性判断  &lt;/p&gt;
&lt;p&gt;问题描述：&lt;/p&gt;
&lt;p&gt;我国公民的身份证号码特点如下： &lt;/p&gt;
&lt;p&gt;1:长度为18位；&lt;/p&gt;
&lt;p&gt;2:第1～17位只能为数字；&lt;/p&gt;
&lt;p&gt;3:第18位可以是数字或者小写英文字母x。&lt;/p&gt;
&lt;p&gt;4:身份证号码的第7~14位表示持有人生日的年、月、日信息。&lt;/p&gt;
&lt;p&gt;例如：511002198808080111或51100219880808011x。&lt;/p&gt;
&lt;p&gt;请实现身份证号码合法性判断的函数。除满足以上要求外，需要对持有人生日的年、月、日信息进行校验。年份大于等于1900年，小于等于2100年。需要考虑闰年、大小月的情况。所谓闰年，能被4整除且不能被100整除 或 能被400整除的年份，闰年的2月份为29天，非闰年的2月份为28天。其他情况的合法性校验，考生不用考虑。&lt;/p&gt;
&lt;p&gt;函数返回值：&lt;/p&gt;
&lt;p&gt;1） 如果身份证号合法，返回0；&lt;/p&gt;
&lt;p&gt;2） 如果身份证号长度不合法，返回1；&lt;/p&gt;
&lt;p&gt;3） 如果身份证号第1~17位含有非数字的字符，返回2；&lt;/p&gt;
&lt;p&gt;4） 如果身份证号第18位既不是数字也不是英文小写字母x，返回3；&lt;/p&gt;
&lt;p&gt;5） 如果身份证号的年信息非法，返回4；&lt;/p&gt;
&lt;p&gt;6） 如果身份证号的月信息非法，返回5；&lt;/p&gt;
&lt;p&gt;7） 如果身份证号的日信息非法，返回6（请注意闰年的情况）；&lt;/p&gt;
&lt;p&gt;除成功的情况外，以上其他合法性判断的优先级依次降低。也就是说，如果判断出长度不合法，直接返回1即可，不需要再做其他合法性判断。&lt;/p&gt;
&lt;p&gt;要求实现函数：
    int verifyIDCard(char* input)&lt;/p&gt;
&lt;p&gt;输入 char* input，表示输入的身份证号码字符串&lt;/p&gt;
&lt;p&gt;输出 无&lt;/p&gt;
&lt;p&gt;返回 判断的结果，类型为int&lt;/p&gt;
&lt;p&gt;示例&lt;/p&gt;
&lt;p&gt;1） 输入：”511002111222”，函数返回值：1；&lt;/p&gt;
&lt;p&gt;2） 输入：”511002abc123456789”，函数返回值：2；&lt;/p&gt;
&lt;p&gt;3） 输入：”51100219880808123a”，函数返回值：3；&lt;/p&gt;
&lt;p&gt;4） 输入：”511002188808081234”，函数返回值：4；&lt;/p&gt;
&lt;p&gt;5） 输入：”511002198813081234”，函数返回值：5；&lt;/p&gt;
&lt;p&gt;6） 输入：”511002198808321234”，函数返回值：6；&lt;/p&gt;
&lt;p&gt;7） 输入：”511002198808081234”，函数返回值：0； &lt;/p&gt;
&lt;p&gt;答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*&lt;/span&gt;
&lt;span class="cm"&gt;    此题按照题意一步一步的写下来即可，没太多算法基础，主要考的就是思维的严密性&lt;/span&gt;
&lt;span class="cm"&gt;*/&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;memory&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;verifyIDCard&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mh"&gt;18&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;17&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="n"&gt;isdigit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;17&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;17&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;x&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;12&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1900&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;2100&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;12&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;5&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;4&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="mh"&gt;9&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;30&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mon&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;400&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;29&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; 
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;28&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="n"&gt;atoi&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;date&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="mh"&gt;31&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;｝&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="华为笔试题"></category></entry><entry><title>String StringBuffer StringBuilder的区别分析</title><link href="http://www.yanyulin.info/pages/2013/07/string.html" rel="alternate"></link><updated>2013-07-31T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-07-31:pages/2013/07/string.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;这是一道很常见的面试题目，至少我遇到过String/StringBuffer/StringBuilder的区别：String是不可变的对象(final)类型，每一次对String对象的更改均是生成一个新的String对象，原有的对象不会改变，相比之下StringBuffer与StringBuilder均是可更改的对象，效率要大于String,两者之间的区别在于StringBuffer适用于多线程，是线程安全的，而StringBuiler是JDK5.0后出来的，专门针对单线程，效率上要高于StringBuffer。&lt;/p&gt;
&lt;p&gt;String测试的源代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//生成一个字符串对象&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//让两个tmp指向同一个字符串&lt;/span&gt;
&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//对字符串进行重新赋值，如果str是可以更改的，那么最终的结果就是tmp与str的值还是一样的&lt;/span&gt;
&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//将结果打印出来&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//test&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//abc&lt;/span&gt;
&lt;span class="c1"&gt;//时间测试，待会与后面结果对比&lt;/span&gt;
&lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//平均时间会运行好久好久的，真的，你可以试试，有几分钟&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码很显然了吧，如果String是可变对象的话，那么str与tmp的结果应该是一样的，因为指向了同一片空间，但最后结果不一样，是因为String指向的空间是一个final类型，不可更改的，执行str=”test”,实际上是又重新申请了空间存放test，然后str指向了”test”这片空间，而tmp不变，最后的时间测试中，由于每次都是由str+”a”构造出一个新的对象，然后将str指向这个新的对象，期间str原来指向的空间会由GC回收，因此会很费时的。&lt;/p&gt;
&lt;p&gt;看看String类实现的部份源码&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;final&lt;/span&gt; &lt;span class="nb"&gt;class&lt;/span&gt; &lt;span class="kt"&gt;String&lt;/span&gt;
&lt;span class="nx"&gt;implements&lt;/span&gt; &lt;span class="nx"&gt;java.io.Serializable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;Comparable&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;String&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;CharSequence&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/** 存放字符串的空间，看看前面的final,应该就明白了吧，修饰的内容是不可更改的*/&lt;/span&gt;
&lt;span class="k"&gt;private&lt;/span&gt; &lt;span class="nf"&gt;final&lt;/span&gt; &lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="nb"&gt;value&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;

/**偏移位置，第一个字符*/
private final int offset;

/**字符个数*/
private final int count;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;你也会发现，里面用来存储字符串的是一个char型的数组value,看看char的前面的那个final,应该明白了吧：）&lt;/p&gt;
&lt;p&gt;StringBuffer的测试源代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//生成一个StringBuffer对象,并在里面存放abc&lt;/span&gt;
&lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//tmp也指向这个StringBuffer对象&lt;/span&gt;
&lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//对字符串进行重新赋值，如果str是可以更改的，那么最终的结果就是tmp与str的值还是一样的&lt;/span&gt;
&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//将结果打印出来&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//abcabc&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//abcabc&lt;/span&gt;
&lt;span class="c1"&gt;//时间测试，待会与后面结果对比&lt;/span&gt;
&lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//平均时间在63ms左右&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码也是很显然的吗，由于操作的始终是同一个对象，同一片内存空间，因此tmp与str的值是一样的，在测试时间时，由于避免了内存的释放与回收(不是绝对的避免，当内存不足以存放数据时，又重新分配一片大点的空间，总的来说就是减少的内存的释放与回收)，因此时间大大减少，效率提高了。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt; &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;StringBuffer&lt;/span&gt; &lt;span class="n"&gt;extends&lt;/span&gt; &lt;span class="n"&gt;AbstractStringBuilder&lt;/span&gt;
 &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;java&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;io&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Serializable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CharSequence&lt;/span&gt;
 &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="n"&gt;final&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;serialVersionUID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;3388685877147921107L&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; * 可以看出会有16B的默认空间 &lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
  &lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="nf"&gt;StringBuffer&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;super&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;16&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;从这里可以看出，如果什么都不存放的话，StringBuffer会有16字节的默认空间&lt;/p&gt;
&lt;p&gt;看看StringBuffer的父类，更清楚:)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;abstract&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="n"&gt;AbstractStringBuilder&lt;/span&gt; &lt;span class="n"&gt;implements&lt;/span&gt; &lt;span class="n"&gt;Appendable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CharSequence&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="cm"&gt;/**&lt;/span&gt;
&lt;span class="cm"&gt; *这个value就是用来存放字符串的，默认情况下就是16B的空间，没有final吧:)&lt;/span&gt;
&lt;span class="cm"&gt; */&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;[];&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;看了这些，你也应该知道String与StringBuffer的区别，还有一点就是StringBuffer是线程安全的，体现在哪呢，看看源代码吧:)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;length&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;capacity&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;


&lt;span class="n"&gt;public&lt;/span&gt; &lt;span class="n"&gt;synchronized&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;ensureCapacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minimumCapacity&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimumCapacity&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;length&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;expandCapacity&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimumCapacity&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面只是部份方法，你可以看到的是大部份的方法都含有一个synchronized关键字，这个关键字的作用就是用来进行线程同步的，因此是多线程安全的。
StringBuilder的测试源代码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//生成一个StringBuilder对象,并在里面存放abc&lt;/span&gt;
&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="n"&gt;StringBuilder&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//tmp也指向这个StringBuffer对象&lt;/span&gt;
&lt;span class="n"&gt;StringBuilder&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="c1"&gt;//对字符串进行重新赋值，如果str是可以更改的，那么最终的结果就是tmp与str的值还是一样的&lt;/span&gt;
&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;abc&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//将结果打印出来&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//abcabc&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//abcabc&lt;/span&gt;
&lt;span class="c1"&gt;//时间测试，待会与后面结果对比&lt;/span&gt;
&lt;span class="n"&gt;long&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;();&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mh"&gt;1000000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;a&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="c1"&gt;//平均时间在36左右&lt;/span&gt;
&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;println&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;System&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;currentTimeMillis&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;上面的代码也是类似的，说明了StringBuilder与StringBuffer类似，但比StringBuffer的效率更改，这是为什么呢，看看源代码就知道了:)
源代码中StringBuffer与StringBuilder继承自同一个父类，代码极奇相似，只是StringBuilder各个函数少了synchonized关键字，这也就说明了StringBuilder不是线程安全的，即然有了synchronized关键字，那么代码每次运行的时候均需要锁住该对象，以避免其他对象调用该方法，不管是单线程还是多线程，因此这需要一定的开销，因此StringBuiler的效率要高于StringBuffer:)&lt;/p&gt;</summary><category term="Java"></category></entry><entry><title>2013年谷歌校招笔试(一)</title><link href="http://www.yanyulin.info/pages/2013/06/google_2013_1.html" rel="alternate"></link><updated>2013-06-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-06-11:pages/2013/06/google_2013_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;一：单选题&lt;/p&gt;
&lt;p&gt;1：使用C语言将一个1G字节的数组从头到尾全部设置为’A’,在一台典型的当代PC上，需要花费的CPU时间的数量级最接近：(&lt;code&gt;B&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;A 0.001秒 B 1秒 C 100秒 D 2小时&lt;/p&gt;
&lt;p&gt;2：在某些极端要求性能的场合，我们需要对程序进行优化，关天优化，以下说法正确的是(&lt;code&gt;D&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;A 将程序整个用汇编语言改写会大大提高程序性能&lt;/p&gt;
&lt;p&gt;B 在优化前，可以先确定哪部分代码最费时，然后对这部份代码用汇编改写，使用汇编的语句越少，程序运行的越快。&lt;/p&gt;
&lt;p&gt;C:使用汇编语句虽然可以提高程序的性能，但会降低程序的可移植性，所以应该绝对避免&lt;/p&gt;
&lt;p&gt;D:适当调整汇编指令的顺序，可以缩短程序的运行时间 &lt;/p&gt;
&lt;p&gt;3:对如下C语言程序在普通的X86PC上运行输出正确的是(&lt;code&gt;B&lt;/code&gt;)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;Char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="nf"&gt;f&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Char&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;512&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="n"&gt;Sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="n"&gt;hello&lt;/span&gt; &lt;span class="n"&gt;world&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;Return&lt;/span&gt; &lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;Main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;Printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;“&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="err"&gt;”&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;());&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;A 程序可能崩溃，也可能输出&lt;code&gt;hello world&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;B 程序可能崩溃，也可能输出 &lt;code&gt;world&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;C 程序可能崩溃，也可能输出&lt;code&gt;hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;D 程序一定崩溃&lt;/p&gt;
&lt;p&gt;4:方程&lt;code&gt;X1+X2+X3+X4=30&lt;/code&gt;,有多少满足&lt;code&gt;X1&amp;gt;=2,X2&amp;gt;=0,X3&amp;gt;=-5,X4&amp;gt;=8&lt;/code&gt;的整数解（&lt;code&gt;A&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;A 3276  B:3654 C:2925 D:17550&lt;/p&gt;
&lt;p&gt;5:一个袋子里装了100个苹果，100个香蕉，100个桔子，100个梨，如果每分钟从里面随机抽取一种水果，那么最多过多少分钟肯定至少能拿到一打相同种类的水果(1打=12)（&lt;code&gt;D&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;A:40 B:12 C:24 D:45&lt;/p&gt;
&lt;p&gt;6:双败淘汰赛与淘汰赛相仿，也是负者出局，但负一场并未淘汰，只是跌入负者组，在负者组再负者（即总共已负两场）才被淘汰，现在有10个人来参加又败淘汰赛，假设我们取消最后胜利组冠军的比赛，那么一共需要多少场比赛？（&lt;code&gt;B&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;A:16 B:17 C:18 D:19 E:20&lt;/p&gt;
&lt;p&gt;7:n个结点的二叉树，最多可以有多少层(&lt;code&gt;D&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;A: n/2 B:log(n) C:n-1 D:n&lt;/p&gt;
&lt;p&gt;8:下面哪一个序列不是上图的一个拓扑排序？（&lt;code&gt;C&lt;/code&gt;）&lt;/p&gt;
&lt;p&gt;A:ebfgadch B:aebdfch C:adchebfg D:aedbfgch&lt;/p&gt;
&lt;p&gt;9：假如某主机安装了2GB内存，在其上运行的某支持MMU的32位Linux发行版中，一共运行了X,Y,Z三个进程，下面关于三个进程使用的内存方式，哪个是可行的(&lt;code&gt;D&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;A.X,Y,Z的虚拟地址空间都映射到0-4G的虚拟地址上&lt;/p&gt;
&lt;p&gt;B.X在堆上分配总大小为1GB的空间，Y在堆上分配200MB,Z在堆上分配500MB，并且内存映射访问一个1GB的文件。&lt;/p&gt;
&lt;p&gt;C.X在堆上分配1GB,Y在堆上分配800MB,Z在堆上分配400MB&lt;/p&gt;
&lt;p&gt;D.以上访问方式都是可行的&lt;/p&gt;
&lt;p&gt;10：当使用TCP协议编程时，下列问题哪个是由程序员考虑和处理的(&lt;code&gt;D&lt;/code&gt;)&lt;/p&gt;
&lt;p&gt;A:乱序数据包的传递 &lt;/p&gt;
&lt;p&gt;B数据传输过程中的纠错 &lt;/p&gt;
&lt;p&gt;C:网络拥塞处理 &lt;/p&gt;
&lt;p&gt;D:发送数据的格式与应用层的协议&lt;/p&gt;
&lt;p&gt;二：程序设计与算法&lt;/p&gt;
&lt;p&gt;1：给定三个整数a,b,c实现函数int median(int a,int b,int c),返回三个数的中位数，不可以使用sort,要求整数操作（比较,位运行，加减乘除)次数尽量少，并分析说明程序最坏和平均情况下使用的操作次数&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;median&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;abMax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;acMax&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;abMax&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;acMax&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;abMax&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;acMax&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;abMax&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;acMax&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;abs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;c&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2：给定一个key(只含有ASCII编码的小写英文字母),例如kof，然后对input的string(只含有ASCII编码的小写英文字母)利用这个key进行排序，顺序是:先按照key中的字符顺序，然后对key中不包含key的字符，按a-z排序&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nx"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="vi"&gt;#include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="kt"&gt;string&lt;/span&gt;&lt;span class="bp"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;h&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="nx"&gt;using&lt;/span&gt; &lt;span class="nx"&gt;namespace&lt;/span&gt; &lt;span class="nx"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="nx"&gt;int&lt;/span&gt; &lt;span class="nx"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="nx"&gt;char&lt;/span&gt; &lt;span class="nb"&gt;key&lt;/span&gt;&lt;span class="err"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=&amp;quot;kof&amp;quot;;
char str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;50&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=&amp;quot;wqtewqtewkwetiowoweff&amp;quot;;
sort(str,str+strlen(str));
int flag=0;
for(int i=0;i&lt;span class="nt"&gt;&amp;lt;strlen&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="err"&gt;);&lt;/span&gt;&lt;span class="na"&gt;i&lt;/span&gt;&lt;span class="err"&gt;++)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;j=&lt;/span&gt;&lt;span class="s"&gt;0;j&amp;lt;strlen(str);j++)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;if&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;key&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="na"&gt;=&lt;/span&gt;&lt;span class="s"&gt;=str&lt;/span&gt;&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;j&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="s"&gt;)&lt;/span&gt;
&lt;span class="err"&gt;{&lt;/span&gt;
&lt;span class="na"&gt;for&lt;/span&gt;&lt;span class="err"&gt;(&lt;/span&gt;&lt;span class="na"&gt;int&lt;/span&gt; &lt;span class="na"&gt;k=&lt;/span&gt;&lt;span class="s"&gt;j;k&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;flag;k--)
{
str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;k&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
}
str&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;flag&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;=key&lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;;
++flag;
}
}
}
&lt;/pre&gt;&lt;/div&gt;</summary><category term="谷歌笔试题"></category></entry><entry><title>2013年华为校招机试(一)</title><link href="http://www.yanyulin.info/pages/2013/06/huawei_2013_1.html" rel="alternate"></link><updated>2013-06-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-06-11:pages/2013/06/huawei_2013_1.html</id><summary type="html">&lt;hr /&gt;
&lt;p&gt;通过键盘输入任意一个字符串序列，字符串可能包含多个子串，子串以空格分隔，请编写一个程序，自动分离出各个子串，并使用’,’将其分隔，并且在最后也补充一个’,’，并将子串存储。&lt;/p&gt;
&lt;p&gt;如果输入&lt;code&gt;”abc def ghi d”&lt;/code&gt;,结果将是&lt;code&gt;abc,def,gh,i,d&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;要求实现函数&lt;code&gt;Void DivideString(const char *pInputStr,long IinputLen,char *pOutputStr);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pInputStr&lt;/code&gt;:输入字符串&lt;/p&gt;
&lt;p&gt;&lt;code&gt;IinputLen&lt;/code&gt;:输入字符串的长度&lt;/p&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pOutputStr&lt;/code&gt;:输出字符串，字符串已开辟好，与输入字符串等长&lt;/p&gt;
&lt;p&gt;注意：只需要完成该函数功能算法，中间不需要有任何IO的输入输出&lt;/p&gt;
&lt;p&gt;解，首先去掉字符串前面开始的空格，然后遍历字符串，遇到空格时，将标志设为真，先不处理，等下次时循环时，若标志为真，则在字符前加一,号即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;DivideString&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;IinputLen&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;OutputStr&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//计数&lt;/span&gt;
&lt;span class="kt"&gt;bool&lt;/span&gt; &lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;false&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//去掉前面的空格&lt;/span&gt;
&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;IinputLen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39; &amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;true&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;continue&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//如果flag为true,说明有空格，则将空格变成了, &lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=!&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;OutputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;,&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;OutputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pInputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="n"&gt;OutputStr&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二:将一个字符串中出现次数最少的字符删掉，并保证删除后的字符顺序不变，如果出现次数最少的字符有多种，则这几种字符都要删除，该字符串长度不会超过20个字符。 例如：源字符串为&lt;code&gt;“abcdd”&lt;/code&gt;，删除后为&lt;code&gt;“dd”&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;解：此题主要是内存移位操作&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;deleteMin&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ILen&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//最小出现次数&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;ILen&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;26&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sz&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;a&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ILen&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//因为跳过了一位&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;InputSrc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="华为笔试题"></category></entry><entry><title>中国人民银行2013校招技术类面经</title><link href="http://www.yanyulin.info/pages/2013/01/renmingyinhang_1.html" rel="alternate"></link><updated>2013-01-19T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2013-01-19:pages/2013/01/renmingyinhang_1.html</id><summary type="html">&lt;p&gt;面试地点:&lt;strong&gt;北京&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;面试职位:&lt;strong&gt;技术类岗位&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;中国人民银行&lt;/strong&gt;在2013年校招中只有一面，结果会在2月旬的时候进行通知，随后会进行体检，再然后是政治材料的政审，中国人民银行据说只要进入了，就相当于公务员的待遇，不知道真假~~~&lt;/p&gt;
&lt;p&gt;只有一面&lt;/p&gt;
&lt;p&gt;下午面计算机的&lt;code&gt;28&lt;/code&gt;个人，好多清北、复旦、同济、中科院的，各种名校呀，我在其中排第&lt;code&gt;9&lt;/code&gt;,鸭梨很大，⊙﹏⊙b汗&lt;/p&gt;
&lt;p&gt;&lt;code&gt;3&lt;/code&gt;分钟自我介绍，包括教育经历、学习、家庭等&lt;/p&gt;
&lt;p&gt;这个问题，就说了&lt;code&gt;1&lt;/code&gt;分钟，说得乱七八糟，光说技术去了，觉得人家也不见得想听这，忘了说在校学习的奖学金荣誉、证书、个性,总结一句话，也是教训，面试国企一类的，没必要去讲技术，就需要讲一下你获得了哪些奖励，哪些证书 ，以及自已的爱好等，就OK啦，没必要去讲技术了&lt;/p&gt;
&lt;p&gt;介绍给自己印象最深的一本书&lt;/p&gt;
&lt;p&gt;介绍下网络工程师的证书&lt;/p&gt;
&lt;p&gt;为什么选择这样的行业而没有选择互联网等相关的企业，说白了就是问你为什么选择中国人民银行&lt;/p&gt;
&lt;p&gt;小结：语言表达能力有待加强，感觉说的语无伦次、逻辑混乱&lt;/p&gt;
&lt;p&gt;而且就面了&lt;code&gt;5&lt;/code&gt;分钟，貌似正常应该&lt;code&gt;10&lt;/code&gt;分钟&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="银行面经"></category></entry><entry><title>2012年华为校招南京机试</title><link href="http://www.yanyulin.info/pages/2012/11/huawei_2012_3.html" rel="alternate"></link><updated>2012-11-12T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2012-11-12:pages/2012/11/huawei_2012_3.html</id><summary type="html">&lt;p&gt;一：给定一个字符串，寻找它的一个最大子字符串，该子字符串是回文。例如给定一个用例的字符串&lt;code&gt;”gabcdcbaef”&lt;/code&gt;,那么最大回文 字串是”abcdcba”&lt;/p&gt;
&lt;p&gt;函数声明为&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;huiwen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//如果是回文字符串，那么从字符串的最中间向两头分别遍历，则应该都是相等的&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;huiwen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[],&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="c1"&gt;//start表示回文字串的起始位置&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;left1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//奇数&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//避免发生了越界访问&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;//从中间向两边遍历&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; 
                &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//偶数&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="c1"&gt;//避免发生了越界访问&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;t1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="c1"&gt;//从中间向两边遍历&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt; 
                &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;left1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxLeft&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;left1&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;left1&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;maxLeft&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;maxLeft&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;maxLeft&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//获取其起始地址&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;left1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;memcpy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;output&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;input&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;二：删除字符串中所有给定的子串&lt;/p&gt;
&lt;p&gt;问题描述： 在给定字符串中查找所有特定子串并删除，若是没有找到响应子串，则不作任何操作。要求实现函数： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;delete_sub_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sub_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入: &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;str：输入的被操作字符串&lt;/p&gt;
&lt;p&gt;sub_str：需要查找并删除的特定子字符串&lt;/p&gt;
&lt;p&gt;输出: result_str：在str字符串中删除所有sub_str子字符串后的终局&lt;/p&gt;
&lt;p&gt;返回: 删除的子字符串的个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;子串匹配只考虑最左匹配情况，即只需要从左到右进行字串匹配的情况。比如：在字符串"abababab"中，采用最左匹配子串"aba", 可以匹配2个"aba"字串。若是匹配出从左到右位置2起头的"aba"，则不是最左匹配，且只能匹配出1个"aba"字串。输入字符串不会 跨越100 Bytes，请不用考虑超长字符串的情况。&lt;/p&gt;
&lt;p&gt;示例 &lt;/p&gt;
&lt;p&gt;输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abcde123abcd123&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sub_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;123&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abcdeabcd&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abcde123abcd123&amp;quot;&lt;/span&gt;

&lt;span class="n"&gt;sub_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;1234&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输出：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;result_str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;abcde123abcd123&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;返回：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;delete_sub_str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;sub_str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result_str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sub_str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="c1"&gt;//获取子串的长度&lt;/span&gt;
    &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="n"&gt;sub_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
             &lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
             &lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;len&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="c1"&gt;//删除子串&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;
        &lt;span class="n"&gt;result_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;result_str&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;cnt&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;三：在计算机中，由于位宽限制，只能进行有限精度的十进制整数加减法，比如在32位宽计算机中，参与运算的操作数和结果必须在-231~231-1之间。若是需要进行更大规模的十进制整数加法，需要使用特殊的方法实现，比如使用字符串保存操作数和结果，采纳逐位运算的方式进行。如下：9876543210 + 1234567890 = ?，让字符串 num1="9876543210"，字符串 num2="1234567890"，结果 保存在字符串 result = "11111111100"。-9876543210 + (-1234567890) = ?让字符串 num1="-9876543210"，字符串 num2="-1234567890"，终局保存在字符串 result = "-11111111100"。&lt;/p&gt;
&lt;p&gt;要求编程实现上述高精度的十进制加法。&lt;/p&gt;
&lt;p&gt;要求实现函数： &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;输入：&lt;/p&gt;
&lt;p&gt;num1：字符串形式操作数1，若是操作数为负，则num1[0]为符号位-&lt;/p&gt;
&lt;p&gt;num2：字符串形式操作数2，若是操作数为负，则num2[0]为符号位-&lt;/p&gt;
&lt;p&gt;输出：result：保存加法计较终局字符串，若是终局为负，则result[0]为符号位。&lt;/p&gt;
&lt;p&gt;当输入为正数时，+不会出今朝输入字符串中；当输入为负数时，-会出今朝输入字符串中，且必然在输入字符串最左边位置输入字符串所有位均代表有效数字，即不存在由0起头的输入字符串，比如"0012", "-0012"不会呈现；要求输出字符串所有位均为有效数字，终局为正或0时+不出今朝输出字符串，终局为负时输出字符串最左边位置为-。&lt;/p&gt;
&lt;p&gt;答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//只考虑同号的情况下，不同号情况类似【程序有点冗长，共同改进】&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;len1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;len2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;flag&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;&amp;#39;))&lt;/span&gt;&lt;span class="c1"&gt;//同为正数&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="n"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;_cpp_max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;len1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;len2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="o"&gt;+*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p1&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=*&lt;/span&gt;&lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;10&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="k"&gt;else&lt;/span&gt;
            &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;48&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
                &lt;span class="n"&gt;carry&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="p"&gt;}&lt;/span&gt;
            &lt;span class="n"&gt;p2&lt;/span&gt;&lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num1&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;num2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;^&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;left&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;tmp&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="华为笔试题"></category></entry><entry><title>2012年华为成都校招机试</title><link href="http://www.yanyulin.info/pages/2012/11/huawei_2012_1.html" rel="alternate"></link><updated>2012-11-11T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2012-11-11:pages/2012/11/huawei_2012_1.html</id><summary type="html">&lt;p&gt;1：去掉一个数组里的最大值与最小值，求数组元素的平均值。&lt;/p&gt;
&lt;p&gt;函数接口为：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avescore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;float&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;答：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*解析：此题比较简单，循环一遍，记下数组的最大值与最小值以及总和，然后在求的总和里面减掉最大值与最小值，再求平均数即可，时间复杂度为O(n),代码不多，如下：*/&lt;/span&gt;
&lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;avescore&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="n"&gt;float&lt;/span&gt; &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sum&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;max&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;min&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;2: 对一个数组，将数组中偶数从大到小排序，奇数从小到大排序,奇数和偶数交叉着放且输出数组第一位放奇&lt;/p&gt;
&lt;p&gt;数  若奇数和偶数不等长，则把剩下的直接放到数组中。&lt;/p&gt;
&lt;p&gt;函数接口为：
    void sortArray(int a[],int n)&lt;/p&gt;
&lt;p&gt;解析&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本题思路先对数组无论奇偶排一下序，数组变成有序后，此时奇数是从小到大排序，偶数也是从小到大&lt;/p&gt;
&lt;p&gt;排序的，假设排序好的数组为&lt;/p&gt;
&lt;p&gt;2 1 6 8 9 &lt;/p&gt;
&lt;p&gt;然后再循环一次，在循环中如下处理&lt;/p&gt;
&lt;p&gt;按题意要求奇数打头故执行如下&lt;/p&gt;
&lt;p&gt;第一次执行&lt;/p&gt;
&lt;p&gt;序列变成 1 2 6 8 9&lt;/p&gt;
&lt;p&gt;第二次执行1 8 6 2 9&lt;/p&gt;
&lt;p&gt;第三次执行 1 8 9 2 6&lt;/p&gt;
&lt;p&gt;第四次执行 1 8 9 6 2&lt;/p&gt;
&lt;p&gt;第五次执行 18 9 6 2 &lt;/p&gt;
&lt;p&gt;由上序执行可以看出思路了吧，时间复杂度可能有点高，介于&lt;code&gt;O(n)-O(n^2)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;答&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="cm"&gt;/*解析，本题思路先遍历一遍数组，得出数组中的奇数个数与偶数个数，根据奇偶个数分别开辟空间&lt;/span&gt;
&lt;span class="cm"&gt;再使用泛型算法对两个数组进行排序，奇数数组根据题意应该从小到大排序，偶数数组应是从大到小&lt;/span&gt;
&lt;span class="cm"&gt;进行排序，再将排好序的数组根据题意要求重新赋值到原数里里&lt;/span&gt;
&lt;span class="cm"&gt;算法的空间复杂度O(n),不是很好的一个算法*/&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;iostream&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="k"&gt;include&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;algorithm&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;using&lt;/span&gt; &lt;span class="n"&gt;namespace&lt;/span&gt; &lt;span class="n"&gt;std&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cmpG&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;cmpL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; 
&lt;span class="p"&gt;{&lt;/span&gt; 
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="k"&gt;void&lt;/span&gt; &lt;span class="n"&gt;sortArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt; &lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxE&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?++&lt;/span&gt;&lt;span class="nl"&gt;maxE:&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt; &lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;maxE&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;?&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;j&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;cmpG&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;qsort&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;maxE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;sizeof&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;cmpL&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;int&lt;/span&gt; &lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;maxE&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;maxE&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;||&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;&lt;span class="mh"&gt;2&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mh"&gt;0&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;oIndex&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="n"&gt;maxO&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
            &lt;span class="n"&gt;score&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;eIndex&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;od&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
    &lt;span class="n"&gt;free&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</summary><category term="华为笔试题"></category></entry><entry><title>阿里巴巴校招2010年软研面经</title><link href="http://www.yanyulin.info/pages/2010/11/ali_2.html" rel="alternate"></link><updated>2010-11-19T00:00:00+08:00</updated><author><name>烟雨林</name></author><id>tag:www.yanyulin.info,2010-11-19:pages/2010/11/ali_2.html</id><summary type="html">&lt;p&gt;刚刚参加了阿里巴巴的面试，现将题目公布于此，希望对找工作的人有帮助。&lt;/p&gt;
&lt;p&gt;1、String,StringBuffer, StringBuilder 的区别是什么？String为什么是不可变的？&lt;/p&gt;
&lt;p&gt;这道题源码分析，可以参考这篇博文
&lt;a href="http://www.yanyulin.info/pages/2013/07/string.html" target="_blank"&gt;
String StringBuffer StringBuilder的区别分析
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;String对象的值是不可变的，而StringBuffer和StringBuilder的值可以变化，适用于动态拼接长字符串，如SQL语句。StringBuffer是同步的，StringBuilder是非同步的。String类中用于保存字符串值的是char数组，该数组被声明为final，因而是不可变的。&lt;/p&gt;
&lt;p&gt;2、&lt;code&gt;VECTOR&lt;/code&gt;,&lt;code&gt;ARRAYLIST&lt;/code&gt;, &lt;code&gt;LINKEDLIST&lt;/code&gt;的区别是什么？&lt;/p&gt;
&lt;p&gt;这道题源码分析，可以参考这篇博文
&lt;a href="http://blog.csdn.net/zwjlpeng/article/details/9701249" target="_blank"&gt;
String StringBuffer StringBuilder的区别分析
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Vector&lt;/code&gt;是java1版本遗留下来的，本身为同步的，Arraylist类似于数组，各个元素的物理存储位置相邻，适用于随机存取，但插入删除会造成元素移动；而LinkedList是通常所说的链表，逻辑位置相邻的元素物理上不一定是相邻存储，适用于插入删除较多的情况，而查找效率较低。&lt;/p&gt;
&lt;p&gt;3、&lt;code&gt;Hashtable&lt;/code&gt;, &lt;code&gt;HashMap&lt;/code&gt;，&lt;code&gt;TreeMap&lt;/code&gt;区别&lt;/p&gt;
&lt;p&gt;这道题源码分析，可以参考这篇博文
&lt;a href="http://blog.csdn.net/zwjlpeng/article/details/9746425" target="_blank"&gt;
String StringBuffer StringBuilder的区别分析
&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Hashtable&lt;/code&gt;和&lt;code&gt;HashMap&lt;/code&gt;都实现了Map接口，都是通过hash函数将一个值映射到一个存储位置从而实现键值对的高效查询。Hashtable为java1版本遗留下来的，是同步的，键和值都不能为null，判断是否包含键值，通过contains(key,value)来实现；HashMap是非同步的，因此在单线程环境下，其效率比Hashtable要高，可以存入一个&lt;code&gt;null&lt;/code&gt;键，多个null值，将判断是否包含键值区分为containsKey(key)和containsValue(value)两种方式。TreeMap主要是实现了键的排序功能，即各个键是按序排列的。&lt;/p&gt;
&lt;p&gt;4、&lt;code&gt;ConcurrentMap&lt;/code&gt;和&lt;code&gt;HashMap&lt;/code&gt;的区别&lt;/p&gt;
&lt;p&gt;ConcurrentMap是专用于多线程环境的，是同步的。而HashMap针对单线程环境，方法都不是同步的，要在多线程中实现同步必须通过外加同步。&lt;/p&gt;
&lt;p&gt;5、&lt;code&gt;Tomcat&lt;/code&gt;，&lt;code&gt;apache&lt;/code&gt;，&lt;code&gt;jboss&lt;/code&gt;的区别&lt;/p&gt;
&lt;p&gt;Tomcat，JBoss&lt;/p&gt;
&lt;p&gt;6、&lt;code&gt;GET/POST&lt;/code&gt;区别&lt;/p&gt;
&lt;p&gt;Get和Post是指Servlet中处理HttpServletRequest时的不同方式，其设定方式是在表单中的action method指定（get或post），则请求提交到对应servlet时，会调用相应的doPost()或doGet()方法。
二者的主要区别：get是通过url流来传递数据的，因此要传送的数据直接通过url后加参数值对来实现，缺点是安全性不高，密码等不能通过该方式来传递，而且传输的数据量有严格的限制；post是通过新建的流来实现数据的传输的，因此url不会显示需要传输的数据，安全性相对来说要高，而且传输的数据量没有限制。&lt;/p&gt;
&lt;p&gt;7、&lt;code&gt;SESSION&lt;/code&gt;, &lt;code&gt;COOKIE&lt;/code&gt;区别&lt;/p&gt;
&lt;p&gt;二者都是用来记录用户信息的方式。Session是指一次Http会话，其生命周期也仅此一次会话，因此只能保存一次会话的信息，会话结束后session对象就会销毁。而Cookie是指浏览器为了记忆用户的某些常用信息而保存在客户端的数据，数据不会随会话的结束而丢失。&lt;/p&gt;
&lt;p&gt;8、&lt;code&gt;Servlet&lt;/code&gt;的生命周期&lt;/p&gt;
&lt;p&gt;Web容器启动后，当用户请求某个servlet时，先查看容器中是否已经有该servlet的实例，如果存在，则直接将请求发送给改serlvet处理，否则新建一个servlet实例，调用其init方法进行初始化操作，然后调用其service方法处理请求，处理的方式有doGet和doPost等，请求处理完成后形成http响应发送给客户端，当Web容器退出后，会调用servlet的destroy方法将serlvet实例销毁。&lt;/p&gt;
&lt;p&gt;9、&lt;code&gt;HTTP&lt;/code&gt;报文包含内容&lt;/p&gt;
&lt;p&gt;Http报文包括HttpRequest报文和HttpResponse报文。
HttpRequest报文包括：Http版本信息，字符编码，请求的URI，请求方式（get或post），请求标头信息，请求主体。HttpResponse报文头包括：Http版本，响应的状态码，响应状态码对应的摘要文字，响应标头信息，以及响应主体&lt;/p&gt;
&lt;p&gt;10、&lt;code&gt;Statement&lt;/code&gt;与&lt;code&gt;PreparedStatement&lt;/code&gt;的区别,什么是SQL注入，如何防止SQL注入？&lt;/p&gt;
&lt;p&gt;Statement和PreparedStatement都是用于执行SQL语句的对象。Statement的sql语句无法进行动态的修改，必须在运行时才对sql语句进行解析。PreparedStatement正如其名，在编译期就对sql语句进行了解析放入内存中，适用于很多sql语句模式一样，只是数据不同的情况，不需要对每一个都进行sql解析，提高了效率。PreparedStatement还可以实现批量sql的执行。SQL注入是指在动态拼接sql语句的过程中，插入恶意的数据，导致原本的sql语句含义甚至结构发生了变化。防止sql注入的方式：对用户输入控件的输入文本进行合法性校验，如果发现疑似注入的内容，予以屏蔽。&lt;/p&gt;
&lt;p&gt;11、redirect, foward区别&lt;/p&gt;
&lt;p&gt;redirect是重定位，这是通过浏览器重新请求某个新的URL，然后接收响应数据并展示给用户，因此浏览器知道整个重定位的过程。而forward直接通过servlet向服务器请求某个URL，得到响应后，将数据再发给浏览器，因此浏览器根本不知道这个响应信息是否是经过转发的。&lt;/p&gt;
&lt;p&gt;12、关于JAVA内存模型，一个类（两个属性，四个方法）实例化100次，现在内存中的存储状态，
几个对象，几个属性，几个方法。&lt;/p&gt;
&lt;p&gt;Java的内存分为栈和堆，栈是程序运行的单位，主要保存基本数据类型的数据和程序运行时的信息，而堆主要保存对象的信息。
而Java的堆是按分代方式来组织的，分为年轻代（新生代、幸存1区，幸存2区），年老代以及持久代。其中新建的对象一般都在新生代，随着系统的运行，GC会将新生代的对象移至幸存区，年老代。而持久代主要保存类信息和方法信息。因此，一个包含两个属性四个方法的类实例化100次后再内存中的存储状态：四个方法仅在持久代内存区域存储1份，而对象在新生代会产生100个，且每个对象都有自己的属性，故内存中有200个属性值。&lt;/p&gt;
&lt;p&gt;13、谈谈Hibernate的理解，一级和二级缓存的作用，在项目中Hibernate都是怎么使用缓存的。&lt;/p&gt;
&lt;p&gt;Hibernate是ORM框架的一种实现，为了使用户从繁重的SQL语句中解放出来而设计的，将对象与关系数据库中的实体通过配置文件建立映射关系，从而实现数据的存取对象化。&lt;/p&gt;
&lt;p&gt;14、反射讲一讲，主要是概念,都在哪需要反射机制，反射的性能，如何优化&lt;/p&gt;
&lt;p&gt;反射是通过类名来加载类的信息，并创建对象。一般都是通过反射来实现Java的多态性，可扩展性。Java中主张面向接口编程，当用户需要新的特性时，只要实现指定的接口，并通过修改配置文件即可将新性能挂接到原有系统中，而不需要对原有系统进行修改。&lt;/p&gt;
&lt;p&gt;15、谈谈Hibernate与Ibatis的区别，哪个性能会更高一些&lt;/p&gt;
&lt;p&gt;16、对Spring的理解，项目中都用什么？怎么用的？对&lt;code&gt;IOC&lt;/code&gt;、和AOP的理解及实现原理&lt;/p&gt;
&lt;p&gt;17、线程同步，并发操作怎么控制&lt;/p&gt;
&lt;p&gt;多线程环境下，不同线程如果不共享数据时，可以异步执行，提高系统的性能与效率，但是当需要共享数据时，需要做同步控制，以保持数据的一致性。线程同步是指多个线程共享数据，其中一个线程需要使用另一个线程的结果，必须等另一个线程执行完成后才能继续执行。在java中线程同步主要通过synchronized关键字，wait()，notify(),notifyAll()机制，Lock等来实现线程同步。同步操作通过锁机制保证同一时间只有一个线程访问该对象，但是也存在一定的问题：导致性能下降，容易出现死锁。&lt;/p&gt;
&lt;p&gt;18、描述struts的工作流程。&lt;/p&gt;
&lt;p&gt;浏览器客户端提出request请求，Web容器接收到request后，交给&lt;code&gt;ActionServlet&lt;/code&gt;，根据struts-config.xml配置文件中配置的表单，生成ActionForm，将请求转发给Action，Action调用ActionForm以及JavaBean执行逻辑处理，形成ActionForward返回给ActionServlet，ActionServlet根据配置将请求转发给相应的JSP页面，JSP页面调用JavaBean后形成Http响应回送给客户端。&lt;/p&gt;
&lt;p&gt;19、&lt;code&gt;Tomcat&lt;/code&gt;的session处理，如果让你实现一个tomcatserver，如何实现session机制&lt;/p&gt;
&lt;p&gt;20、关于Cache(Ehcache,Memcached)&lt;/p&gt;
&lt;p&gt;21、sql的优化相关问题&lt;/p&gt;
&lt;p&gt;22、oracle中 rownum与rowid的理解，一千条记录我查200到300的记录怎么查？&lt;/p&gt;
&lt;p&gt;假设表为TABLE_NAME，则查询表中第200到第300条记录的SQL语句如下：&lt;/p&gt;
&lt;p&gt;&lt;textarea style="width:100%;height:100px"&gt;
SELECT * FROM (
　　SELECT rownum num, x.* FROM(
　　　　SELECT * TABLE_NAME ORDER BY PRI_KEY
　　)x
)y
WHERE y.num BETWEEN 200 AND 300；
&lt;/textarea&gt;&lt;/p&gt;
&lt;p&gt;23、如何分析ORACLE的执行计划？&lt;/p&gt;
&lt;p&gt;24、 DB中索引原理，种类，使用索引的好处和问题是什么？&lt;/p&gt;
&lt;p&gt;DB中为了能快速检索数据，对记录添加索引，一般采用B+树索引。索引分为聚簇索引和非聚簇索引。当在表的某个字段建立聚簇索引后，记录相当于索引数的叶子节点，故记录的物理顺序会按指定字段的值进行调整，因此一个表只能建立一个聚簇索引，这种索引不适用于大量插入删除数据的情况，因为会导致记录的频繁移动，降低性能。而在表上建立非聚簇索引后，记录位于索引树外，故表的记录不会发生物理上的顺序调整，一个表上可以在多个字段上建立非聚簇索引，这种索引适应于对表进行频繁增删的情况。&lt;/p&gt;
&lt;p&gt;25、&lt;code&gt;JVM&lt;/code&gt;垃圾回收实现原理。垃圾回收的线程优先级。&lt;/p&gt;
&lt;p&gt;26、&lt;code&gt;jvm&lt;/code&gt;最大内存设置。设置的原理。结合垃圾回收讲讲。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-Xms:1024m&lt;/code&gt; 设置初始化堆大小
&lt;code&gt;–Xmx:1024m&lt;/code&gt;设置最大堆大小
具体大小应根据内存总大小值来确定，一般这两个值应相等，否则当内存不够时，造成GC重新分配内存。
&lt;code&gt;-XX:PermSize=1024m&lt;/code&gt; 设置永久内存区大小
&lt;code&gt;-XX:MaxParmSize=1024m&lt;/code&gt; 设置最大永久内存区大小。&lt;/p&gt;
&lt;p&gt;到此为止&lt;/p&gt;</summary><category term="阿里面经"></category></entry></feed>